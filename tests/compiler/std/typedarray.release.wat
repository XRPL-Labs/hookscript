(module
 (type $i32_i32_i32_=>_i32 (func_subtype (param i32 i32 i32) (result i32) func))
 (type $i32_i32_=>_i32 (func_subtype (param i32 i32) (result i32) func))
 (type $i32_i32_i32_i32_=>_i32 (func_subtype (param i32 i32 i32 i32) (result i32) func))
 (type $i64_i32_i32_=>_i32 (func_subtype (param i64 i32 i32) (result i32) func))
 (type $i64_i64_=>_i32 (func_subtype (param i64 i64) (result i32) func))
 (type $i32_i32_i32_=>_none (func_subtype (param i32 i32 i32) func))
 (type $i32_=>_i32 (func_subtype (param i32) (result i32) func))
 (type $f32_i32_i32_=>_i32 (func_subtype (param f32 i32 i32) (result i32) func))
 (type $f64_i32_i32_=>_i32 (func_subtype (param f64 i32 i32) (result i32) func))
 (type $f64_f64_=>_i32 (func_subtype (param f64 f64) (result i32) func))
 (type $f32_f32_=>_i32 (func_subtype (param f32 f32) (result i32) func))
 (type $i32_i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32 i32) func))
 (type $i32_i32_i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32 i32 i32) func))
 (type $i64_i64_i32_i32_=>_i64 (func_subtype (param i64 i64 i32 i32) (result i64) func))
 (type $none_=>_none (func_subtype func))
 (type $i32_=>_none (func_subtype (param i32) func))
 (type $i32_i32_=>_none (func_subtype (param i32 i32) func))
 (type $f32_f32_i32_i32_=>_f32 (func_subtype (param f32 f32 i32 i32) (result f32) func))
 (type $f64_f64_i32_i32_=>_f64 (func_subtype (param f64 f64 i32 i32) (result f64) func))
 (type $i64_i32_i32_=>_i64 (func_subtype (param i64 i32 i32) (result i64) func))
 (type $i64_i32_i32_=>_none (func_subtype (param i64 i32 i32) func))
 (type $f32_i32_i32_=>_f32 (func_subtype (param f32 i32 i32) (result f32) func))
 (type $f64_i32_i32_=>_f64 (func_subtype (param f64 i32 i32) (result f64) func))
 (type $f32_i32_i32_=>_none (func_subtype (param f32 i32 i32) func))
 (type $f64_i32_i32_=>_none (func_subtype (param f64 i32 i32) func))
 (type $none_=>_i32 (func_subtype (result i32) func))
 (type $i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32) func))
 (import "env" "_g" (func $~lib/builtins/_g (param i32 i32) (result i32)))
 (global $~lib/rt/itcms/total (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/threshold (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/state (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/visitCount (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/pinSpace (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/iter (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/toSpace (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/white (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/fromSpace (mut i32) (i32.const 0))
 (global $~lib/rt/tlsf/ROOT (mut i32) (i32.const 0))
 (global $~argumentsLength (mut i32) (i32.const 0))
 (global $std/typedarray/forEachCallCount (mut i32) (i32.const 0))
 (global $std/typedarray/forEachSelf (mut i32) (i32.const 0))
 (global $~lib/memory/__stack_pointer (mut i32) (i32.const 45316))
 (memory $0 1)
 (data (i32.const 1036) ",")
 (data (i32.const 1048) "\01\00\00\00\0e\00\00\00Invalid length")
 (data (i32.const 1084) ",")
 (data (i32.const 1096) "\01\00\00\00\14\00\00\00Allocation too large")
 (data (i32.const 1196) ",")
 (data (i32.const 1208) "\01\00\00\00\12\00\00\00Index out of range")
 (data (i32.const 1276) "\1c")
 (data (i32.const 1288) "\0e\00\00\00\08\00\00\00\01")
 (data (i32.const 1308) "\1c")
 (data (i32.const 1324) "\05\00\00\00\01\01\01\04\05")
 (data (i32.const 1340) "\1c")
 (data (i32.const 1356) "\05")
 (data (i32.const 1372) "\1c")
 (data (i32.const 1388) "\05\00\00\00\01\01")
 (data (i32.const 1404) "\1c")
 (data (i32.const 1420) "\05\00\00\00\01\01\00\02\02")
 (data (i32.const 1436) "\1c")
 (data (i32.const 1452) "\05\00\00\00\01\01\00\02\02")
 (data (i32.const 1468) "\1c")
 (data (i32.const 1484) "\03")
 (data (i32.const 1500) "\1c")
 (data (i32.const 1516) "\05\00\00\00\01\00\00\00\02")
 (data (i32.const 1532) ",")
 (data (i32.const 1548) "\14\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\04\00\00\00\05")
 (data (i32.const 1580) ",")
 (data (i32.const 1596) "\14")
 (data (i32.const 1628) ",")
 (data (i32.const 1644) "\14\00\00\00\01\00\00\00\01")
 (data (i32.const 1676) ",")
 (data (i32.const 1692) "\14\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\02")
 (data (i32.const 1724) ",")
 (data (i32.const 1740) "\14\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\02")
 (data (i32.const 1772) "\1c")
 (data (i32.const 1788) "\0c")
 (data (i32.const 1804) ",")
 (data (i32.const 1820) "\14\00\00\00\01")
 (data (i32.const 1840) "\02")
 (data (i32.const 1852) ",")
 (data (i32.const 1868) "\14\00\00\00\04\00\00\00\05\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 1900) ",")
 (data (i32.const 1916) "\14\00\00\00\01\00\00\00\04\00\00\00\05\00\00\00\04\00\00\00\05")
 (data (i32.const 1948) ",")
 (data (i32.const 1964) "\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\05")
 (data (i32.const 1996) ",")
 (data (i32.const 2012) "\14\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2044) ",")
 (data (i32.const 2060) "\14\00\00\00\04\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2092) ",")
 (data (i32.const 2108) "\14\00\00\00\01\00\00\00\04\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2140) ",")
 (data (i32.const 2156) "\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\04\00\00\00\05")
 (data (i32.const 2188) ",")
 (data (i32.const 2204) "\14\00\00\00\04\00\00\00\05\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2236) ",")
 (data (i32.const 2252) "\14\00\00\00\04\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2284) ",")
 (data (i32.const 2300) "\14\00\00\00\01\00\00\00\03\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2332) ",")
 (data (i32.const 2348) "\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\04\00\00\00\05")
 (data (i32.const 2380) ",")
 (data (i32.const 2396) "\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\05")
 (data (i32.const 2428) "\1c")
 (data (i32.const 2440) "\11\00\00\00\08\00\00\00\02")
 (data (i32.const 2460) "\1c")
 (data (i32.const 2472) "\12\00\00\00\08\00\00\00\03")
 (data (i32.const 2492) "\1c")
 (data (i32.const 2504) "\13\00\00\00\08\00\00\00\04")
 (data (i32.const 2524) "\1c")
 (data (i32.const 2536) "\14\00\00\00\08\00\00\00\05")
 (data (i32.const 2556) "\1c")
 (data (i32.const 2568) "\15\00\00\00\08\00\00\00\06")
 (data (i32.const 2588) "\1c")
 (data (i32.const 2600) "\16\00\00\00\08\00\00\00\07")
 (data (i32.const 2620) "\1c")
 (data (i32.const 2632) "\17\00\00\00\08\00\00\00\08")
 (data (i32.const 2652) "\1c")
 (data (i32.const 2664) "\18\00\00\00\08\00\00\00\t")
 (data (i32.const 2684) "\1c")
 (data (i32.const 2696) "\19\00\00\00\08\00\00\00\n")
 (data (i32.const 2716) "\1c")
 (data (i32.const 2728) "\1a\00\00\00\08\00\00\00\0b")
 (data (i32.const 2748) "\1c")
 (data (i32.const 2760) "\1b\00\00\00\08\00\00\00\0c")
 (data (i32.const 2780) "\1c")
 (data (i32.const 2792) "\11\00\00\00\08\00\00\00\r")
 (data (i32.const 2812) "\1c")
 (data (i32.const 2824) "\12\00\00\00\08\00\00\00\0e")
 (data (i32.const 2844) "\1c")
 (data (i32.const 2856) "\13\00\00\00\08\00\00\00\0f")
 (data (i32.const 2876) "\1c")
 (data (i32.const 2888) "\14\00\00\00\08\00\00\00\10")
 (data (i32.const 2908) "\1c")
 (data (i32.const 2920) "\15\00\00\00\08\00\00\00\11")
 (data (i32.const 2940) "\1c")
 (data (i32.const 2952) "\16\00\00\00\08\00\00\00\12")
 (data (i32.const 2972) "\1c")
 (data (i32.const 2984) "\17\00\00\00\08\00\00\00\13")
 (data (i32.const 3004) "\1c")
 (data (i32.const 3016) "\18\00\00\00\08\00\00\00\14")
 (data (i32.const 3036) "\1c")
 (data (i32.const 3048) "\19\00\00\00\08\00\00\00\15")
 (data (i32.const 3068) "\1c")
 (data (i32.const 3080) "\1a\00\00\00\08\00\00\00\16")
 (data (i32.const 3100) "\1c")
 (data (i32.const 3112) "\1b\00\00\00\08\00\00\00\17")
 (data (i32.const 3132) "\1c")
 (data (i32.const 3144) "\1c\00\00\00\08\00\00\00\18")
 (data (i32.const 3164) "\1c")
 (data (i32.const 3176) "\1d\00\00\00\08\00\00\00\19")
 (data (i32.const 3196) "\1c")
 (data (i32.const 3208) "\1e\00\00\00\08\00\00\00\1a")
 (data (i32.const 3228) "\1c")
 (data (i32.const 3240) "\1f\00\00\00\08\00\00\00\1b")
 (data (i32.const 3260) "\1c")
 (data (i32.const 3272) " \00\00\00\08\00\00\00\1c")
 (data (i32.const 3292) "\1c")
 (data (i32.const 3304) "!\00\00\00\08\00\00\00\1d")
 (data (i32.const 3324) "\1c")
 (data (i32.const 3336) "\"\00\00\00\08\00\00\00\1e")
 (data (i32.const 3356) "\1c")
 (data (i32.const 3368) "#\00\00\00\08\00\00\00\1f")
 (data (i32.const 3388) "\1c")
 (data (i32.const 3400) "$\00\00\00\08\00\00\00 ")
 (data (i32.const 3420) "\1c")
 (data (i32.const 3432) "%\00\00\00\08\00\00\00!")
 (data (i32.const 3452) "\1c")
 (data (i32.const 3464) "&\00\00\00\08\00\00\00\"")
 (data (i32.const 3484) "\1c")
 (data (i32.const 3496) "\'\00\00\00\08\00\00\00#")
 (data (i32.const 3516) "\1c")
 (data (i32.const 3528) "(\00\00\00\08\00\00\00$")
 (data (i32.const 3548) "\1c")
 (data (i32.const 3560) ")\00\00\00\08\00\00\00%")
 (data (i32.const 3580) "\1c")
 (data (i32.const 3592) "*\00\00\00\08\00\00\00&")
 (data (i32.const 3612) "\1c")
 (data (i32.const 3624) "+\00\00\00\08\00\00\00\'")
 (data (i32.const 3644) "\1c")
 (data (i32.const 3656) ",\00\00\00\08\00\00\00(")
 (data (i32.const 3676) "\1c")
 (data (i32.const 3688) "-\00\00\00\08\00\00\00)")
 (data (i32.const 3708) "\1c")
 (data (i32.const 3720) ".\00\00\00\08\00\00\00*")
 (data (i32.const 3740) "\1c")
 (data (i32.const 3752) "/\00\00\00\08\00\00\00+")
 (data (i32.const 3772) "\1c")
 (data (i32.const 3784) "0\00\00\00\08\00\00\00,")
 (data (i32.const 3804) "\1c")
 (data (i32.const 3816) "1\00\00\00\08\00\00\00-")
 (data (i32.const 3836) "\1c")
 (data (i32.const 3848) "\'\00\00\00\08\00\00\00.")
 (data (i32.const 3868) "\1c")
 (data (i32.const 3880) "\'\00\00\00\08\00\00\00/")
 (data (i32.const 3900) "\1c")
 (data (i32.const 3912) "(\00\00\00\08\00\00\000")
 (data (i32.const 3932) "\1c")
 (data (i32.const 3944) "(\00\00\00\08\00\00\001")
 (data (i32.const 3964) "\1c")
 (data (i32.const 3976) ")\00\00\00\08\00\00\002")
 (data (i32.const 3996) "\1c")
 (data (i32.const 4008) ")\00\00\00\08\00\00\003")
 (data (i32.const 4028) "\1c")
 (data (i32.const 4040) "*\00\00\00\08\00\00\004")
 (data (i32.const 4060) "\1c")
 (data (i32.const 4072) "*\00\00\00\08\00\00\005")
 (data (i32.const 4092) "\1c")
 (data (i32.const 4104) "+\00\00\00\08\00\00\006")
 (data (i32.const 4124) "\1c")
 (data (i32.const 4136) "+\00\00\00\08\00\00\007")
 (data (i32.const 4156) "\1c")
 (data (i32.const 4168) ",\00\00\00\08\00\00\008")
 (data (i32.const 4188) "\1c")
 (data (i32.const 4200) ",\00\00\00\08\00\00\009")
 (data (i32.const 4220) "\1c")
 (data (i32.const 4232) "-\00\00\00\08\00\00\00:")
 (data (i32.const 4252) "\1c")
 (data (i32.const 4264) "-\00\00\00\08\00\00\00;")
 (data (i32.const 4284) "\1c")
 (data (i32.const 4296) ".\00\00\00\08\00\00\00<")
 (data (i32.const 4316) "\1c")
 (data (i32.const 4328) ".\00\00\00\08\00\00\00=")
 (data (i32.const 4348) "\1c")
 (data (i32.const 4360) "/\00\00\00\08\00\00\00>")
 (data (i32.const 4380) "\1c")
 (data (i32.const 4392) "/\00\00\00\08\00\00\00?")
 (data (i32.const 4412) "\1c")
 (data (i32.const 4424) "0\00\00\00\08\00\00\00@")
 (data (i32.const 4444) "\1c")
 (data (i32.const 4456) "0\00\00\00\08\00\00\00A")
 (data (i32.const 4476) "\1c")
 (data (i32.const 4488) "1\00\00\00\08\00\00\00B")
 (data (i32.const 4508) "\1c")
 (data (i32.const 4520) "1\00\00\00\08\00\00\00C")
 (data (i32.const 4540) "\1c")
 (data (i32.const 4552) "\'\00\00\00\08\00\00\00D")
 (data (i32.const 4572) "\1c")
 (data (i32.const 4584) "\'\00\00\00\08\00\00\00E")
 (data (i32.const 4604) "\1c")
 (data (i32.const 4616) "(\00\00\00\08\00\00\00F")
 (data (i32.const 4636) "\1c")
 (data (i32.const 4648) "(\00\00\00\08\00\00\00G")
 (data (i32.const 4668) "\1c")
 (data (i32.const 4680) ")\00\00\00\08\00\00\00H")
 (data (i32.const 4700) "\1c")
 (data (i32.const 4712) ")\00\00\00\08\00\00\00I")
 (data (i32.const 4732) "\1c")
 (data (i32.const 4744) "*\00\00\00\08\00\00\00J")
 (data (i32.const 4764) "\1c")
 (data (i32.const 4776) "*\00\00\00\08\00\00\00K")
 (data (i32.const 4796) "\1c")
 (data (i32.const 4808) "+\00\00\00\08\00\00\00L")
 (data (i32.const 4828) "\1c")
 (data (i32.const 4840) "+\00\00\00\08\00\00\00M")
 (data (i32.const 4860) "\1c")
 (data (i32.const 4872) ",\00\00\00\08\00\00\00N")
 (data (i32.const 4892) "\1c")
 (data (i32.const 4904) ",\00\00\00\08\00\00\00O")
 (data (i32.const 4924) "\1c")
 (data (i32.const 4936) "-\00\00\00\08\00\00\00P")
 (data (i32.const 4956) "\1c")
 (data (i32.const 4968) "-\00\00\00\08\00\00\00Q")
 (data (i32.const 4988) "\1c")
 (data (i32.const 5000) ".\00\00\00\08\00\00\00R")
 (data (i32.const 5020) "\1c")
 (data (i32.const 5032) ".\00\00\00\08\00\00\00S")
 (data (i32.const 5052) "\1c")
 (data (i32.const 5064) "/\00\00\00\08\00\00\00T")
 (data (i32.const 5084) "\1c")
 (data (i32.const 5096) "/\00\00\00\08\00\00\00U")
 (data (i32.const 5116) "\1c")
 (data (i32.const 5128) "0\00\00\00\08\00\00\00V")
 (data (i32.const 5148) "\1c")
 (data (i32.const 5160) "0\00\00\00\08\00\00\00W")
 (data (i32.const 5180) "\1c")
 (data (i32.const 5192) "1\00\00\00\08\00\00\00X")
 (data (i32.const 5212) "\1c")
 (data (i32.const 5224) "1\00\00\00\08\00\00\00Y")
 (data (i32.const 5244) "\1c")
 (data (i32.const 5256) "\'\00\00\00\08\00\00\00Z")
 (data (i32.const 5276) "\1c")
 (data (i32.const 5288) "\'\00\00\00\08\00\00\00[")
 (data (i32.const 5308) "\1c")
 (data (i32.const 5320) "(\00\00\00\08\00\00\00\\")
 (data (i32.const 5340) "\1c")
 (data (i32.const 5352) "(\00\00\00\08\00\00\00]")
 (data (i32.const 5372) "\1c")
 (data (i32.const 5384) ")\00\00\00\08\00\00\00^")
 (data (i32.const 5404) "\1c")
 (data (i32.const 5416) ")\00\00\00\08\00\00\00_")
 (data (i32.const 5436) "\1c")
 (data (i32.const 5448) "*\00\00\00\08\00\00\00`")
 (data (i32.const 5468) "\1c")
 (data (i32.const 5480) "*\00\00\00\08\00\00\00a")
 (data (i32.const 5500) "\1c")
 (data (i32.const 5512) "+\00\00\00\08\00\00\00b")
 (data (i32.const 5532) "\1c")
 (data (i32.const 5544) "+\00\00\00\08\00\00\00c")
 (data (i32.const 5564) "\1c")
 (data (i32.const 5576) ",\00\00\00\08\00\00\00d")
 (data (i32.const 5596) "\1c")
 (data (i32.const 5608) ",\00\00\00\08\00\00\00e")
 (data (i32.const 5628) "\1c")
 (data (i32.const 5640) "-\00\00\00\08\00\00\00f")
 (data (i32.const 5660) "\1c")
 (data (i32.const 5672) "-\00\00\00\08\00\00\00g")
 (data (i32.const 5692) "\1c")
 (data (i32.const 5704) ".\00\00\00\08\00\00\00h")
 (data (i32.const 5724) "\1c")
 (data (i32.const 5736) ".\00\00\00\08\00\00\00i")
 (data (i32.const 5756) "\1c")
 (data (i32.const 5768) "/\00\00\00\08\00\00\00j")
 (data (i32.const 5788) "\1c")
 (data (i32.const 5800) "/\00\00\00\08\00\00\00k")
 (data (i32.const 5820) "\1c")
 (data (i32.const 5832) "0\00\00\00\08\00\00\00l")
 (data (i32.const 5852) "\1c")
 (data (i32.const 5864) "0\00\00\00\08\00\00\00m")
 (data (i32.const 5884) "\1c")
 (data (i32.const 5896) "1\00\00\00\08\00\00\00n")
 (data (i32.const 5916) "\1c")
 (data (i32.const 5928) "1\00\00\00\08\00\00\00o")
 (data (i32.const 5948) "\1c")
 (data (i32.const 5960) "\'\00\00\00\08\00\00\00p")
 (data (i32.const 5980) "\1c")
 (data (i32.const 5992) "\'\00\00\00\08\00\00\00q")
 (data (i32.const 6012) "\1c")
 (data (i32.const 6024) "(\00\00\00\08\00\00\00r")
 (data (i32.const 6044) "\1c")
 (data (i32.const 6056) "(\00\00\00\08\00\00\00s")
 (data (i32.const 6076) "\1c")
 (data (i32.const 6088) ")\00\00\00\08\00\00\00t")
 (data (i32.const 6108) "\1c")
 (data (i32.const 6120) ")\00\00\00\08\00\00\00u")
 (data (i32.const 6140) "\1c")
 (data (i32.const 6152) "*\00\00\00\08\00\00\00v")
 (data (i32.const 6172) "\1c")
 (data (i32.const 6184) "*\00\00\00\08\00\00\00w")
 (data (i32.const 6204) "\1c")
 (data (i32.const 6216) "+\00\00\00\08\00\00\00x")
 (data (i32.const 6236) "\1c")
 (data (i32.const 6248) "+\00\00\00\08\00\00\00y")
 (data (i32.const 6268) "\1c")
 (data (i32.const 6280) ",\00\00\00\08\00\00\00z")
 (data (i32.const 6300) "\1c")
 (data (i32.const 6312) ",\00\00\00\08\00\00\00{")
 (data (i32.const 6332) "\1c")
 (data (i32.const 6344) "-\00\00\00\08\00\00\00|")
 (data (i32.const 6364) "\1c")
 (data (i32.const 6376) "-\00\00\00\08\00\00\00}")
 (data (i32.const 6396) "\1c")
 (data (i32.const 6408) ".\00\00\00\08\00\00\00~")
 (data (i32.const 6428) "\1c")
 (data (i32.const 6440) ".\00\00\00\08\00\00\00\7f")
 (data (i32.const 6460) "\1c")
 (data (i32.const 6472) "/\00\00\00\08\00\00\00\80")
 (data (i32.const 6492) "\1c")
 (data (i32.const 6504) "/\00\00\00\08\00\00\00\81")
 (data (i32.const 6524) "\1c")
 (data (i32.const 6536) "0\00\00\00\08\00\00\00\82")
 (data (i32.const 6556) "\1c")
 (data (i32.const 6568) "0\00\00\00\08\00\00\00\83")
 (data (i32.const 6588) "\1c")
 (data (i32.const 6600) "1\00\00\00\08\00\00\00\84")
 (data (i32.const 6620) "\1c")
 (data (i32.const 6632) "1\00\00\00\08\00\00\00\85")
 (data (i32.const 6652) "\1c")
 (data (i32.const 6668) "\0c\00\00\00\n\00\00\00\0c\00\00\00\0e")
 (data (i32.const 6684) ",")
 (data (i32.const 6696) "\10\00\00\00\10\00\00\00\10\1a\00\00\10\1a\00\00\0c\00\00\00\03")
 (data (i32.const 6732) "\1c")
 (data (i32.const 6744) "2\00\00\00\08\00\00\00\86")
 (data (i32.const 6764) "\1c")
 (data (i32.const 6776) "3\00\00\00\08\00\00\00\87")
 (data (i32.const 6796) "\1c")
 (data (i32.const 6808) "4\00\00\00\08\00\00\00\88")
 (data (i32.const 6828) "\1c")
 (data (i32.const 6840) "5\00\00\00\08\00\00\00\89")
 (data (i32.const 6860) "\1c")
 (data (i32.const 6872) "6\00\00\00\08\00\00\00\8a")
 (data (i32.const 6892) "\1c")
 (data (i32.const 6904) "7\00\00\00\08\00\00\00\8b")
 (data (i32.const 6924) "\1c")
 (data (i32.const 6936) "8\00\00\00\08\00\00\00\8c")
 (data (i32.const 6956) "\1c")
 (data (i32.const 6968) "9\00\00\00\08\00\00\00\8d")
 (data (i32.const 6988) "\1c")
 (data (i32.const 7000) ":\00\00\00\08\00\00\00\8e")
 (data (i32.const 7020) "\1c")
 (data (i32.const 7032) ";\00\00\00\08\00\00\00\8f")
 (data (i32.const 7052) "\1c")
 (data (i32.const 7064) "<\00\00\00\08\00\00\00\90")
 (data (i32.const 7084) "<")
 (data (i32.const 7100) "$\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 7148) ",")
 (data (i32.const 7160) "\10\00\00\00\10\00\00\00\c0\1b\00\00\c0\1b\00\00$\00\00\00\t")
 (data (i32.const 7196) "<")
 (data (i32.const 7212) ",\00\00\00\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\n")
 (data (i32.const 7260) ",")
 (data (i32.const 7272) "\10\00\00\00\10\00\00\000\1c\00\000\1c\00\00,\00\00\00\0b")
 (data (i32.const 7308) "<")
 (data (i32.const 7324) ",\00\00\00\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\n")
 (data (i32.const 7372) ",")
 (data (i32.const 7384) "\10\00\00\00\10\00\00\00\a0\1c\00\00\a0\1c\00\00,\00\00\00\0b")
 (data (i32.const 7420) "\1c")
 (data (i32.const 7436) "\0c\00\00\00\01\00\00\00\02\00\00\00\03")
 (data (i32.const 7452) ",")
 (data (i32.const 7464) "\10\00\00\00\10\00\00\00\10\1d\00\00\10\1d\00\00\0c\00\00\00\03")
 (data (i32.const 7500) "\1c")
 (data (i32.const 7516) "\0c\00\00\00\00\00\80@\00\00\a0@\00\00\c0@")
 (data (i32.const 7532) ",")
 (data (i32.const 7544) "=\00\00\00\10\00\00\00`\1d\00\00`\1d\00\00\0c\00\00\00\03")
 (data (i32.const 7580) ",")
 (data (i32.const 7596) "\18")
 (data (i32.const 7606) "\f0\7f\00\00\00\00\00\00\f8\7f\00\00\00\00\00\00\f0\ff")
 (data (i32.const 7628) ",")
 (data (i32.const 7640) ">\00\00\00\10\00\00\00\b0\1d\00\00\b0\1d\00\00\18\00\00\00\03")
 (data (i32.const 7676) "\1c")
 (data (i32.const 7692) "\03\00\00\00\92\91\90")
 (data (i32.const 7708) ",")
 (data (i32.const 7720) "\0f\00\00\00\10\00\00\00\10\1e\00\00\10\1e\00\00\03\00\00\00\03")
 (data (i32.const 7756) "\1c")
 (data (i32.const 7772) "\n\00\00\00\01\02\03")
 (data (i32.const 7788) "\1c")
 (data (i32.const 7804) "\n\00\00\00\01\02\03\04\05\06")
 (data (i32.const 7820) "\1c")
 (data (i32.const 7836) "\n\00\00\00\01\02\03\04\05\06\07\08\t")
 (data (i32.const 7852) "\1c")
 (data (i32.const 7868) "\n\00\00\00\01\02\00\00\00\06\07\08\t")
 (data (i32.const 7884) "\1c")
 (data (i32.const 7900) "\n\00\00\00defg\e8\e9\ea\92\91\90")
 (data (i32.const 7916) "\1c")
 (data (i32.const 7932) "\n\00\00\00\01\02\03")
 (data (i32.const 7948) "\1c")
 (data (i32.const 7964) "\n\00\00\00\01\02\03\04\05\06")
 (data (i32.const 7980) "\1c")
 (data (i32.const 7996) "\n\00\00\00\01\02\03\04\05\06\07\08\t")
 (data (i32.const 8012) "\1c")
 (data (i32.const 8028) "\n\00\00\00\01\02\00\00\00\06\07\08\t")
 (data (i32.const 8044) "\1c")
 (data (i32.const 8060) "\n\00\00\00defg\e8\e9\ea\92\91\90")
 (data (i32.const 8076) "\1c")
 (data (i32.const 8092) "\n\00\00\00\01\02\03")
 (data (i32.const 8108) "\1c")
 (data (i32.const 8124) "\n\00\00\00\01\02\03\04\05\06")
 (data (i32.const 8140) "\1c")
 (data (i32.const 8156) "\n\00\00\00\01\02\03\04\05\06\07\08\t")
 (data (i32.const 8172) "\1c")
 (data (i32.const 8188) "\n\00\00\00\01\02\00\00\00\06\07\08\t")
 (data (i32.const 8204) "\1c")
 (data (i32.const 8220) "\n\00\00\00defg\ff\ff\ff")
 (data (i32.const 8236) ",")
 (data (i32.const 8252) "\14\00\00\00\01\00\02\00\03")
 (data (i32.const 8284) ",")
 (data (i32.const 8300) "\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06")
 (data (i32.const 8332) ",")
 (data (i32.const 8348) "\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06\00\07\00\08\00\t")
 (data (i32.const 8380) ",")
 (data (i32.const 8396) "\14\00\00\00\01\00\02\00\00\00\00\00\00\00\06\00\07\00\08\00\t")
 (data (i32.const 8428) ",")
 (data (i32.const 8444) "\14\00\00\00d\00e\00f\00g\00\e8\03\e9\03\ea\03\92\ff\91\ff\90\ff")
 (data (i32.const 8476) ",")
 (data (i32.const 8492) "\14\00\00\00\01\00\02\00\03")
 (data (i32.const 8524) ",")
 (data (i32.const 8540) "\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06")
 (data (i32.const 8572) ",")
 (data (i32.const 8588) "\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06\00\07\00\08\00\t")
 (data (i32.const 8620) ",")
 (data (i32.const 8636) "\14\00\00\00\01\00\02\00\00\00\00\00\00\00\06\00\07\00\08\00\t")
 (data (i32.const 8668) ",")
 (data (i32.const 8684) "\14\00\00\00d\00e\00f\00g\00\e8\03\e9\03\ea\03\92\ff\91\ff\90\ff")
 (data (i32.const 8716) "<")
 (data (i32.const 8732) "(\00\00\00\01\00\00\00\02\00\00\00\03")
 (data (i32.const 8780) "<")
 (data (i32.const 8796) "(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06")
 (data (i32.const 8844) "<")
 (data (i32.const 8860) "(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 8908) "<")
 (data (i32.const 8924) "(\00\00\00\01\00\00\00\02")
 (data (i32.const 8948) "\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 8972) "<")
 (data (i32.const 8988) "(\00\00\00d\00\00\00e\00\00\00f\00\00\00g\00\00\00\e8\03\00\00\e9\03\00\00\ea\03\00\00\92\ff\ff\ff\91\ff\ff\ff\90\ff\ff\ff")
 (data (i32.const 9036) "<")
 (data (i32.const 9052) "(\00\00\00\01\00\00\00\02\00\00\00\03")
 (data (i32.const 9100) "<")
 (data (i32.const 9116) "(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06")
 (data (i32.const 9164) "<")
 (data (i32.const 9180) "(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 9228) "<")
 (data (i32.const 9244) "(\00\00\00\01\00\00\00\02")
 (data (i32.const 9268) "\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 9292) "<")
 (data (i32.const 9308) "(\00\00\00d\00\00\00e\00\00\00f\00\00\00g\00\00\00\e8\03\00\00\e9\03\00\00\ea\03\00\00\92\ff\ff\ff\91\ff\ff\ff\90\ff\ff\ff")
 (data (i32.const 9356) "l")
 (data (i32.const 9372) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03")
 (data (i32.const 9468) "l")
 (data (i32.const 9484) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06")
 (data (i32.const 9580) "l")
 (data (i32.const 9596) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t")
 (data (i32.const 9692) "l")
 (data (i32.const 9708) "P\00\00\00\01\00\00\00\00\00\00\00\02")
 (data (i32.const 9752) "\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t")
 (data (i32.const 9804) "l")
 (data (i32.const 9820) "P\00\00\00d\00\00\00\00\00\00\00e\00\00\00\00\00\00\00f\00\00\00\00\00\00\00g\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\e9\03\00\00\00\00\00\00\ea\03\00\00\00\00\00\00\92\ff\ff\ff\ff\ff\ff\ff\91\ff\ff\ff\ff\ff\ff\ff\90\ff\ff\ff\ff\ff\ff\ff")
 (data (i32.const 9916) "l")
 (data (i32.const 9932) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03")
 (data (i32.const 10028) "l")
 (data (i32.const 10044) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06")
 (data (i32.const 10140) "l")
 (data (i32.const 10156) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t")
 (data (i32.const 10252) "l")
 (data (i32.const 10268) "P\00\00\00\01\00\00\00\00\00\00\00\02")
 (data (i32.const 10312) "\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t")
 (data (i32.const 10364) "l")
 (data (i32.const 10380) "P\00\00\00d\00\00\00\00\00\00\00e\00\00\00\00\00\00\00f\00\00\00\00\00\00\00g\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\e9\03\00\00\00\00\00\00\ea\03\00\00\00\00\00\00\92\ff\ff\ff\ff\ff\ff\ff\91\ff\ff\ff\ff\ff\ff\ff\90\ff\ff\ff\ff\ff\ff\ff")
 (data (i32.const 10476) "<")
 (data (i32.const 10492) "(\00\00\00\00\00\80?\00\00\00@\00\00@@")
 (data (i32.const 10540) "<")
 (data (i32.const 10556) "(\00\00\00\00\00\80?\00\00\00@\00\00@@\00\00\80@\00\00\a0@\00\00\c0@")
 (data (i32.const 10604) "<")
 (data (i32.const 10620) "(\00\00\00\00\00\80?\00\00\00@\00\00@@\00\00\80@\00\00\a0@\00\00\c0@\00\00\e0@\00\00\00A\00\00\10A")
 (data (i32.const 10668) "<")
 (data (i32.const 10684) "(\00\00\00\00\00\c8B\00\00\caB\00\00\ccB\00\00\ceB\00\00zD\00@zD\00\80zD\00\00\dc\c2\00\00\de\c2\00\00\e0\c2")
 (data (i32.const 10732) "l")
 (data (i32.const 10748) "P")
 (data (i32.const 10758) "\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@")
 (data (i32.const 10844) "l")
 (data (i32.const 10860) "P")
 (data (i32.const 10870) "\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\00\00\10@\00\00\00\00\00\00\14@\00\00\00\00\00\00\18@")
 (data (i32.const 10956) "l")
 (data (i32.const 10972) "P")
 (data (i32.const 10982) "\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\00\00\10@\00\00\00\00\00\00\14@\00\00\00\00\00\00\18@\00\00\00\00\00\00\1c@\00\00\00\00\00\00 @\00\00\00\00\00\00\"@")
 (data (i32.const 11068) "l")
 (data (i32.const 11084) "P")
 (data (i32.const 11094) "Y@\00\00\00\00\00@Y@\00\00\00\00\00\80Y@\00\00\00\00\00\c0Y@\00\00\00\00\00@\8f@\00\00\00\00\00H\8f@\00\00\00\00\00P\8f@\00\00\00\00\00\80[\c0\00\00\00\00\00\c0[\c0\00\00\00\00\00\00\\\c0")
 (data (i32.const 11180) "\1c")
 (data (i32.const 11196) "\n\00\00\00\00\ff\00\00\00d\n\ff\ff")
 (data (i32.const 11212) "\1c")
 (data (i32.const 11228) "\n\00\00\00\01\ffd\ff\00\00d\n\ff")
 (data (i32.const 11244) "\1c")
 (data (i32.const 11256) "E\00\00\00\08\00\00\00\91")
 (data (i32.const 11276) "\1c")
 (data (i32.const 11288) "E\00\00\00\08\00\00\00\92")
 (data (i32.const 11308) "\1c")
 (data (i32.const 11320) "F\00\00\00\08\00\00\00\93")
 (data (i32.const 11340) "\1c")
 (data (i32.const 11352) "F\00\00\00\08\00\00\00\94")
 (data (i32.const 11372) "\1c")
 (data (i32.const 11384) "F\00\00\00\08\00\00\00\95")
 (data (i32.const 11404) "\1c")
 (data (i32.const 11416) "F\00\00\00\08\00\00\00\96")
 (data (i32.const 11436) "\1c")
 (data (i32.const 11448) "G\00\00\00\08\00\00\00\97")
 (data (i32.const 11468) "\1c")
 (data (i32.const 11480) "G\00\00\00\08\00\00\00\98")
 (data (i32.const 11500) "\1c")
 (data (i32.const 11512) "H\00\00\00\08\00\00\00\99")
 (data (i32.const 11532) "\1c")
 (data (i32.const 11544) "H\00\00\00\08\00\00\00\9a")
 (data (i32.const 11564) "\1c")
 (data (i32.const 11576) "I\00\00\00\08\00\00\00\9b")
 (data (i32.const 11596) "\1c")
 (data (i32.const 11608) "I\00\00\00\08\00\00\00\9c")
 (data (i32.const 11628) "\1c")
 (data (i32.const 11640) "J\00\00\00\08\00\00\00\9d")
 (data (i32.const 11660) "\1c")
 (data (i32.const 11672) "J\00\00\00\08\00\00\00\9e")
 (data (i32.const 11692) "\1c")
 (data (i32.const 11704) "K\00\00\00\08\00\00\00\9f")
 (data (i32.const 11724) "\1c")
 (data (i32.const 11736) "K\00\00\00\08\00\00\00\a0")
 (data (i32.const 11756) "\1c")
 (data (i32.const 11768) "L\00\00\00\08\00\00\00\a1")
 (data (i32.const 11788) "\1c")
 (data (i32.const 11800) "L\00\00\00\08\00\00\00\a2")
 (data (i32.const 11820) "\1c")
 (data (i32.const 11832) "M\00\00\00\08\00\00\00\a3")
 (data (i32.const 11852) "\1c")
 (data (i32.const 11864) "M\00\00\00\08\00\00\00\a4")
 (data (i32.const 11884) "\1c")
 (data (i32.const 11896) "\0e\00\00\00\08\00\00\00\a5")
 (data (i32.const 11920) "N\00\00\00 \00\00\00\00\00\00\00 ")
 (data (i32.const 11948) "A\08\00\00\02\00\00\00A\00\00\00\02\00\00\00A\00\00\00\02\00\00\00\81\08\00\00\02\00\00\00\81\00\00\00\02\00\00\00\01\t\00\00\02\00\00\00\01\01\00\00\02\00\00\00\01\n\00\00\02\00\00\00\01\02\00\00\02\00\00\00\01\19\00\00\02\00\00\00\01\1a\00\00\02")
 (data (i32.const 12044) "B\08\00\00\00\00\00\00\02\t")
 (data (i32.const 12412) "\02\19\00\00\00\00\00\00\02\1a\00\00\00\00\00\00B\00\00\00\00\00\00\00\82\08\00\00\00\00\00\00\82\00\00\00\00\00\00\00\02\01\00\00\00\00\00\00\02\n\00\00\00\00\00\00\02\02")
 (table $0 166 166 funcref)
 (elem $0 (i32.const 1) $~lib/util/sort/COMPARATOR<f64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Float64Array,f64>~anonymous|0 $~lib/util/sort/COMPARATOR<i8>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int8Array,i8>~anonymous|0 $~lib/util/sort/COMPARATOR<u8>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>~anonymous|0 $~lib/util/sort/COMPARATOR<u8>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>~anonymous|0 $~lib/util/sort/COMPARATOR<i16>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16>~anonymous|0 $~lib/util/sort/COMPARATOR<u16>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16>~anonymous|0 $~lib/util/sort/COMPARATOR<i32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32>~anonymous|0 $~lib/util/sort/COMPARATOR<u32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32>~anonymous|0 $~lib/util/sort/COMPARATOR<i64>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64>~anonymous|0 $~lib/util/sort/COMPARATOR<u64>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64>~anonymous|0 $~lib/util/sort/COMPARATOR<f32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Float64Array,f64>~anonymous|0)
 (export "memory" (memory $0))
 (start $~start)
 (func $~lib/rt/itcms/visitRoots (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  i32.const 6704
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7168
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7280
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7392
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7472
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7552
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7648
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7728
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 1216
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 1056
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 1104
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  global.get $~lib/rt/itcms/pinSpace
  local.tee $1
  i32.load $0 offset=4
  i32.const -4
  i32.and
  local.set $0
  loop $while-continue|0
   local.get $0
   local.get $1
   i32.ne
   if
    local.get $0
    i32.load $0 offset=4
    i32.const 3
    i32.and
    i32.const 3
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 20
    i32.add
    call $~lib/rt/__visit_members
    local.get $0
    i32.load $0 offset=4
    i32.const -4
    i32.and
    local.set $0
    br $while-continue|0
   end
  end
 )
 (func $~lib/rt/itcms/Object#makeGray (type $i32_=>_none) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  global.get $~lib/rt/itcms/iter
  i32.eq
  if
   local.get $0
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   if
    unreachable
   end
   local.get $1
   global.set $~lib/rt/itcms/iter
  end
  block $__inlined_func$~lib/rt/itcms/Object#unlink
   local.get $0
   i32.load $0 offset=4
   i32.const -4
   i32.and
   local.tee $1
   i32.eqz
   if
    local.get $0
    i32.load $0 offset=8
    i32.eqz
    local.get $0
    i32.const 45316
    i32.lt_u
    i32.and
    i32.eqz
    if
     unreachable
    end
    br $__inlined_func$~lib/rt/itcms/Object#unlink
   end
   local.get $0
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   if
    unreachable
   end
   local.get $1
   local.get $2
   i32.store $0 offset=8
   local.get $2
   local.get $1
   local.get $2
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.or
   i32.store $0 offset=4
  end
  global.get $~lib/rt/itcms/toSpace
  local.tee $2
  i32.load $0 offset=8
  local.set $1
  local.get $0
  global.get $~lib/rt/itcms/white
  i32.eqz
  i32.const 2
  local.get $0
  i32.load $0 offset=12
  local.tee $3
  i32.const 1
  i32.le_u
  if (result i32)
   i32.const 1
  else
   local.get $3
   i32.const 11920
   i32.load $0
   i32.gt_u
   if
    unreachable
   end
   local.get $3
   i32.const 3
   i32.shl
   i32.const 11924
   i32.add
   i32.load $0
   i32.const 32
   i32.and
  end
  select
  local.get $2
  i32.or
  i32.store $0 offset=4
  local.get $0
  local.get $1
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $1
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.or
  i32.store $0 offset=4
  local.get $2
  local.get $0
  i32.store $0 offset=8
 )
 (func $~lib/rt/tlsf/removeBlock (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.load $0
  local.tee $2
  i32.const 1
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.const -4
  i32.and
  local.tee $2
  i32.const 12
  i32.lt_u
  if
   unreachable
  end
  local.get $2
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $2
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   i32.const 1073741820
   local.get $2
   local.get $2
   i32.const 1073741820
   i32.ge_u
   select
   local.tee $2
   i32.clz
   i32.sub
   local.tee $4
   i32.const 7
   i32.sub
   local.set $3
   local.get $2
   local.get $4
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.tee $2
  i32.const 16
  i32.lt_u
  local.get $3
  i32.const 23
  i32.lt_u
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.set $5
  local.get $1
  i32.load $0 offset=4
  local.tee $4
  if
   local.get $4
   local.get $5
   i32.store $0 offset=8
  end
  local.get $5
  if
   local.get $5
   local.get $4
   i32.store $0 offset=4
  end
  local.get $1
  local.get $0
  local.get $3
  i32.const 4
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=96
  i32.eq
  if
   local.get $0
   local.get $3
   i32.const 4
   i32.shl
   local.get $2
   i32.add
   i32.const 2
   i32.shl
   i32.add
   local.get $5
   i32.store $0 offset=96
   local.get $5
   i32.eqz
   if
    local.get $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.tee $1
    i32.load $0 offset=4
    i32.const -2
    local.get $2
    i32.rotl
    i32.and
    local.set $2
    local.get $1
    local.get $2
    i32.store $0 offset=4
    local.get $2
    i32.eqz
    if
     local.get $0
     local.get $0
     i32.load $0
     i32.const -2
     local.get $3
     i32.rotl
     i32.and
     i32.store $0
    end
   end
  end
 )
 (func $~lib/rt/tlsf/insertBlock (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0
  local.tee $3
  i32.const 1
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.const 4
  i32.add
  local.get $1
  i32.load $0
  i32.const -4
  i32.and
  i32.add
  local.tee $4
  i32.load $0
  local.tee $2
  i32.const 1
  i32.and
  if
   local.get $0
   local.get $4
   call $~lib/rt/tlsf/removeBlock
   local.get $1
   local.get $3
   i32.const 4
   i32.add
   local.get $2
   i32.const -4
   i32.and
   i32.add
   local.tee $3
   i32.store $0
   local.get $1
   i32.const 4
   i32.add
   local.get $1
   i32.load $0
   i32.const -4
   i32.and
   i32.add
   local.tee $4
   i32.load $0
   local.set $2
  end
  local.get $3
  i32.const 2
  i32.and
  if
   local.get $1
   i32.const 4
   i32.sub
   i32.load $0
   local.tee $1
   i32.load $0
   local.tee $6
   i32.const 1
   i32.and
   i32.eqz
   if
    unreachable
   end
   local.get $0
   local.get $1
   call $~lib/rt/tlsf/removeBlock
   local.get $1
   local.get $6
   i32.const 4
   i32.add
   local.get $3
   i32.const -4
   i32.and
   i32.add
   local.tee $3
   i32.store $0
  end
  local.get $4
  local.get $2
  i32.const 2
  i32.or
  i32.store $0
  local.get $3
  i32.const -4
  i32.and
  local.tee $2
  i32.const 12
  i32.lt_u
  if
   unreachable
  end
  local.get $4
  local.get $1
  i32.const 4
  i32.add
  local.get $2
  i32.add
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.const 4
  i32.sub
  local.get $1
  i32.store $0
  local.get $2
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $2
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   i32.const 1073741820
   local.get $2
   local.get $2
   i32.const 1073741820
   i32.ge_u
   select
   local.tee $2
   i32.clz
   i32.sub
   local.tee $3
   i32.const 7
   i32.sub
   local.set $5
   local.get $2
   local.get $3
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.tee $2
  i32.const 16
  i32.lt_u
  local.get $5
  i32.const 23
  i32.lt_u
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $0
  local.get $5
  i32.const 4
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=96
  local.set $3
  local.get $1
  i32.const 0
  i32.store $0 offset=4
  local.get $1
  local.get $3
  i32.store $0 offset=8
  local.get $3
  if
   local.get $3
   local.get $1
   i32.store $0 offset=4
  end
  local.get $0
  local.get $5
  i32.const 4
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  i32.add
  local.get $1
  i32.store $0 offset=96
  local.get $0
  local.get $0
  i32.load $0
  i32.const 1
  local.get $5
  i32.shl
  i32.or
  i32.store $0
  local.get $0
  local.get $5
  i32.const 2
  i32.shl
  i32.add
  local.tee $0
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  local.get $2
  i32.shl
  i32.or
  i32.store $0 offset=4
 )
 (func $~lib/rt/tlsf/addMemory (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  local.get $2
  i32.gt_u
  if
   unreachable
  end
  local.get $1
  i32.const 19
  i32.add
  i32.const -16
  i32.and
  i32.const 4
  i32.sub
  local.set $1
  local.get $0
  i32.load $0 offset=1568
  local.tee $4
  if
   local.get $4
   i32.const 4
   i32.add
   local.get $1
   i32.gt_u
   if
    unreachable
   end
   local.get $1
   i32.const 16
   i32.sub
   local.get $4
   i32.eq
   if
    local.get $4
    i32.load $0
    local.set $3
    local.get $1
    i32.const 16
    i32.sub
    local.set $1
   end
  else
   local.get $0
   i32.const 1572
   i32.add
   local.get $1
   i32.gt_u
   if
    unreachable
   end
  end
  local.get $2
  i32.const -16
  i32.and
  local.get $1
  i32.sub
  local.tee $2
  i32.const 20
  i32.lt_u
  if
   return
  end
  local.get $1
  local.get $3
  i32.const 2
  i32.and
  local.get $2
  i32.const 8
  i32.sub
  local.tee $2
  i32.const 1
  i32.or
  i32.or
  i32.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 4
  i32.add
  local.get $2
  i32.add
  local.tee $2
  i32.const 2
  i32.store $0
  local.get $0
  local.get $2
  i32.store $0 offset=1568
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/tlsf/initialize (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  memory.size $0
  local.tee $1
  i32.const 0
  i32.le_s
  if (result i32)
   i32.const 1
   local.get $1
   i32.sub
   memory.grow $0
   i32.const 0
   i32.lt_s
  else
   i32.const 0
  end
  if
   unreachable
  end
  i32.const 45328
  i32.const 0
  i32.store $0
  i32.const 46896
  i32.const 0
  i32.store $0
  loop $for-loop|0
   local.get $0
   i32.const 23
   i32.lt_u
   if
    local.get $0
    i32.const 2
    i32.shl
    i32.const 45328
    i32.add
    i32.const 0
    i32.store $0 offset=4
    i32.const 0
    local.set $1
    loop $for-loop|1
     local.get $1
     i32.const 16
     i32.lt_u
     if
      local.get $0
      i32.const 4
      i32.shl
      local.get $1
      i32.add
      i32.const 2
      i32.shl
      i32.const 45328
      i32.add
      i32.const 0
      i32.store $0 offset=96
      local.get $1
      i32.const 1
      i32.add
      local.set $1
      br $for-loop|1
     end
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 45328
  i32.const 46900
  memory.size $0
  i32.const 16
  i32.shl
  call $~lib/rt/tlsf/addMemory
  i32.const 45328
  global.set $~lib/rt/tlsf/ROOT
 )
 (func $~lib/rt/tlsf/__free (type $i32_=>_none) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.const 45316
  i32.lt_u
  if
   return
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $0
  i32.const 4
  i32.sub
  local.set $1
  local.get $0
  i32.const 15
  i32.and
  i32.const 1
  local.get $0
  select
  if (result i32)
   i32.const 1
  else
   local.get $1
   i32.load $0
   i32.const 1
   i32.and
  end
  if
   unreachable
  end
  local.get $1
  local.get $1
  i32.load $0
  i32.const 1
  i32.or
  i32.store $0
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/itcms/step (type $none_=>_i32) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  block $break|0
   block $case2|0
    block $case1|0
     block $case0|0
      global.get $~lib/rt/itcms/state
      br_table $case0|0 $case1|0 $case2|0 $break|0
     end
     i32.const 1
     global.set $~lib/rt/itcms/state
     i32.const 0
     global.set $~lib/rt/itcms/visitCount
     call $~lib/rt/itcms/visitRoots
     global.get $~lib/rt/itcms/toSpace
     global.set $~lib/rt/itcms/iter
     global.get $~lib/rt/itcms/visitCount
     return
    end
    global.get $~lib/rt/itcms/white
    i32.eqz
    local.set $1
    global.get $~lib/rt/itcms/iter
    i32.load $0 offset=4
    i32.const -4
    i32.and
    local.set $0
    loop $while-continue|1
     local.get $0
     global.get $~lib/rt/itcms/toSpace
     i32.ne
     if
      local.get $0
      global.set $~lib/rt/itcms/iter
      local.get $1
      local.get $0
      i32.load $0 offset=4
      i32.const 3
      i32.and
      i32.ne
      if
       local.get $0
       local.get $0
       i32.load $0 offset=4
       i32.const -4
       i32.and
       local.get $1
       i32.or
       i32.store $0 offset=4
       i32.const 0
       global.set $~lib/rt/itcms/visitCount
       local.get $0
       i32.const 20
       i32.add
       call $~lib/rt/__visit_members
       global.get $~lib/rt/itcms/visitCount
       return
      end
      local.get $0
      i32.load $0 offset=4
      i32.const -4
      i32.and
      local.set $0
      br $while-continue|1
     end
    end
    i32.const 0
    global.set $~lib/rt/itcms/visitCount
    call $~lib/rt/itcms/visitRoots
    global.get $~lib/rt/itcms/toSpace
    global.get $~lib/rt/itcms/iter
    i32.load $0 offset=4
    i32.const -4
    i32.and
    i32.eq
    if
     global.get $~lib/memory/__stack_pointer
     local.set $0
     loop $while-continue|0
      local.get $0
      i32.const 45316
      i32.lt_u
      if
       local.get $0
       i32.load $0
       local.tee $2
       if
        local.get $2
        call $byn-split-outlined-A$~lib/rt/itcms/__visit
       end
       local.get $0
       i32.const 4
       i32.add
       local.set $0
       br $while-continue|0
      end
     end
     global.get $~lib/rt/itcms/iter
     i32.load $0 offset=4
     i32.const -4
     i32.and
     local.set $0
     loop $while-continue|2
      local.get $0
      global.get $~lib/rt/itcms/toSpace
      i32.ne
      if
       local.get $1
       local.get $0
       i32.load $0 offset=4
       i32.const 3
       i32.and
       i32.ne
       if
        local.get $0
        local.get $0
        i32.load $0 offset=4
        i32.const -4
        i32.and
        local.get $1
        i32.or
        i32.store $0 offset=4
        local.get $0
        i32.const 20
        i32.add
        call $~lib/rt/__visit_members
       end
       local.get $0
       i32.load $0 offset=4
       i32.const -4
       i32.and
       local.set $0
       br $while-continue|2
      end
     end
     global.get $~lib/rt/itcms/fromSpace
     local.set $0
     global.get $~lib/rt/itcms/toSpace
     global.set $~lib/rt/itcms/fromSpace
     local.get $0
     global.set $~lib/rt/itcms/toSpace
     local.get $1
     global.set $~lib/rt/itcms/white
     local.get $0
     i32.load $0 offset=4
     i32.const -4
     i32.and
     global.set $~lib/rt/itcms/iter
     i32.const 2
     global.set $~lib/rt/itcms/state
    end
    global.get $~lib/rt/itcms/visitCount
    return
   end
   global.get $~lib/rt/itcms/iter
   local.tee $0
   global.get $~lib/rt/itcms/toSpace
   i32.ne
   if
    local.get $0
    i32.load $0 offset=4
    local.tee $1
    i32.const -4
    i32.and
    global.set $~lib/rt/itcms/iter
    global.get $~lib/rt/itcms/white
    i32.eqz
    local.get $1
    i32.const 3
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 45316
    i32.lt_u
    if
     local.get $0
     i32.const 0
     i32.store $0 offset=4
     local.get $0
     i32.const 0
     i32.store $0 offset=8
    else
     global.get $~lib/rt/itcms/total
     local.get $0
     i32.load $0
     i32.const -4
     i32.and
     i32.const 4
     i32.add
     i32.sub
     global.set $~lib/rt/itcms/total
     local.get $0
     i32.const 4
     i32.add
     call $~lib/rt/tlsf/__free
    end
    i32.const 10
    return
   end
   global.get $~lib/rt/itcms/toSpace
   local.tee $0
   local.get $0
   i32.store $0 offset=4
   local.get $0
   local.get $0
   i32.store $0 offset=8
   i32.const 0
   global.set $~lib/rt/itcms/state
  end
  i32.const 0
 )
 (func $~lib/rt/tlsf/searchBlock (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $1
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   local.get $1
   i32.const 1
   i32.const 27
   local.get $1
   i32.clz
   i32.sub
   i32.shl
   i32.add
   i32.const 1
   i32.sub
   local.get $1
   local.get $1
   i32.const 536870910
   i32.lt_u
   select
   local.tee $1
   i32.clz
   i32.sub
   local.tee $3
   i32.const 7
   i32.sub
   local.set $2
   local.get $1
   local.get $3
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.tee $1
  i32.const 16
  i32.lt_u
  local.get $2
  i32.const 23
  i32.lt_u
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $0
  local.get $2
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=4
  i32.const -1
  local.get $1
  i32.shl
  i32.and
  local.tee $1
  if (result i32)
   local.get $0
   local.get $1
   i32.ctz
   local.get $2
   i32.const 4
   i32.shl
   i32.add
   i32.const 2
   i32.shl
   i32.add
   i32.load $0 offset=96
  else
   local.get $0
   i32.load $0
   i32.const -1
   local.get $2
   i32.const 1
   i32.add
   i32.shl
   i32.and
   local.tee $1
   if (result i32)
    local.get $0
    local.get $1
    i32.ctz
    local.tee $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    local.tee $2
    i32.eqz
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.ctz
    local.get $1
    i32.const 4
    i32.shl
    i32.add
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=96
   else
    i32.const 0
   end
  end
 )
 (func $~lib/rt/tlsf/allocateBlock (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i32.const 1073741820
  i32.gt_u
  if
   unreachable
  end
  local.get $0
  i32.const 12
  local.get $1
  i32.const 19
  i32.add
  i32.const -16
  i32.and
  i32.const 4
  i32.sub
  local.get $1
  i32.const 12
  i32.le_u
  select
  local.tee $3
  call $~lib/rt/tlsf/searchBlock
  local.tee $1
  i32.eqz
  if
   memory.size $0
   local.tee $1
   i32.const 4
   local.get $0
   i32.load $0 offset=1568
   local.get $1
   i32.const 16
   i32.shl
   i32.const 4
   i32.sub
   i32.ne
   i32.shl
   local.get $3
   i32.const 1
   i32.const 27
   local.get $3
   i32.clz
   i32.sub
   i32.shl
   i32.const 1
   i32.sub
   i32.add
   local.get $3
   local.get $3
   i32.const 536870910
   i32.lt_u
   select
   i32.add
   i32.const 65535
   i32.add
   i32.const -65536
   i32.and
   i32.const 16
   i32.shr_u
   local.tee $2
   local.get $1
   local.get $2
   i32.gt_s
   select
   memory.grow $0
   i32.const 0
   i32.lt_s
   if
    local.get $2
    memory.grow $0
    i32.const 0
    i32.lt_s
    if
     unreachable
    end
   end
   local.get $0
   local.get $1
   i32.const 16
   i32.shl
   memory.size $0
   i32.const 16
   i32.shl
   call $~lib/rt/tlsf/addMemory
   local.get $0
   local.get $3
   call $~lib/rt/tlsf/searchBlock
   local.tee $1
   i32.eqz
   if
    unreachable
   end
  end
  local.get $3
  local.get $1
  i32.load $0
  i32.const -4
  i32.and
  i32.gt_u
  if
   unreachable
  end
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/removeBlock
  local.get $1
  i32.load $0
  local.set $4
  local.get $3
  i32.const 4
  i32.add
  i32.const 15
  i32.and
  if
   unreachable
  end
  local.get $4
  i32.const -4
  i32.and
  local.get $3
  i32.sub
  local.tee $2
  i32.const 16
  i32.ge_u
  if
   local.get $1
   local.get $3
   local.get $4
   i32.const 2
   i32.and
   i32.or
   i32.store $0
   local.get $1
   i32.const 4
   i32.add
   local.get $3
   i32.add
   local.tee $3
   local.get $2
   i32.const 4
   i32.sub
   i32.const 1
   i32.or
   i32.store $0
   local.get $0
   local.get $3
   call $~lib/rt/tlsf/insertBlock
  else
   local.get $1
   local.get $4
   i32.const -2
   i32.and
   i32.store $0
   local.get $1
   i32.const 4
   i32.add
   local.get $1
   i32.load $0
   i32.const -4
   i32.and
   i32.add
   local.tee $0
   local.get $0
   i32.load $0
   i32.const -3
   i32.and
   i32.store $0
  end
  local.get $1
 )
 (func $~lib/rt/itcms/__new (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 1073741804
  i32.ge_u
  if
   unreachable
  end
  global.get $~lib/rt/itcms/total
  global.get $~lib/rt/itcms/threshold
  i32.ge_u
  if
   block $__inlined_func$~lib/rt/itcms/interrupt
    i32.const 2048
    local.set $2
    loop $do-loop|0
     local.get $2
     call $~lib/rt/itcms/step
     i32.sub
     local.set $2
     global.get $~lib/rt/itcms/state
     i32.eqz
     if
      global.get $~lib/rt/itcms/total
      i64.extend_i32_u
      i64.const 200
      i64.mul
      i64.const 100
      i64.div_u
      i32.wrap_i64
      i32.const 1024
      i32.add
      global.set $~lib/rt/itcms/threshold
      br $__inlined_func$~lib/rt/itcms/interrupt
     end
     local.get $2
     i32.const 0
     i32.gt_s
     br_if $do-loop|0
    end
    global.get $~lib/rt/itcms/total
    local.tee $2
    global.get $~lib/rt/itcms/threshold
    i32.sub
    i32.const 1024
    i32.lt_u
    i32.const 10
    i32.shl
    local.get $2
    i32.add
    global.set $~lib/rt/itcms/threshold
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $0
  i32.const 16
  i32.add
  call $~lib/rt/tlsf/allocateBlock
  local.tee $2
  local.get $1
  i32.store $0 offset=12
  local.get $2
  local.get $0
  i32.store $0 offset=16
  global.get $~lib/rt/itcms/fromSpace
  local.tee $1
  i32.load $0 offset=8
  local.set $3
  local.get $2
  local.get $1
  global.get $~lib/rt/itcms/white
  i32.or
  i32.store $0 offset=4
  local.get $2
  local.get $3
  i32.store $0 offset=8
  local.get $3
  local.get $2
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.or
  i32.store $0 offset=4
  local.get $1
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/rt/itcms/total
  local.get $2
  i32.load $0
  i32.const -4
  i32.and
  i32.const 4
  i32.add
  i32.add
  global.set $~lib/rt/itcms/total
  local.get $2
  i32.const 20
  i32.add
  local.tee $1
  i32.const 0
  local.get $0
  memory.fill $0
  local.get $1
 )
 (func $~lib/util/sort/insertionSort<f64> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 f64)
  (local $6 f64)
  (local $7 i32)
  (local $8 f64)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $7
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $7
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    local.tee $3
    f64.load $0 offset=8
    local.tee $8
    local.set $6
    local.get $3
    f64.load $0
    local.set $5
    i32.const 2
    global.set $~argumentsLength
    local.get $5
    local.get $8
    local.get $4
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $5
     local.set $6
     local.get $8
     local.set $5
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $3
    loop $while-continue|1
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       f64.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $f64_f64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $8
       f64.store $0 offset=16
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    f64.store $0 offset=16
    loop $while-continue|2
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       f64.load $0
       local.set $5
       i32.const 2
       global.set $~argumentsLength
       local.get $5
       local.get $6
       local.get $4
       i32.load $0
       call_indirect $0 (type $f64_f64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $5
       f64.store $0 offset=8
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    f64.store $0 offset=8
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<f64> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 f64)
  (local $6 i32)
  (local $7 f64)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  local.set $7
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $7
  local.get $3
  i32.load $0
  call_indirect $0 (type $f64_f64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     f64.load $0 offset=8
     local.set $5
     local.get $6
     f64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     f64.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     f64.load $0
     f64.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     f64.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $1
     f64.load $0 offset=8
     local.set $5
     local.get $1
     f64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<f64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 f64)
  (local $8 f64)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $9
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 3
    i32.shl
    local.tee $10
    local.get $4
    i32.add
    local.get $0
    local.get $10
    i32.add
    f64.load $0
    f64.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $9
    local.get $6
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    f64.load $0 offset=8
    f64.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $7
     f64.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $8
     f64.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<f64> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 f64)
  (local $10 f64)
  (local $11 i32)
  (local $12 i32)
  (local $13 f64)
  (local $14 i32)
  (local $15 i32)
  (local $16 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     f64.load $0
     local.set $13
     local.get $0
     f64.load $0 offset=8
     local.set $9
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $9
     local.get $13
     local.get $13
     local.get $9
     local.get $2
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     f64.store $0
     local.get $0
     f64.load $0 offset=16
     local.set $10
     i32.const 2
     global.set $~argumentsLength
     local.get $13
     local.get $9
     local.get $1
     select
     local.tee $9
     local.get $10
     local.get $2
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $10
     local.get $9
     local.get $1
     select
     f64.store $0 offset=8
     local.get $0
     local.get $9
     local.get $10
     local.get $1
     select
     f64.store $0 offset=16
    end
    local.get $0
    f64.load $0
    local.set $10
    local.get $0
    f64.load $0 offset=8
    local.set $9
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $9
    local.get $10
    local.get $10
    local.get $9
    local.get $2
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    f64.store $0
    local.get $0
    local.get $10
    local.get $9
    local.get $1
    select
    f64.store $0 offset=8
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<f64>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $12
  i32.add
  local.set $14
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $12
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $15
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $11
  local.get $2
  call $~lib/util/sort/extendRunRight<f64>
  local.tee $6
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $11
   local.get $11
   i32.const 31
   i32.ge_s
   select
   local.tee $6
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<f64>
  end
  loop $while-continue|2
   local.get $6
   local.get $11
   i32.lt_s
   if
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $5
    local.get $11
    local.get $2
    call $~lib/util/sort/extendRunRight<f64>
    local.tee $7
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $11
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $11
     i32.gt_s
     select
     local.tee $7
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<f64>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $11
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $16
    i64.div_u
    local.get $5
    local.get $7
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $16
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $12
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $14
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $6
       local.get $15
       local.get $2
       call $~lib/util/sort/mergeRuns<f64>
       local.get $3
       local.get $12
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $12
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $14
    i32.add
    local.get $6
    i32.store $0
    local.get $5
    local.set $3
    local.get $7
    local.set $6
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $12
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $14
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $11
     local.get $15
     local.get $2
     call $~lib/util/sort/mergeRuns<f64>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $15
  call $~lib/rt/tlsf/__free
  local.get $12
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<f64>~anonymous|0 (type $f64_f64_=>_i32) (param $0 f64) (param $1 f64) (result i32)
  (local $2 i64)
  (local $3 i64)
  local.get $0
  i64.reinterpret_f64
  local.tee $2
  i64.const 63
  i64.shr_s
  i64.const 1
  i64.shr_u
  local.get $2
  i64.xor
  local.tee $2
  local.get $1
  i64.reinterpret_f64
  local.tee $3
  i64.const 63
  i64.shr_s
  i64.const 1
  i64.shr_u
  local.get $3
  i64.xor
  local.tee $3
  i64.gt_s
  local.get $2
  local.get $3
  i64.lt_s
  i32.sub
 )
 (func $~lib/typedarray/Int32Array#fill (type $i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  local.get $2
  i32.add
  local.get $2
  local.get $4
  local.get $2
  local.get $4
  i32.lt_s
  select
  local.get $2
  i32.const 0
  i32.lt_s
  select
  local.set $0
  local.get $3
  local.get $4
  i32.add
  local.get $3
  local.get $4
  local.get $3
  local.get $4
  i32.lt_s
  select
  local.get $3
  i32.const 0
  i32.lt_s
  select
  local.set $2
  block $__inlined_func$~lib/util/bytes/FILL<u32>
   local.get $1
   i32.eqz
   local.get $1
   i32.const -1
   i32.eq
   i32.or
   if
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $5
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $1
     local.get $2
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     memory.fill $0
    end
    br $__inlined_func$~lib/util/bytes/FILL<u32>
   end
   loop $for-loop|0
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $5
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $1
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0
    end
   end
  end
 )
 (func $~lib/typedarray/Int32Array#copyWithin (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  local.get $3
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  local.get $3
  local.get $4
  i32.lt_s
  select
  local.set $5
  local.get $0
  i32.load $0 offset=4
  local.tee $3
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $4
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $4
   local.get $1
   local.get $4
   i32.lt_s
   select
  end
  local.tee $1
  i32.const 2
  i32.shl
  i32.add
  local.get $3
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $4
   i32.add
   local.tee $2
   i32.const 0
   local.get $2
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $4
   local.get $2
   local.get $4
   i32.lt_s
   select
  end
  local.tee $2
  i32.const 2
  i32.shl
  i32.add
  local.get $5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $4
   local.get $5
   i32.add
   local.tee $3
   i32.const 0
   local.get $3
   i32.const 0
   i32.gt_s
   select
  else
   local.get $5
   local.get $4
   local.get $4
   local.get $5
   i32.gt_s
   select
  end
  local.get $2
  i32.sub
  local.tee $2
  local.get $4
  local.get $1
  i32.sub
  local.tee $1
  local.get $1
  local.get $2
  i32.gt_s
  select
  i32.const 2
  i32.shl
  memory.copy $0 $0
  local.get $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  local.get $0
  local.get $1
  i32.add
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i64_i32_i32_=>_i64) (param $0 i64) (param $1 i64) (param $2 i32) (param $3 i32) (result i64)
  local.get $0
  local.get $1
  i64.add
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_f32_i32_i32_=>_f32) (param $0 f32) (param $1 f32) (param $2 i32) (param $3 i32) (result f32)
  local.get $0
  local.get $1
  f32.add
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_f64_i32_i32_=>_f64) (param $0 f64) (param $1 f64) (param $2 i32) (param $3 i32) (result f64)
  local.get $0
  local.get $1
  f64.add
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  local.get $0
  i32.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i64) (param $0 i64) (param $1 i32) (param $2 i32) (result i64)
  local.get $0
  local.get $0
  i64.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_f32) (param $0 f32) (param $1 i32) (param $2 i32) (result f32)
  local.get $0
  local.get $0
  f32.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_f64) (param $0 f64) (param $1 i32) (param $2 i32) (result f64)
  local.get $0
  local.get $0
  f64.mul
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.extend8_s
  i32.const 2
  i32.gt_s
 )
 (func $~lib/rt/itcms/__renew (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.const 20
  i32.sub
  local.tee $3
  i32.load $0
  i32.const -4
  i32.and
  i32.const 16
  i32.sub
  i32.le_u
  if
   local.get $3
   local.get $1
   i32.store $0 offset=16
   local.get $0
   return
  end
  local.get $1
  local.get $3
  i32.load $0 offset=12
  call $~lib/rt/itcms/__new
  local.tee $2
  local.get $0
  local.get $1
  local.get $3
  i32.load $0 offset=16
  local.tee $0
  local.get $0
  local.get $1
  i32.gt_u
  select
  memory.copy $0 $0
  local.get $2
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.extend16_s
  i32.const 2
  i32.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 2
  i32.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 2
  i64.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 2
  i64.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f32.const 2
  f32.gt
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f64.const 2
  f64.gt
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 2
  i64.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.eqz
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f32.const 2
  f32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|1 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f32.const 0
  f32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f64.const 2
  f64.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|1 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f64.const 0
  f64.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 4
  i64.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f32.const 4
  f32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f64.const 4
  f64.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.extend8_s
  i32.const 1
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 1
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.extend16_s
  i32.const 1
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 1
  i64.and
  i64.eqz
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  block $__inlined_func$~lib/math/NativeMathf.mod (result f32)
   local.get $0
   i32.reinterpret_f32
   local.tee $3
   i32.const 23
   i32.shr_u
   i32.const 255
   i32.and
   local.tee $2
   i32.const 255
   i32.eq
   if
    local.get $0
    local.get $0
    f32.add
    local.tee $0
    local.get $0
    f32.div
    br $__inlined_func$~lib/math/NativeMathf.mod
   end
   local.get $3
   i32.const 1
   i32.shl
   local.tee $1
   i32.const -2147483648
   i32.le_u
   if
    local.get $0
    local.get $1
    i32.const -2147483648
    i32.ne
    f32.convert_i32_u
    f32.mul
    br $__inlined_func$~lib/math/NativeMathf.mod
   end
   local.get $2
   if (result i32)
    local.get $3
    i32.const 8388607
    i32.and
    i32.const 8388608
    i32.or
   else
    local.get $3
    i32.const 1
    local.get $2
    local.get $3
    i32.const 9
    i32.shl
    i32.clz
    i32.sub
    local.tee $2
    i32.sub
    i32.shl
   end
   local.set $1
   loop $while-continue|0
    local.get $2
    i32.const 128
    i32.gt_s
    if
     local.get $1
     i32.const 8388608
     i32.ge_u
     if (result i32)
      local.get $0
      f32.const 0
      f32.mul
      local.get $1
      i32.const 8388608
      i32.eq
      br_if $__inlined_func$~lib/math/NativeMathf.mod
      drop
      local.get $1
      i32.const 8388608
      i32.sub
     else
      local.get $1
     end
     i32.const 1
     i32.shl
     local.set $1
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|0
    end
   end
   local.get $1
   i32.const 8388608
   i32.ge_u
   if
    local.get $0
    f32.const 0
    f32.mul
    local.get $1
    i32.const 8388608
    i32.eq
    br_if $__inlined_func$~lib/math/NativeMathf.mod
    drop
    local.get $1
    i32.const 8388608
    i32.sub
    local.set $1
   end
   local.get $2
   local.get $1
   i32.const 8
   i32.shl
   i32.clz
   local.tee $4
   i32.sub
   local.set $2
   local.get $3
   i32.const -2147483648
   i32.and
   local.get $1
   local.get $4
   i32.shl
   local.tee $1
   i32.const 8388608
   i32.sub
   local.get $2
   i32.const 23
   i32.shl
   i32.or
   local.get $1
   i32.const 1
   local.get $2
   i32.sub
   i32.shr_u
   local.get $2
   i32.const 0
   i32.gt_s
   select
   i32.or
   f32.reinterpret_i32
  end
  f32.const 0
  f32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i64)
  (local $4 i64)
  (local $5 i64)
  (local $6 i64)
  block $__inlined_func$~lib/math/NativeMath.mod (result f64)
   local.get $0
   i64.reinterpret_f64
   local.tee $5
   i64.const 52
   i64.shr_u
   i64.const 2047
   i64.and
   local.tee $4
   i64.const 2047
   i64.eq
   if
    local.get $0
    local.get $0
    f64.add
    local.tee $0
    local.get $0
    f64.div
    br $__inlined_func$~lib/math/NativeMath.mod
   end
   local.get $5
   i64.const 1
   i64.shl
   local.tee $3
   i64.const -9223372036854775808
   i64.le_u
   if
    local.get $0
    local.get $3
    i64.const -9223372036854775808
    i64.ne
    f64.convert_i32_u
    f64.mul
    br $__inlined_func$~lib/math/NativeMath.mod
   end
   local.get $4
   i64.eqz
   if (result i64)
    local.get $5
    i64.const 1
    local.get $4
    local.get $5
    i64.const 12
    i64.shl
    i64.clz
    i64.sub
    local.tee $4
    i64.sub
    i64.shl
   else
    local.get $5
    i64.const 4503599627370495
    i64.and
    i64.const 4503599627370496
    i64.or
   end
   local.set $3
   loop $while-continue|0
    local.get $4
    i64.const 1024
    i64.gt_s
    if
     local.get $3
     i64.const 4503599627370496
     i64.ge_u
     if (result i64)
      local.get $0
      f64.const 0
      f64.mul
      local.get $3
      i64.const 4503599627370496
      i64.eq
      br_if $__inlined_func$~lib/math/NativeMath.mod
      drop
      local.get $3
      i64.const 4503599627370496
      i64.sub
     else
      local.get $3
     end
     i64.const 1
     i64.shl
     local.set $3
     local.get $4
     i64.const 1
     i64.sub
     local.set $4
     br $while-continue|0
    end
   end
   local.get $3
   i64.const 4503599627370496
   i64.ge_u
   if
    local.get $0
    f64.const 0
    f64.mul
    local.get $3
    i64.const 4503599627370496
    i64.eq
    br_if $__inlined_func$~lib/math/NativeMath.mod
    drop
    local.get $3
    i64.const 4503599627370496
    i64.sub
    local.set $3
   end
   local.get $4
   local.get $3
   i64.const 11
   i64.shl
   i64.clz
   local.tee $4
   i64.sub
   local.set $6
   local.get $5
   i64.const -9223372036854775808
   i64.and
   local.get $3
   local.get $4
   i64.shl
   local.tee $3
   i64.const 4503599627370496
   i64.sub
   local.get $6
   i64.const 52
   i64.shl
   i64.or
   local.get $3
   i64.const 1
   local.get $6
   i64.sub
   i64.shr_u
   local.get $6
   i64.const 0
   i64.gt_s
   select
   i64.or
   f64.reinterpret_i64
  end
  f64.const 0
  f64.eq
 )
 (func $~lib/typedarray/Int8Array#reverse (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $4
   local.get $5
   i32.const 8
   i32.sub
   local.set $6
   loop $while-continue|0
    local.get $1
    i32.const 7
    i32.add
    local.get $4
    i32.lt_u
    if
     local.get $1
     local.get $2
     i32.add
     local.tee $7
     i64.load $0
     local.tee $3
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $3
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.set $3
     local.get $7
     local.get $2
     local.get $6
     i32.add
     local.get $1
     i32.sub
     local.tee $7
     i64.load $0
     local.tee $8
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $8
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.tee $8
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $8
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     i64.store $0
     local.get $7
     local.get $3
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $3
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     i64.store $0
     local.get $1
     i32.const 8
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|1
    local.get $1
    local.get $4
    i32.lt_u
    if
     local.get $1
     local.get $2
     i32.add
     local.tee $6
     i32.load8_u $0
     local.set $7
     local.get $6
     local.get $2
     local.get $5
     local.get $1
     i32.sub
     i32.add
     local.tee $6
     i32.load8_u $0
     i32.store8 $0
     local.get $6
     local.get $7
     i32.store8 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|1
    end
   end
  end
  local.get $0
 )
 (func $~lib/typedarray/Int16Array#reverse (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $3
   local.get $4
   i32.const 2
   i32.sub
   local.set $5
   loop $while-continue|0
    local.get $1
    i32.const 1
    i32.add
    local.get $3
    i32.lt_u
    if
     local.get $2
     local.get $5
     local.get $1
     i32.sub
     i32.const 1
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     i32.const 16
     i32.rotr
     local.set $7
     local.get $6
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     i32.const 16
     i32.rotr
     i32.store $0
     local.get $6
     local.get $7
     i32.store $0
     local.get $1
     i32.const 2
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|1
    local.get $1
    local.get $3
    i32.lt_u
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.tee $5
     i32.load16_u $0
     local.set $6
     local.get $5
     local.get $2
     local.get $4
     local.get $1
     i32.sub
     i32.const 1
     i32.shl
     i32.add
     local.tee $5
     i32.load16_u $0
     i32.store16 $0
     local.get $5
     local.get $6
     i32.store16 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|1
    end
   end
  end
  local.get $0
 )
 (func $~lib/typedarray/Int16Array#lastIndexOf@varargs (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
  end
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   i32.const -1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   drop
   local.get $1
   local.set $2
   local.get $4
   i32.const 1
   i32.sub
   local.get $3
   local.get $3
   local.get $4
   i32.ge_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|0
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.get $2
     i32.const 65535
     i32.and
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint8Array.wrap@varargs (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $1
   end
   i32.const -1
   local.set $2
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $3
  local.get $1
  i32.lt_u
  if
   unreachable
  end
  local.get $2
  i32.const 0
  i32.lt_s
  if
   local.get $2
   i32.const -1
   i32.eq
   if (result i32)
    local.get $3
    local.get $1
    i32.sub
   else
    unreachable
   end
   local.set $2
  else
   local.get $1
   local.get $2
   i32.add
   local.get $3
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  local.get $3
  local.get $0
  i32.store $0
  local.get $0
  if
   local.get $3
   local.get $0
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $2
  i32.store $0 offset=8
  local.get $3
  local.get $0
  local.get $1
  i32.add
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
 )
 (func $~lib/util/sort/insertionSort<i8> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.add
    local.tee $3
    i32.load8_s $0 offset=1
    local.tee $6
    local.set $5
    local.get $3
    i32.load8_s $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.add
       i32.load8_s $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.add
       local.get $8
       i32.store8 $0 offset=2
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.add
    local.get $3
    i32.store8 $0 offset=2
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.add
       i32.load8_s $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.add
       local.get $3
       i32.store8 $0 offset=1
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.add
    local.get $5
    i32.store8 $0 offset=1
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i8> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.add
  i32.load8_s $0
  local.set $5
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  local.get $0
  i32.add
  i32.load8_s $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.add
     local.tee $5
     i32.load8_s $0 offset=1
     local.set $6
     local.get $5
     i32.load8_s $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     local.tee $3
     i32.load8_s $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.add
     local.tee $3
     i32.load8_s $0
     i32.store8 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store8 $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.add
     local.tee $1
     i32.load8_s $0 offset=1
     local.set $5
     local.get $1
     i32.load8_s $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<i8> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    local.get $4
    i32.add
    local.get $0
    local.get $2
    i32.add
    i32.load8_s $0
    i32.store8 $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.add
    local.get $0
    local.get $6
    i32.add
    i32.load8_s $0 offset=1
    i32.store8 $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.add
    i32.load8_s $0
    local.set $8
    local.get $2
    local.get $4
    i32.add
    i32.load8_s $0
    local.set $7
    i32.const 2
    global.set $~argumentsLength
    local.get $8
    local.get $7
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     local.get $8
     i32.store8 $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.add
     local.get $7
     i32.store8 $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i8> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load8_s $0
     local.set $5
     local.get $0
     i32.load8_s $0 offset=1
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $5
     local.get $5
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     i32.store8 $0
     local.get $0
     i32.load8_s $0 offset=2
     local.set $4
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $3
     local.get $1
     select
     local.tee $3
     local.get $4
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $4
     local.get $3
     local.get $1
     select
     i32.store8 $0 offset=1
     local.get $0
     local.get $3
     local.get $4
     local.get $1
     select
     i32.store8 $0 offset=2
    end
    local.get $0
    i32.load8_s $0
    local.set $4
    local.get $0
    i32.load8_s $0 offset=1
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $4
    local.get $4
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    i32.store8 $0
    local.get $0
    local.get $4
    local.get $3
    local.get $1
    select
    i32.store8 $0 offset=1
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<i8>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<i8>
  local.tee $7
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $7
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<i8>
  end
  loop $while-continue|2
   local.get $7
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.add
    local.tee $5
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<i8>
    local.tee $6
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $9
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $6
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<i8>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $5
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $7
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<i8>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $7
    i32.store $0
    local.get $5
    local.set $3
    local.get $6
    local.set $7
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<i8>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<i8>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.extend8_s
  local.get $1
  i32.extend8_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.extend8_s
  local.tee $1
  local.get $0
  i32.extend8_s
  local.tee $0
  i32.gt_s
  local.get $0
  local.get $1
  i32.gt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u8> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.add
    local.tee $3
    i32.load8_u $0 offset=1
    local.tee $6
    local.set $5
    local.get $3
    i32.load8_u $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.add
       i32.load8_u $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.add
       local.get $8
       i32.store8 $0 offset=2
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.add
    local.get $3
    i32.store8 $0 offset=2
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.add
       i32.load8_u $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.add
       local.get $3
       i32.store8 $0 offset=1
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.add
    local.get $5
    i32.store8 $0 offset=1
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u8> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.add
  i32.load8_u $0
  local.set $5
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  local.get $0
  i32.add
  i32.load8_u $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.add
     local.tee $5
     i32.load8_u $0 offset=1
     local.set $6
     local.get $5
     i32.load8_u $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     local.tee $3
     i32.load8_u $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.add
     local.tee $3
     i32.load8_u $0
     i32.store8 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store8 $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.add
     local.tee $1
     i32.load8_u $0 offset=1
     local.set $5
     local.get $1
     i32.load8_u $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<u8> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    local.get $4
    i32.add
    local.get $0
    local.get $2
    i32.add
    i32.load8_u $0
    i32.store8 $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.add
    local.get $0
    local.get $6
    i32.add
    i32.load8_u $0 offset=1
    i32.store8 $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.add
    i32.load8_u $0
    local.set $8
    local.get $2
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $7
    i32.const 2
    global.set $~argumentsLength
    local.get $8
    local.get $7
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     local.get $8
     i32.store8 $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.add
     local.get $7
     i32.store8 $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u8> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load8_u $0
     local.set $5
     local.get $0
     i32.load8_u $0 offset=1
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $5
     local.get $5
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     i32.store8 $0
     local.get $0
     i32.load8_u $0 offset=2
     local.set $4
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $3
     local.get $1
     select
     local.tee $3
     local.get $4
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $4
     local.get $3
     local.get $1
     select
     i32.store8 $0 offset=1
     local.get $0
     local.get $3
     local.get $4
     local.get $1
     select
     i32.store8 $0 offset=2
    end
    local.get $0
    i32.load8_u $0
    local.set $4
    local.get $0
    i32.load8_u $0 offset=1
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $4
    local.get $4
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    i32.store8 $0
    local.get $0
    local.get $4
    local.get $3
    local.get $1
    select
    i32.store8 $0 offset=1
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<u8>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<u8>
  local.tee $7
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $7
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<u8>
  end
  loop $while-continue|2
   local.get $7
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.add
    local.tee $5
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<u8>
    local.tee $6
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $9
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $6
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<u8>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $5
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $7
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<u8>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $7
    i32.store $0
    local.get $5
    local.set $3
    local.get $6
    local.set $7
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<u8>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<u8>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  local.tee $0
  local.get $1
  i32.const 255
  i32.and
  local.tee $1
  i32.gt_u
  local.get $0
  local.get $1
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.const 255
  i32.and
  local.tee $1
  local.get $0
  i32.const 255
  i32.and
  local.tee $0
  i32.gt_u
  local.get $0
  local.get $1
  i32.gt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i16> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.tee $3
    i32.load16_s $0 offset=2
    local.tee $6
    local.set $5
    local.get $3
    i32.load16_s $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       i32.load16_s $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       local.get $8
       i32.store16 $0 offset=4
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.store16 $0 offset=4
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       i32.load16_s $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       local.get $3
       i32.store16 $0 offset=2
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    local.get $5
    i32.store16 $0 offset=2
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i16> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.tee $5
     i32.load16_s $0 offset=2
     local.set $6
     local.get $5
     i32.load16_s $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.tee $3
     i32.load16_s $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     local.tee $3
     i32.load16_s $0
     i32.store16 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store16 $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.tee $1
     i32.load16_s $0 offset=2
     local.set $5
     local.get $1
     i32.load16_s $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<i16> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    local.tee $8
    local.get $4
    i32.add
    local.get $0
    local.get $8
    i32.add
    i32.load16_s $0
    i32.store16 $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0 offset=2
    i32.store16 $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.get $7
     i32.store16 $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.get $8
     i32.store16 $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i16> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load16_s $0
     local.set $1
     local.get $0
     i32.load16_s $0 offset=2
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $1
     local.get $1
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $4
     select
     i32.store16 $0
     local.get $0
     i32.load16_s $0 offset=4
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $1
     local.get $3
     local.get $4
     select
     local.tee $1
     local.get $5
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $3
     local.get $0
     local.get $5
     local.get $1
     local.get $3
     select
     i32.store16 $0 offset=2
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     select
     i32.store16 $0 offset=4
    end
    local.get $0
    i32.load16_s $0
    local.set $1
    local.get $0
    i32.load16_s $0 offset=2
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $1
    local.get $1
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $2
    select
    i32.store16 $0
    local.get $0
    local.get $1
    local.get $3
    local.get $2
    select
    i32.store16 $0 offset=2
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<i16>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $5
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $7
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $7
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $5
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<i16>
  local.tee $5
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $5
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<i16>
  end
  loop $while-continue|2
   local.get $5
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $6
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<i16>
    local.tee $1
    local.get $6
    i32.sub
    i32.const 1
    i32.add
    local.tee $7
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $6
     local.get $9
     local.get $6
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $1
     local.get $7
     local.get $2
     call $~lib/util/sort/insertionSort<i16>
    end
    local.get $3
    local.get $6
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $1
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $7
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $7
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $5
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<i16>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $7
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $5
    i32.store $0
    local.get $6
    local.set $3
    local.get $1
    local.set $5
    local.get $7
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<i16>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<i16>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.extend16_s
  local.get $1
  i32.extend16_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.extend16_s
  local.tee $1
  local.get $0
  i32.extend16_s
  local.tee $0
  i32.gt_s
  local.get $0
  local.get $1
  i32.gt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u16> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.tee $3
    i32.load16_u $0 offset=2
    local.tee $6
    local.set $5
    local.get $3
    i32.load16_u $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       i32.load16_u $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       local.get $8
       i32.store16 $0 offset=4
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.store16 $0 offset=4
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       i32.load16_u $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       local.get $3
       i32.store16 $0 offset=2
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    local.get $5
    i32.store16 $0 offset=2
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u16> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.tee $5
     i32.load16_u $0 offset=2
     local.set $6
     local.get $5
     i32.load16_u $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.tee $3
     i32.load16_u $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     local.tee $3
     i32.load16_u $0
     i32.store16 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store16 $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.tee $1
     i32.load16_u $0 offset=2
     local.set $5
     local.get $1
     i32.load16_u $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<u16> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    local.tee $8
    local.get $4
    i32.add
    local.get $0
    local.get $8
    i32.add
    i32.load16_u $0
    i32.store16 $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0 offset=2
    i32.store16 $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.get $7
     i32.store16 $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.get $8
     i32.store16 $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u16> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load16_u $0
     local.set $1
     local.get $0
     i32.load16_u $0 offset=2
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $1
     local.get $1
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $4
     select
     i32.store16 $0
     local.get $0
     i32.load16_u $0 offset=4
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $1
     local.get $3
     local.get $4
     select
     local.tee $1
     local.get $5
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $3
     local.get $0
     local.get $5
     local.get $1
     local.get $3
     select
     i32.store16 $0 offset=2
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     select
     i32.store16 $0 offset=4
    end
    local.get $0
    i32.load16_u $0
    local.set $1
    local.get $0
    i32.load16_u $0 offset=2
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $1
    local.get $1
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $2
    select
    i32.store16 $0
    local.get $0
    local.get $1
    local.get $3
    local.get $2
    select
    i32.store16 $0 offset=2
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<u16>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $5
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $7
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $7
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $5
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<u16>
  local.tee $5
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $5
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<u16>
  end
  loop $while-continue|2
   local.get $5
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $6
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<u16>
    local.tee $1
    local.get $6
    i32.sub
    i32.const 1
    i32.add
    local.tee $7
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $6
     local.get $9
     local.get $6
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $1
     local.get $7
     local.get $2
     call $~lib/util/sort/insertionSort<u16>
    end
    local.get $3
    local.get $6
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $1
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $7
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $7
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $5
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<u16>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $7
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $5
    i32.store $0
    local.get $6
    local.set $3
    local.get $1
    local.set $5
    local.get $7
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<u16>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<u16>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  local.tee $0
  local.get $1
  i32.const 65535
  i32.and
  local.tee $1
  i32.gt_u
  local.get $0
  local.get $1
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.const 65535
  i32.and
  local.tee $1
  local.get $0
  i32.const 65535
  i32.and
  local.tee $0
  i32.gt_u
  local.get $0
  local.get $1
  i32.gt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i32> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 2
    i32.shl
    i32.add
    local.tee $3
    i32.load $0 offset=4
    local.tee $6
    local.set $5
    local.get $3
    i32.load $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       local.get $8
       i32.store $0 offset=8
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    local.get $3
    i32.store $0 offset=8
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       local.get $3
       i32.store $0 offset=4
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    i32.store $0 offset=4
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i32> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $5
     i32.load $0 offset=4
     local.set $6
     local.get $5
     i32.load $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     i32.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     i32.load $0
     i32.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $1
     i32.load $0 offset=4
     local.set $5
     local.get $1
     i32.load $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<i32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 2
    i32.shl
    local.tee $8
    local.get $4
    i32.add
    local.get $0
    local.get $8
    i32.add
    i32.load $0
    i32.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    i32.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $7
     i32.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $8
     i32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i32> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load $0
     local.set $1
     local.get $0
     i32.load $0 offset=4
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $1
     local.get $1
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $4
     select
     i32.store $0
     local.get $0
     i32.load $0 offset=8
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $1
     local.get $3
     local.get $4
     select
     local.tee $1
     local.get $5
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $3
     local.get $0
     local.get $5
     local.get $1
     local.get $3
     select
     i32.store $0 offset=4
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     select
     i32.store $0 offset=8
    end
    local.get $0
    i32.load $0
    local.set $1
    local.get $0
    i32.load $0 offset=4
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $1
    local.get $1
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $2
    select
    i32.store $0
    local.get $0
    local.get $1
    local.get $3
    local.get $2
    select
    i32.store $0 offset=4
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<i32>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $5
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $7
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $7
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $5
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<i32>
  local.tee $5
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $5
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<i32>
  end
  loop $while-continue|2
   local.get $5
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $6
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<i32>
    local.tee $1
    local.get $6
    i32.sub
    i32.const 1
    i32.add
    local.tee $7
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $6
     local.get $9
     local.get $6
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $1
     local.get $7
     local.get $2
     call $~lib/util/sort/insertionSort<i32>
    end
    local.get $3
    local.get $6
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $1
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $7
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $7
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $5
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<i32>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $7
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $5
    i32.store $0
    local.get $6
    local.set $3
    local.get $1
    local.set $5
    local.get $7
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<i32>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<i32>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.lt_s
  local.get $0
  local.get $1
  i32.gt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u32> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 2
    i32.shl
    i32.add
    local.tee $3
    i32.load $0 offset=4
    local.tee $6
    local.set $5
    local.get $3
    i32.load $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       local.get $8
       i32.store $0 offset=8
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    local.get $3
    i32.store $0 offset=8
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       local.get $3
       i32.store $0 offset=4
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    i32.store $0 offset=4
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u32> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $5
     i32.load $0 offset=4
     local.set $6
     local.get $5
     i32.load $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     i32.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     i32.load $0
     i32.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $1
     i32.load $0 offset=4
     local.set $5
     local.get $1
     i32.load $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<u32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 2
    i32.shl
    local.tee $8
    local.get $4
    i32.add
    local.get $0
    local.get $8
    i32.add
    i32.load $0
    i32.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    i32.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $7
     i32.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $8
     i32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u32> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load $0
     local.set $1
     local.get $0
     i32.load $0 offset=4
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $1
     local.get $1
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $4
     select
     i32.store $0
     local.get $0
     i32.load $0 offset=8
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $1
     local.get $3
     local.get $4
     select
     local.tee $1
     local.get $5
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $3
     local.get $0
     local.get $5
     local.get $1
     local.get $3
     select
     i32.store $0 offset=4
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     select
     i32.store $0 offset=8
    end
    local.get $0
    i32.load $0
    local.set $1
    local.get $0
    i32.load $0 offset=4
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $1
    local.get $1
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $2
    select
    i32.store $0
    local.get $0
    local.get $1
    local.get $3
    local.get $2
    select
    i32.store $0 offset=4
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<u32>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $5
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $7
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $7
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $5
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<u32>
  local.tee $5
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $5
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<u32>
  end
  loop $while-continue|2
   local.get $5
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $6
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<u32>
    local.tee $1
    local.get $6
    i32.sub
    i32.const 1
    i32.add
    local.tee $7
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $6
     local.get $9
     local.get $6
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $1
     local.get $7
     local.get $2
     call $~lib/util/sort/insertionSort<u32>
    end
    local.get $3
    local.get $6
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $1
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $7
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $7
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $5
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<u32>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $7
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $5
    i32.store $0
    local.get $6
    local.set $3
    local.get $1
    local.set $5
    local.get $7
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<u32>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<u32>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.gt_u
  local.get $0
  local.get $1
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.lt_u
  local.get $0
  local.get $1
  i32.gt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i64> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $7
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $7
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    local.tee $3
    i64.load $0 offset=8
    local.tee $8
    local.set $6
    local.get $3
    i64.load $0
    local.set $5
    i32.const 2
    global.set $~argumentsLength
    local.get $5
    local.get $8
    local.get $4
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $5
     local.set $6
     local.get $8
     local.set $5
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $3
    loop $while-continue|1
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $8
       i64.store $0 offset=16
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    i64.store $0 offset=16
    loop $while-continue|2
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $5
       i32.const 2
       global.set $~argumentsLength
       local.get $5
       local.get $6
       local.get $4
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $5
       i64.store $0 offset=8
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    i64.store $0 offset=8
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i64> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  (local $7 i64)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.set $7
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $7
  local.get $3
  i32.load $0
  call_indirect $0 (type $i64_i64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     i64.load $0 offset=8
     local.set $5
     local.get $6
     i64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     i64.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     i64.load $0
     i64.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i64.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $1
     i64.load $0 offset=8
     local.set $5
     local.get $1
     i64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<i64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $9
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 3
    i32.shl
    local.tee $10
    local.get $4
    i32.add
    local.get $0
    local.get $10
    i32.add
    i64.load $0
    i64.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $9
    local.get $6
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    i64.load $0 offset=8
    i64.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $7
     i64.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $8
     i64.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i64> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i64)
  (local $10 i64)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i64.load $0
     local.set $13
     local.get $0
     i64.load $0 offset=8
     local.set $9
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $9
     local.get $13
     local.get $13
     local.get $9
     local.get $2
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     i64.store $0
     local.get $0
     i64.load $0 offset=16
     local.set $10
     i32.const 2
     global.set $~argumentsLength
     local.get $13
     local.get $9
     local.get $1
     select
     local.tee $9
     local.get $10
     local.get $2
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $10
     local.get $9
     local.get $1
     select
     i64.store $0 offset=8
     local.get $0
     local.get $9
     local.get $10
     local.get $1
     select
     i64.store $0 offset=16
    end
    local.get $0
    i64.load $0
    local.set $10
    local.get $0
    i64.load $0 offset=8
    local.set $9
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $9
    local.get $10
    local.get $10
    local.get $9
    local.get $2
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    i64.store $0
    local.get $0
    local.get $10
    local.get $9
    local.get $1
    select
    i64.store $0 offset=8
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<i64>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $12
  i32.add
  local.set $14
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $12
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $15
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $11
  local.get $2
  call $~lib/util/sort/extendRunRight<i64>
  local.tee $6
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $11
   local.get $11
   i32.const 31
   i32.ge_s
   select
   local.tee $6
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<i64>
  end
  loop $while-continue|2
   local.get $6
   local.get $11
   i32.lt_s
   if
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $5
    local.get $11
    local.get $2
    call $~lib/util/sort/extendRunRight<i64>
    local.tee $7
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $11
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $11
     i32.gt_s
     select
     local.tee $7
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<i64>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $11
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $9
    i64.div_u
    local.get $5
    local.get $7
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $12
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $14
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $6
       local.get $15
       local.get $2
       call $~lib/util/sort/mergeRuns<i64>
       local.get $3
       local.get $12
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $12
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $14
    i32.add
    local.get $6
    i32.store $0
    local.get $5
    local.set $3
    local.get $7
    local.set $6
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $12
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $14
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $11
     local.get $15
     local.get $2
     call $~lib/util/sort/mergeRuns<i64>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $15
  call $~lib/rt/tlsf/__free
  local.get $12
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<i64>~anonymous|0 (type $i64_i64_=>_i32) (param $0 i64) (param $1 i64) (result i32)
  local.get $0
  local.get $1
  i64.gt_s
  local.get $0
  local.get $1
  i64.lt_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i64_=>_i32) (param $0 i64) (param $1 i64) (result i32)
  local.get $0
  local.get $1
  i64.lt_s
  local.get $0
  local.get $1
  i64.gt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u64> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $7
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $7
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    local.tee $3
    i64.load $0 offset=8
    local.tee $8
    local.set $6
    local.get $3
    i64.load $0
    local.set $5
    i32.const 2
    global.set $~argumentsLength
    local.get $5
    local.get $8
    local.get $4
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $5
     local.set $6
     local.get $8
     local.set $5
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $3
    loop $while-continue|1
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $8
       i64.store $0 offset=16
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    i64.store $0 offset=16
    loop $while-continue|2
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $5
       i32.const 2
       global.set $~argumentsLength
       local.get $5
       local.get $6
       local.get $4
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $5
       i64.store $0 offset=8
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    i64.store $0 offset=8
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u64> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  (local $7 i64)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.set $7
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $7
  local.get $3
  i32.load $0
  call_indirect $0 (type $i64_i64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     i64.load $0 offset=8
     local.set $5
     local.get $6
     i64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     i64.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     i64.load $0
     i64.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i64.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $1
     i64.load $0 offset=8
     local.set $5
     local.get $1
     i64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<u64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $9
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 3
    i32.shl
    local.tee $10
    local.get $4
    i32.add
    local.get $0
    local.get $10
    i32.add
    i64.load $0
    i64.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $9
    local.get $6
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    i64.load $0 offset=8
    i64.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $7
     i64.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $8
     i64.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u64> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i64)
  (local $10 i64)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i64.load $0
     local.set $13
     local.get $0
     i64.load $0 offset=8
     local.set $9
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $9
     local.get $13
     local.get $13
     local.get $9
     local.get $2
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     i64.store $0
     local.get $0
     i64.load $0 offset=16
     local.set $10
     i32.const 2
     global.set $~argumentsLength
     local.get $13
     local.get $9
     local.get $1
     select
     local.tee $9
     local.get $10
     local.get $2
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $10
     local.get $9
     local.get $1
     select
     i64.store $0 offset=8
     local.get $0
     local.get $9
     local.get $10
     local.get $1
     select
     i64.store $0 offset=16
    end
    local.get $0
    i64.load $0
    local.set $10
    local.get $0
    i64.load $0 offset=8
    local.set $9
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $9
    local.get $10
    local.get $10
    local.get $9
    local.get $2
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    i64.store $0
    local.get $0
    local.get $10
    local.get $9
    local.get $1
    select
    i64.store $0 offset=8
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<u64>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $12
  i32.add
  local.set $14
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $12
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $15
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $11
  local.get $2
  call $~lib/util/sort/extendRunRight<u64>
  local.tee $6
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $11
   local.get $11
   i32.const 31
   i32.ge_s
   select
   local.tee $6
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<u64>
  end
  loop $while-continue|2
   local.get $6
   local.get $11
   i32.lt_s
   if
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $5
    local.get $11
    local.get $2
    call $~lib/util/sort/extendRunRight<u64>
    local.tee $7
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $11
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $11
     i32.gt_s
     select
     local.tee $7
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<u64>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $11
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $9
    i64.div_u
    local.get $5
    local.get $7
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $12
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $14
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $6
       local.get $15
       local.get $2
       call $~lib/util/sort/mergeRuns<u64>
       local.get $3
       local.get $12
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $12
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $14
    i32.add
    local.get $6
    i32.store $0
    local.get $5
    local.set $3
    local.get $7
    local.set $6
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $12
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $14
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $11
     local.get $15
     local.get $2
     call $~lib/util/sort/mergeRuns<u64>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $15
  call $~lib/rt/tlsf/__free
  local.get $12
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<u64>~anonymous|0 (type $i64_i64_=>_i32) (param $0 i64) (param $1 i64) (result i32)
  local.get $0
  local.get $1
  i64.gt_u
  local.get $0
  local.get $1
  i64.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i64_=>_i32) (param $0 i64) (param $1 i64) (result i32)
  local.get $0
  local.get $1
  i64.lt_u
  local.get $0
  local.get $1
  i64.gt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<f32> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 f32)
  (local $6 f32)
  (local $7 i32)
  (local $8 f32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $7
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $7
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 2
    i32.shl
    i32.add
    local.tee $3
    f32.load $0 offset=4
    local.tee $8
    local.set $6
    local.get $3
    f32.load $0
    local.set $5
    i32.const 2
    global.set $~argumentsLength
    local.get $5
    local.get $8
    local.get $4
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $5
     local.set $6
     local.get $8
     local.set $5
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $3
    loop $while-continue|1
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $f32_f32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       local.get $8
       f32.store $0 offset=8
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    f32.store $0 offset=8
    loop $while-continue|2
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       local.set $5
       i32.const 2
       global.set $~argumentsLength
       local.get $5
       local.get $6
       local.get $4
       i32.load $0
       call_indirect $0 (type $f32_f32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       local.get $5
       f32.store $0 offset=4
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.get $6
    f32.store $0 offset=4
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<f32> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 f32)
  (local $6 i32)
  (local $7 f32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  local.set $7
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $7
  local.get $3
  i32.load $0
  call_indirect $0 (type $f32_f32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     f32.load $0 offset=4
     local.set $5
     local.get $6
     f32.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     f32.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     f32.load $0
     f32.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     f32.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $1
     f32.load $0 offset=4
     local.set $5
     local.get $1
     f32.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<f32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 f32)
  (local $8 f32)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $9
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 2
    i32.shl
    local.tee $10
    local.get $4
    i32.add
    local.get $0
    local.get $10
    i32.add
    f32.load $0
    f32.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $9
    local.get $6
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    f32.load $0 offset=4
    f32.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $7
     f32.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $8
     f32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<f32> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 f32)
  (local $10 f32)
  (local $11 i32)
  (local $12 i32)
  (local $13 f32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     f32.load $0
     local.set $13
     local.get $0
     f32.load $0 offset=4
     local.set $9
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $9
     local.get $13
     local.get $13
     local.get $9
     local.get $2
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     f32.store $0
     local.get $0
     f32.load $0 offset=8
     local.set $10
     i32.const 2
     global.set $~argumentsLength
     local.get $13
     local.get $9
     local.get $1
     select
     local.tee $9
     local.get $10
     local.get $2
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $10
     local.get $9
     local.get $1
     select
     f32.store $0 offset=4
     local.get $0
     local.get $9
     local.get $10
     local.get $1
     select
     f32.store $0 offset=8
    end
    local.get $0
    f32.load $0
    local.set $10
    local.get $0
    f32.load $0 offset=4
    local.set $9
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $9
    local.get $10
    local.get $10
    local.get $9
    local.get $2
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    f32.store $0
    local.get $0
    local.get $10
    local.get $9
    local.get $1
    select
    f32.store $0 offset=4
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<f32>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $12
  i32.add
  local.set $14
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $12
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $15
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $11
  local.get $2
  call $~lib/util/sort/extendRunRight<f32>
  local.tee $6
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $11
   local.get $11
   i32.const 31
   i32.ge_s
   select
   local.tee $6
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<f32>
  end
  loop $while-continue|2
   local.get $6
   local.get $11
   i32.lt_s
   if
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $5
    local.get $11
    local.get $2
    call $~lib/util/sort/extendRunRight<f32>
    local.tee $7
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $11
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $11
     i32.gt_s
     select
     local.tee $7
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<f32>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $11
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $16
    i64.div_u
    local.get $5
    local.get $7
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $16
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $12
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $14
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $6
       local.get $15
       local.get $2
       call $~lib/util/sort/mergeRuns<f32>
       local.get $3
       local.get $12
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $12
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $14
    i32.add
    local.get $6
    i32.store $0
    local.get $5
    local.set $3
    local.get $7
    local.set $6
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $12
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $14
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $11
     local.get $15
     local.get $2
     call $~lib/util/sort/mergeRuns<f32>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $15
  call $~lib/rt/tlsf/__free
  local.get $12
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<f32>~anonymous|0 (type $f32_f32_=>_i32) (param $0 f32) (param $1 f32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.reinterpret_f32
  local.tee $2
  i32.const 31
  i32.shr_s
  i32.const 1
  i32.shr_u
  local.get $2
  i32.xor
  local.tee $2
  local.get $1
  i32.reinterpret_f32
  local.tee $3
  i32.const 31
  i32.shr_s
  i32.const 1
  i32.shr_u
  local.get $3
  i32.xor
  local.tee $3
  i32.gt_s
  local.get $2
  local.get $3
  i32.lt_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_f32_=>_i32) (param $0 f32) (param $1 f32) (result i32)
  local.get $0
  local.get $1
  f32.lt
  local.get $0
  local.get $1
  f32.gt
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_f64_=>_i32) (param $0 f64) (param $1 f64) (result i32)
  local.get $0
  local.get $1
  f64.lt
  local.get $0
  local.get $1
  f64.gt
  i32.sub
 )
 (func $~lib/rt/__visit_members (type $i32_=>_none) (param $0 i32)
  block $folding-inner3
   block $folding-inner2
    block $invalid
     block $~lib/string/String
      block $~lib/arraybuffer/ArrayBuffer
       local.get $0
       i32.const 8
       i32.sub
       i32.load $0
       br_table $~lib/arraybuffer/ArrayBuffer $~lib/string/String $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner2 $folding-inner3 $folding-inner3 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $invalid
      end
      return
     end
     return
    end
    unreachable
   end
   local.get $0
   i32.load $0 offset=4
   local.tee $0
   if
    local.get $0
    call $byn-split-outlined-A$~lib/rt/itcms/__visit
   end
   return
  end
  local.get $0
  i32.load $0
  local.tee $0
  if
   local.get $0
   call $byn-split-outlined-A$~lib/rt/itcms/__visit
  end
 )
 (func $~start (type $none_=>_none)
  call $start:std/typedarray
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.const 255
  i32.and
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 255
  i32.and
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.const 65535
  i32.and
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 65535
  i32.and
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_none) (param $0 i64) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i64.load32_s $0
  local.get $0
  i64.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_none) (param $0 f32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  f32.convert_i32_s
  local.get $0
  f32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_none) (param $0 f64) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  f64.convert_i32_s
  local.get $0
  f64.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $start:std/typedarray (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i64)
  (local $10 f32)
  (local $11 f64)
  (local $12 i32)
  (local $13 i64)
  (local $14 i32)
  (local $15 f32)
  (local $16 f64)
  global.get $~lib/memory/__stack_pointer
  i32.const 1856
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.const 1856
  memory.fill $0
  memory.size $0
  i32.const 16
  i32.shl
  i32.const 45316
  i32.sub
  i32.const 1
  i32.shr_u
  global.set $~lib/rt/itcms/threshold
  i32.const 1140
  i32.const 1136
  i32.store $0
  i32.const 1144
  i32.const 1136
  i32.store $0
  i32.const 1136
  global.set $~lib/rt/itcms/pinSpace
  i32.const 1172
  i32.const 1168
  i32.store $0
  i32.const 1176
  i32.const 1168
  i32.store $0
  i32.const 1168
  global.set $~lib/rt/itcms/toSpace
  i32.const 1252
  i32.const 1248
  i32.store $0
  i32.const 1256
  i32.const 1248
  i32.store $0
  i32.const 1248
  global.set $~lib/rt/itcms/fromSpace
  local.get $4
  i32.const 0
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=12
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0 offset=16
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0 offset=20
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0 offset=24
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Int64Array#constructor
  local.tee $4
  i32.store $0 offset=28
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $4
  i32.store $0 offset=32
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Float32Array#constructor
  local.tee $4
  i32.store $0 offset=36
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/typedarray/Float64Array#constructor
  local.tee $4
  i32.store $0 offset=40
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0 offset=44
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0 offset=48
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0 offset=52
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=56
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 10
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0 offset=60
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 10
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0 offset=64
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 20
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0 offset=68
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 20
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int64Array#constructor
  local.tee $4
  i32.store $0 offset=72
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 40
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $4
  i32.store $0 offset=76
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 40
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Float32Array#constructor
  local.tee $4
  i32.store $0 offset=80
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 20
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Float64Array#constructor
  local.tee $4
  i32.store $0 offset=84
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 40
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0 offset=88
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 12
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#subarray
  local.tee $4
  i32.store $0 offset=88
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0
  i32.const 2
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  call $~lib/typedarray/Float64Array#constructor
  local.tee $4
  i32.store $0 offset=92
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.const 7
  f64.store $0 offset=16
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.const 6
  f64.store $0 offset=24
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.const 5
  f64.store $0 offset=32
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.const 4
  f64.store $0 offset=40
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 6
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=48
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 7
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.const 8
  f64.store $0 offset=56
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Float64Array#subarray
  local.tee $4
  i32.store $0 offset=92
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  i32.const 16
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 32
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $~argumentsLength
  local.get $4
  call $~lib/typedarray/Float64Array#sort@varargs
  drop
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  f64.load $0
  f64.const 4
  f64.eq
  if (result i32)
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   i32.const 1
   i32.le_u
   if
    unreachable
   end
   local.get $4
   i32.load $0 offset=4
   f64.load $0 offset=8
   f64.const 5
   f64.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   i32.const 2
   i32.le_u
   if
    unreachable
   end
   local.get $4
   i32.load $0 offset=4
   f64.load $0 offset=16
   f64.const 6
   f64.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   i32.const 3
   i32.le_u
   if
    unreachable
   end
   local.get $4
   i32.load $0 offset=4
   f64.load $0 offset=24
   f64.const 7
   f64.eq
  else
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0 offset=96
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 0
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 255
  i32.store8 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load8_u $0
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 255
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0 offset=100
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $4
  i32.load $0 offset=8
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $5
  i32.const 1
  local.get $4
  i32.load $0 offset=8
  local.tee $6
  local.get $6
  i32.const 1
  i32.gt_s
  select
  local.tee $8
  i32.const 3
  local.get $6
  local.get $6
  i32.const 3
  i32.gt_s
  select
  local.tee $6
  i32.lt_s
  if
   local.get $5
   local.get $8
   i32.add
   i32.const 1
   local.get $6
   local.get $8
   i32.sub
   memory.fill $0
  end
  block $std/typedarray/isInt8ArrayEqual|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 0
   i32.const 15
   i32.const 1328
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=104
   i32.const 0
   local.get $4
   i32.load $0 offset=8
   local.get $5
   i32.load $0 offset=12
   i32.ne
   br_if $std/typedarray/isInt8ArrayEqual|inlined.0
   drop
   local.get $4
   i32.load $0 offset=8
   local.set $6
   loop $for-loop|0
    local.get $1
    local.get $6
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $4
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     local.get $5
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $std/typedarray/isInt8ArrayEqual|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $1
  local.get $4
  i32.load $0 offset=8
  local.tee $5
  i32.const 0
  local.get $5
  i32.const 0
  i32.le_s
  select
  local.set $6
  local.get $5
  local.get $6
  i32.gt_s
  if
   local.get $1
   local.get $6
   i32.add
   i32.const 0
   local.get $5
   local.get $6
   i32.sub
   memory.fill $0
  end
  block $std/typedarray/isInt8ArrayEqual|inlined.1 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 0
   i32.const 15
   i32.const 1360
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=108
   i32.const 0
   local.get $4
   i32.load $0 offset=8
   local.get $5
   i32.load $0 offset=12
   i32.ne
   br_if $std/typedarray/isInt8ArrayEqual|inlined.1
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   local.set $6
   loop $for-loop|1
    local.get $1
    local.get $6
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $4
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     local.get $5
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $std/typedarray/isInt8ArrayEqual|inlined.1
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|1
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $1
  local.get $4
  i32.load $0 offset=8
  local.tee $5
  i32.const 0
  local.get $5
  i32.const 0
  i32.le_s
  select
  local.tee $6
  local.get $5
  i32.const 3
  i32.sub
  local.tee $5
  i32.lt_s
  if
   local.get $1
   local.get $6
   i32.add
   i32.const 1
   local.get $5
   local.get $6
   i32.sub
   memory.fill $0
  end
  block $std/typedarray/isInt8ArrayEqual|inlined.2 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 0
   i32.const 15
   i32.const 1392
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=112
   i32.const 0
   local.get $4
   i32.load $0 offset=8
   local.get $5
   i32.load $0 offset=12
   i32.ne
   br_if $std/typedarray/isInt8ArrayEqual|inlined.2
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   local.set $6
   loop $for-loop|2
    local.get $1
    local.get $6
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $4
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     local.get $5
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $std/typedarray/isInt8ArrayEqual|inlined.2
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|2
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $1
  local.get $4
  i32.load $0 offset=8
  local.tee $5
  i32.const 2
  i32.sub
  local.set $6
  local.get $5
  local.get $6
  i32.gt_s
  if
   local.get $1
   local.get $6
   i32.add
   i32.const 2
   local.get $5
   local.get $6
   i32.sub
   memory.fill $0
  end
  block $std/typedarray/isInt8ArrayEqual|inlined.3 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 0
   i32.const 15
   i32.const 1424
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=116
   i32.const 0
   local.get $4
   i32.load $0 offset=8
   local.get $5
   i32.load $0 offset=12
   i32.ne
   br_if $std/typedarray/isInt8ArrayEqual|inlined.3
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   local.set $6
   loop $for-loop|3
    local.get $1
    local.get $6
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $4
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     local.get $5
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $std/typedarray/isInt8ArrayEqual|inlined.3
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|3
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $1
  i32.const 1
  local.get $4
  i32.load $0 offset=8
  local.tee $5
  local.get $5
  i32.const 1
  i32.gt_s
  select
  local.tee $6
  local.get $5
  i32.const 0
  local.get $5
  i32.const 0
  i32.le_s
  select
  local.tee $5
  i32.lt_s
  if
   local.get $1
   local.get $6
   i32.add
   i32.const 0
   local.get $5
   local.get $6
   i32.sub
   memory.fill $0
  end
  block $std/typedarray/isInt8ArrayEqual|inlined.4 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 0
   i32.const 15
   i32.const 1456
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=120
   i32.const 0
   local.get $4
   i32.load $0 offset=8
   local.get $5
   i32.load $0 offset=12
   i32.ne
   br_if $std/typedarray/isInt8ArrayEqual|inlined.4
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   local.set $6
   loop $for-loop|4
    local.get $1
    local.get $6
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $4
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     local.get $5
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $std/typedarray/isInt8ArrayEqual|inlined.4
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|4
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int8Array#subarray
  local.tee $5
  i32.store $0 offset=124
  local.get $5
  i32.load $0 offset=4
  local.set $1
  local.get $5
  i32.load $0 offset=8
  local.tee $6
  i32.const 0
  local.get $6
  i32.const 0
  i32.le_s
  select
  local.set $8
  local.get $6
  local.get $8
  i32.gt_s
  if
   local.get $1
   local.get $8
   i32.add
   i32.const 0
   local.get $6
   local.get $8
   i32.sub
   memory.fill $0
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  block $std/typedarray/isInt8ArrayEqual|inlined.5 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3
   i32.const 0
   i32.const 15
   i32.const 1488
   call $~lib/rt/__newArray
   local.tee $6
   i32.store $0 offset=128
   i32.const 0
   local.get $5
   i32.load $0 offset=8
   local.get $6
   i32.load $0 offset=12
   i32.ne
   br_if $std/typedarray/isInt8ArrayEqual|inlined.5
   drop
   i32.const 0
   local.set $1
   local.get $5
   i32.load $0 offset=8
   local.set $8
   loop $for-loop|5
    local.get $1
    local.get $8
    i32.lt_s
    if
     local.get $1
     local.get $5
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $6
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $5
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     local.get $6
     i32.load $0 offset=4
     local.get $1
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $std/typedarray/isInt8ArrayEqual|inlined.5
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|5
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $std/typedarray/isInt8ArrayEqual|inlined.6 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 0
   i32.const 15
   i32.const 1520
   call $~lib/rt/__newArray
   local.tee $1
   i32.store $0 offset=132
   i32.const 0
   local.get $4
   i32.load $0 offset=8
   local.get $1
   i32.load $0 offset=12
   i32.ne
   br_if $std/typedarray/isInt8ArrayEqual|inlined.6
   drop
   local.get $4
   i32.load $0 offset=8
   local.set $5
   loop $for-loop|6
    local.get $0
    local.get $5
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $1
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     local.get $1
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $std/typedarray/isInt8ArrayEqual|inlined.6
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|6
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0 offset=136
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=16
  local.get $4
  i32.const 1
  i32.const 1
  i32.const 3
  call $~lib/typedarray/Int32Array#fill
  block $std/typedarray/isInt32ArrayEqual|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1552
   call $~lib/rt/__newArray
   local.tee $0
   i32.store $0 offset=140
   i32.const 0
   local.get $0
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.0
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $5
   loop $for-loop|7
    local.get $1
    local.get $5
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $0
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $1
     i32.const 2
     i32.shl
     local.tee $6
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $0
     i32.load $0 offset=4
     local.get $6
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|7
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.const 0
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#fill
  block $std/typedarray/isInt32ArrayEqual|inlined.1 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1600
   call $~lib/rt/__newArray
   local.tee $0
   i32.store $0 offset=144
   i32.const 0
   local.get $0
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.1
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $5
   loop $for-loop|8
    local.get $1
    local.get $5
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $0
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $1
     i32.const 2
     i32.shl
     local.tee $6
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $0
     i32.load $0 offset=4
     local.get $6
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.1
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|8
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.const 1
  i32.const 0
  i32.const -3
  call $~lib/typedarray/Int32Array#fill
  block $std/typedarray/isInt32ArrayEqual|inlined.2 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1648
   call $~lib/rt/__newArray
   local.tee $0
   i32.store $0 offset=148
   i32.const 0
   local.get $0
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.2
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $5
   loop $for-loop|9
    local.get $1
    local.get $5
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $0
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $1
     i32.const 2
     i32.shl
     local.tee $6
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $0
     i32.load $0 offset=4
     local.get $6
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.2
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|9
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.const 2
  i32.const -2
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#fill
  block $std/typedarray/isInt32ArrayEqual|inlined.3 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1696
   call $~lib/rt/__newArray
   local.tee $0
   i32.store $0 offset=152
   i32.const 0
   local.get $0
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.3
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $5
   loop $for-loop|10
    local.get $1
    local.get $5
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $0
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $1
     i32.const 2
     i32.shl
     local.tee $6
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $0
     i32.load $0 offset=4
     local.get $6
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.3
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|10
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.const 0
  i32.const 1
  i32.const 0
  call $~lib/typedarray/Int32Array#fill
  block $std/typedarray/isInt32ArrayEqual|inlined.4 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1744
   call $~lib/rt/__newArray
   local.tee $0
   i32.store $0 offset=156
   i32.const 0
   local.get $0
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.4
   drop
   i32.const 0
   local.set $1
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $5
   loop $for-loop|11
    local.get $1
    local.get $5
    i32.lt_s
    if
     local.get $1
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $0
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $1
     i32.const 2
     i32.shl
     local.tee $6
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $0
     i32.load $0 offset=4
     local.get $6
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.4
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|11
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int32Array#subarray
  local.tee $0
  i32.store $0 offset=160
  local.get $0
  i32.const 0
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#fill
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 12
  i32.ne
  if
   unreachable
  end
  block $std/typedarray/isInt32ArrayEqual|inlined.5 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3
   i32.const 2
   i32.const 16
   i32.const 1792
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=164
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.5
   drop
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|12
    local.get $1
    local.get $6
    i32.lt_s
    if
     local.get $1
     local.get $0
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $1
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $1
     i32.const 2
     i32.shl
     local.tee $8
     local.get $0
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.5
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|12
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $std/typedarray/isInt32ArrayEqual|inlined.6 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1824
   call $~lib/rt/__newArray
   local.tee $1
   i32.store $0 offset=168
   i32.const 0
   local.get $1
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.6
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $5
   loop $for-loop|13
    local.get $0
    local.get $5
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $1
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $6
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $1
     i32.load $0 offset=4
     local.get $6
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.6
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|13
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=172
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $0
  i32.load $0 offset=8
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=5
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 6
  call $~lib/typedarray/Int8Array#subarray
  local.tee $0
  i32.store $0 offset=176
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 5
  call $~lib/typedarray/Int8Array#subarray
  local.tee $0
  i32.store $0 offset=180
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 4
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int8Array#subarray
  local.tee $0
  i32.store $0 offset=184
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=188
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $1
  i32.store $0 offset=192
  block $std/typedarray/isInt32ArrayEqual|inlined.7 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 0
   i32.const 3
   i32.const 2147483647
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=196
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1872
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=200
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.7
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|14
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.7
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|14
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.8 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 1
   i32.const 3
   i32.const 2147483647
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=204
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1920
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=208
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.8
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|15
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.8
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|15
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.9 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 1
   i32.const 2
   i32.const 2147483647
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=212
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 1968
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=216
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.9
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|16
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.9
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|16
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.10 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 2
   i32.const 2
   i32.const 2147483647
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=220
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2016
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=224
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.10
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|17
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.10
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|17
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.11 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 0
   i32.const 3
   i32.const 4
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=228
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2064
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=232
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.11
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|18
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.11
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|18
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.12 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 1
   i32.const 3
   i32.const 4
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=236
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2112
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=240
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.12
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|19
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.12
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|19
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.13 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 1
   i32.const 2
   i32.const 4
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=244
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2160
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=248
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.13
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|20
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.13
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|20
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.14 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 0
   i32.const -2
   i32.const 2147483647
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=252
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2208
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=256
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.14
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|21
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.14
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|21
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.15 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const 0
   i32.const -2
   i32.const -1
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=260
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2256
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=264
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.15
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|22
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.15
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|22
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.16 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const -4
   i32.const -3
   i32.const -2
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=268
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2304
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=272
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.16
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|23
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.16
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|23
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.17 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const -4
   i32.const -3
   i32.const -1
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $4
   i32.store $0 offset=276
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2352
   call $~lib/rt/__newArray
   local.tee $5
   i32.store $0 offset=280
   i32.const 0
   local.get $5
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.17
   drop
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $6
   loop $for-loop|24
    local.get $0
    local.get $6
    i32.lt_s
    if
     local.get $0
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $5
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $8
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $5
     i32.load $0 offset=4
     local.get $8
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.17
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|24
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=188
  block $std/typedarray/isInt32ArrayEqual|inlined.18 (result i32)
   global.get $~lib/memory/__stack_pointer
   local.get $0
   i32.const -4
   i32.const -3
   i32.const 2147483647
   call $~lib/typedarray/Int32Array#copyWithin
   local.tee $1
   i32.store $0 offset=284
   global.get $~lib/memory/__stack_pointer
   i32.const 5
   i32.const 2
   i32.const 16
   i32.const 2400
   call $~lib/rt/__newArray
   local.tee $4
   i32.store $0 offset=288
   i32.const 0
   local.get $4
   i32.load $0 offset=12
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $std/typedarray/isInt32ArrayEqual|inlined.18
   drop
   i32.const 0
   local.set $0
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $5
   loop $for-loop|25
    local.get $0
    local.get $5
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $0
     i32.const 2
     i32.shl
     local.tee $6
     local.get $1
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $4
     i32.load $0 offset=4
     local.get $6
     i32.add
     i32.load $0
     i32.ne
     br_if $std/typedarray/isInt32ArrayEqual|inlined.18
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|25
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=292
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int32Array#subarray
  local.tee $1
  i32.store $0 offset=296
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 12
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 3
  call $~lib/typedarray/Int32Array#slice
  local.tee $4
  i32.store $0 offset=300
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 8
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#slice
  local.tee $1
  i32.store $0 offset=304
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 4
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $1
  i32.store $0 offset=308
  local.get $0
  local.get $1
  i32.eq
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=312
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2448
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $5
  loop $for-loop|08
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    local.get $4
    i32.add
    i32.load8_s $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $1
    local.get $0
    i32.const 2448
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|08
   end
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=320
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2480
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $5
  loop $for-loop|012
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $1
    local.get $0
    i32.const 2480
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|012
   end
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=324
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2512
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $5
  loop $for-loop|018
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $1
    local.get $0
    i32.const 2512
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|018
   end
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=328
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 2544
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $5
  loop $for-loop|022
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $4
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $1
    local.get $0
    i32.const 2544
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|022
   end
  end
  local.get $3
  i32.const 65535
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=332
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 2576
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $5
  loop $for-loop|027
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $4
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $1
    local.get $0
    i32.const 2576
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|027
   end
  end
  local.get $3
  i32.const 65535
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=336
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2608
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $5
  loop $for-loop|031
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $1
    local.get $0
    i32.const 2608
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|031
   end
  end
  local.get $3
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=340
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2640
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $5
  loop $for-loop|035
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $1
    local.get $0
    i32.const 2640
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|035
   end
  end
  local.get $3
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=344
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 2672
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  loop $for-loop|039
   local.get $1
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $13
    i32.const 4
    global.set $~argumentsLength
    local.get $9
    local.get $13
    local.get $1
    local.get $0
    i32.const 2672
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $9
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|039
   end
  end
  local.get $9
  i64.const 6
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=348
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 2704
  i32.store $0 offset=316
  i64.const 0
  local.set $9
  local.get $0
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  loop $for-loop|043
   local.get $1
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $13
    i32.const 4
    global.set $~argumentsLength
    local.get $9
    local.get $13
    local.get $1
    local.get $0
    i32.const 2704
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $9
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|043
   end
  end
  local.get $9
  i64.const 6
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=352
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2736
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $4
  loop $for-loop|048
   local.get $1
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $15
    i32.const 4
    global.set $~argumentsLength
    local.get $10
    local.get $15
    local.get $1
    local.get $0
    i32.const 2736
    i32.load $0
    call_indirect $0 (type $f32_f32_i32_i32_=>_f32)
    local.set $10
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|048
   end
  end
  local.get $10
  f32.const 6
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=356
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 2768
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  loop $for-loop|052
   local.get $1
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $16
    i32.const 4
    global.set $~argumentsLength
    local.get $11
    local.get $16
    local.get $1
    local.get $0
    i32.const 2768
    i32.load $0
    call_indirect $0 (type $f64_f64_i32_i32_=>_f64)
    local.set $11
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|052
   end
  end
  local.get $11
  f64.const 6
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=360
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.add
  i32.load8_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.add
  i32.load8_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=364
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.add
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.add
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=368
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.add
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.add
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=372
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=376
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=380
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=384
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=388
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=392
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=396
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.load $0
  f32.const 1
  f32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  f32.const 3
  f32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  f32.const 1
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=400
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0
  f64.const 1
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  f64.const 3
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $3
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $3
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  f64.const 1
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=404
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2800
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|056
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $1
    local.get $4
    i32.add
    i32.load8_s $0
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $5
    local.get $1
    local.get $0
    i32.const 2800
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|056
   end
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=408
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2832
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|060
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $1
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $5
    local.get $1
    local.get $0
    i32.const 2832
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|060
   end
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=412
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2864
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|066
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $1
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $5
    local.get $1
    local.get $0
    i32.const 2864
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|066
   end
  end
  local.get $3
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=416
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 2896
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|070
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $4
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $5
    local.get $1
    local.get $0
    i32.const 2896
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|070
   end
  end
  local.get $3
  i32.const 65535
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=420
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 2928
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|074
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $4
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $5
    local.get $1
    local.get $0
    i32.const 2928
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|074
   end
  end
  local.get $3
  i32.const 65535
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=424
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2960
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|078
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $5
    local.get $1
    local.get $0
    i32.const 2960
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|078
   end
  end
  local.get $3
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=428
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2992
  i32.store $0 offset=316
  i32.const 0
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|082
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $5
    i32.const 4
    global.set $~argumentsLength
    local.get $3
    local.get $5
    local.get $1
    local.get $0
    i32.const 2992
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $3
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|082
   end
  end
  local.get $3
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=432
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 3024
  i32.store $0 offset=316
  i64.const 0
  local.set $9
  local.get $0
  i32.load $0 offset=4
  local.set $3
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|086
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $13
    i32.const 4
    global.set $~argumentsLength
    local.get $9
    local.get $13
    local.get $1
    local.get $0
    i32.const 3024
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $9
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|086
   end
  end
  local.get $9
  i64.const 6
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=436
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 3056
  i32.store $0 offset=316
  i64.const 0
  local.set $9
  local.get $0
  i32.load $0 offset=4
  local.set $3
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|090
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $13
    i32.const 4
    global.set $~argumentsLength
    local.get $9
    local.get $13
    local.get $1
    local.get $0
    i32.const 3056
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $9
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|090
   end
  end
  local.get $9
  i64.const 6
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=440
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 3088
  i32.store $0 offset=316
  f32.const 0
  local.set $10
  local.get $0
  i32.load $0 offset=4
  local.set $3
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|094
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $3
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $15
    i32.const 4
    global.set $~argumentsLength
    local.get $10
    local.get $15
    local.get $1
    local.get $0
    i32.const 3088
    i32.load $0
    call_indirect $0 (type $f32_f32_i32_i32_=>_f32)
    local.set $10
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|094
   end
  end
  local.get $10
  f32.const 6
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=444
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 3120
  i32.store $0 offset=316
  f64.const 0
  local.set $11
  local.get $0
  i32.load $0 offset=4
  local.set $3
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  loop $for-loop|098
   local.get $1
   i32.const 0
   i32.ge_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $16
    i32.const 4
    global.set $~argumentsLength
    local.get $11
    local.get $16
    local.get $1
    local.get $0
    i32.const 3120
    i32.load $0
    call_indirect $0 (type $f64_f64_i32_i32_=>_f64)
    local.set $11
    local.get $1
    i32.const 1
    i32.sub
    local.set $1
    br $for-loop|098
   end
  end
  local.get $11
  f64.const 6
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=448
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3152
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $3
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  loop $for-loop|0364
   local.get $2
   local.get $4
   i32.lt_s
   if
    local.get $2
    local.get $5
    i32.add
    i32.load8_s $0
    local.set $8
    i32.const 3
    global.set $~argumentsLength
    local.get $2
    local.get $6
    i32.add
    local.get $8
    local.get $2
    local.get $0
    i32.const 3152
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0364
   end
  end
  local.get $3
  local.get $6
  i32.store $0
  local.get $6
  if
   local.get $3
   local.get $6
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $6
  i32.store $0 offset=4
  local.get $3
  local.get $4
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $3
  i32.store $0 offset=452
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=456
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3184
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $2
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  i32.const 0
  local.set $2
  loop $for-loop|0373
   local.get $2
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $8
    i32.const 3
    global.set $~argumentsLength
    local.get $2
    local.get $6
    i32.add
    local.get $8
    local.get $2
    local.get $0
    i32.const 3184
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0373
   end
  end
  local.get $5
  local.get $6
  i32.store $0
  local.get $6
  if
   local.get $5
   local.get $6
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $6
  i32.store $0 offset=4
  local.get $5
  local.get $3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=460
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=464
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3216
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $2
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  i32.const 0
  local.set $2
  loop $for-loop|0382
   local.get $2
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $8
    i32.const 3
    global.set $~argumentsLength
    local.get $2
    local.get $6
    i32.add
    local.get $8
    local.get $2
    local.get $0
    i32.const 3216
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0382
   end
  end
  local.get $5
  local.get $6
  i32.store $0
  local.get $6
  if
   local.get $5
   local.get $6
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $6
  i32.store $0 offset=4
  local.get $5
  local.get $3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=468
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=472
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3248
  i32.store $0 offset=316
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $1
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 1
  i32.shl
  local.tee $6
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  i32.const 0
  local.set $3
  loop $for-loop|0391
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    i32.const 1
    i32.shl
    local.tee $12
    local.get $5
    i32.add
    i32.load16_s $0
    local.set $14
    i32.const 3
    global.set $~argumentsLength
    local.get $8
    local.get $12
    i32.add
    local.get $14
    local.get $3
    local.get $0
    i32.const 3248
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store16 $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0391
   end
  end
  local.get $1
  local.get $8
  i32.store $0
  local.get $8
  if
   local.get $1
   local.get $8
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $8
  i32.store $0 offset=4
  local.get $1
  local.get $6
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=476
  local.get $1
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=480
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3280
  i32.store $0 offset=316
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $1
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 1
  i32.shl
  local.tee $6
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  i32.const 0
  local.set $3
  loop $for-loop|0399
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    i32.const 1
    i32.shl
    local.tee $12
    local.get $5
    i32.add
    i32.load16_u $0
    local.set $14
    i32.const 3
    global.set $~argumentsLength
    local.get $8
    local.get $12
    i32.add
    local.get $14
    local.get $3
    local.get $0
    i32.const 3280
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store16 $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0399
   end
  end
  local.get $1
  local.get $8
  i32.store $0
  local.get $8
  if
   local.get $1
   local.get $8
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $8
  i32.store $0 offset=4
  local.get $1
  local.get $6
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=484
  local.get $1
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=488
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3312
  i32.store $0 offset=316
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $1
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  i32.const 0
  local.set $3
  loop $for-loop|0407
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $12
    local.get $5
    i32.add
    i32.load $0
    local.set $14
    i32.const 3
    global.set $~argumentsLength
    local.get $8
    local.get $12
    i32.add
    local.get $14
    local.get $3
    local.get $0
    i32.const 3312
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0407
   end
  end
  local.get $1
  local.get $8
  i32.store $0
  local.get $8
  if
   local.get $1
   local.get $8
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $8
  i32.store $0 offset=4
  local.get $1
  local.get $6
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=492
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=496
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3344
  i32.store $0 offset=316
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $1
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  i32.const 0
  local.set $3
  loop $for-loop|0416
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $12
    local.get $5
    i32.add
    i32.load $0
    local.set $14
    i32.const 3
    global.set $~argumentsLength
    local.get $8
    local.get $12
    i32.add
    local.get $14
    local.get $3
    local.get $0
    i32.const 3344
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0416
   end
  end
  local.get $1
  local.get $8
  i32.store $0
  local.get $8
  if
   local.get $1
   local.get $8
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $8
  i32.store $0 offset=4
  local.get $1
  local.get $6
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=500
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=504
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3376
  i32.store $0 offset=316
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $1
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 3
  i32.shl
  local.tee $6
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  i32.const 0
  local.set $3
  loop $for-loop|0424
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $12
    local.get $5
    i32.add
    i64.load $0
    local.set $9
    i32.const 3
    global.set $~argumentsLength
    local.get $8
    local.get $12
    i32.add
    local.get $9
    local.get $3
    local.get $0
    i32.const 3376
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i64)
    i64.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0424
   end
  end
  local.get $1
  local.get $8
  i32.store $0
  local.get $8
  if
   local.get $1
   local.get $8
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $8
  i32.store $0 offset=4
  local.get $1
  local.get $6
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=508
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 4
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 9
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=512
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3408
  i32.store $0 offset=316
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $1
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 3
  i32.shl
  local.tee $6
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  i32.const 0
  local.set $3
  loop $for-loop|0432
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $12
    local.get $5
    i32.add
    i64.load $0
    local.set $9
    i32.const 3
    global.set $~argumentsLength
    local.get $8
    local.get $12
    i32.add
    local.get $9
    local.get $3
    local.get $0
    i32.const 3408
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i64)
    i64.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0432
   end
  end
  local.get $1
  local.get $8
  i32.store $0
  local.get $8
  if
   local.get $1
   local.get $8
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $8
  i32.store $0 offset=4
  local.get $1
  local.get $6
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=516
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 4
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 9
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=520
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3440
  i32.store $0 offset=316
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $1
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  i32.const 0
  local.set $3
  loop $for-loop|0440
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $12
    local.get $5
    i32.add
    f32.load $0
    local.set $10
    i32.const 3
    global.set $~argumentsLength
    local.get $8
    local.get $12
    i32.add
    local.get $10
    local.get $3
    local.get $0
    i32.const 3440
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_f32)
    f32.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0440
   end
  end
  local.get $1
  local.get $8
  i32.store $0
  local.get $8
  if
   local.get $1
   local.get $8
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $8
  i32.store $0 offset=4
  local.get $1
  local.get $6
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=524
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.load $0
  f32.const 1
  f32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 4
  f32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 9
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=528
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3472
  i32.store $0 offset=316
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $1
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 3
  i32.shl
  local.tee $6
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  i32.const 0
  local.set $3
  loop $for-loop|0448
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $12
    local.get $5
    i32.add
    f64.load $0
    local.set $11
    i32.const 3
    global.set $~argumentsLength
    local.get $8
    local.get $12
    i32.add
    local.get $11
    local.get $3
    local.get $0
    i32.const 3472
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_f64)
    f64.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0448
   end
  end
  local.get $1
  local.get $8
  i32.store $0
  local.get $8
  if
   local.get $1
   local.get $8
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $8
  i32.store $0 offset=4
  local.get $1
  local.get $6
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=532
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.load $0
  f64.const 1
  f64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 4
  f64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 9
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Int8Array#constructor
  local.tee $2
  i32.store $0 offset=536
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $2
  i32.load $0 offset=8
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=5
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3504
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  local.set $4
  local.get $0
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0459
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.get $8
    i32.add
    i32.load8_s $0
    local.set $12
    i32.const 3
    global.set $~argumentsLength
    local.get $12
    local.get $3
    local.get $2
    i32.const 3504
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $0
     local.get $6
     i32.add
     local.get $12
     i32.store8 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0459
   end
  end
  local.get $5
  local.get $6
  local.get $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=540
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=544
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $2
  i32.load $0 offset=8
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=5
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3536
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  local.set $4
  local.get $0
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0472
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.get $8
    i32.add
    i32.load8_u $0
    local.set $12
    i32.const 3
    global.set $~argumentsLength
    local.get $12
    local.get $3
    local.get $2
    i32.const 3536
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $0
     local.get $6
     i32.add
     local.get $12
     i32.store8 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0472
   end
  end
  local.get $5
  local.get $6
  local.get $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=548
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $2
  i32.store $0 offset=552
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $2
  i32.load $0 offset=8
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=5
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3568
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  local.set $4
  local.get $0
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0485
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.get $8
    i32.add
    i32.load8_u $0
    local.set $12
    i32.const 3
    global.set $~argumentsLength
    local.get $12
    local.get $3
    local.get $2
    i32.const 3568
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $0
     local.get $6
     i32.add
     local.get $12
     i32.store8 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0485
   end
  end
  local.get $5
  local.get $6
  local.get $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=556
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Int16Array#constructor
  local.tee $2
  i32.store $0 offset=560
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=6
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 5
  i32.store16 $0 offset=10
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3600
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $4
  local.get $0
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 1
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0498
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $8
    local.get $3
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $12
    i32.const 3
    global.set $~argumentsLength
    local.get $12
    local.get $3
    local.get $2
    i32.const 3600
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $6
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     local.get $12
     i32.store16 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0498
   end
  end
  local.get $5
  local.get $6
  local.get $0
  i32.const 1
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=564
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $2
  i32.store $0 offset=568
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=6
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 5
  i32.store16 $0 offset=10
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3632
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $4
  local.get $0
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 1
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0511
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $8
    local.get $3
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $12
    i32.const 3
    global.set $~argumentsLength
    local.get $12
    local.get $3
    local.get $2
    i32.const 3632
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $6
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     local.get $12
     i32.store16 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0511
   end
  end
  local.get $5
  local.get $6
  local.get $0
  i32.const 1
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=572
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Int32Array#constructor
  local.tee $2
  i32.store $0 offset=576
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=20
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3664
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $4
  local.get $0
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0524
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $8
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $12
    i32.const 3
    global.set $~argumentsLength
    local.get $12
    local.get $3
    local.get $2
    i32.const 3664
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $6
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $12
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0524
   end
  end
  local.get $5
  local.get $6
  local.get $0
  i32.const 2
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=580
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $2
  i32.store $0 offset=584
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=20
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3696
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $4
  local.get $0
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0537
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $8
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $12
    i32.const 3
    global.set $~argumentsLength
    local.get $12
    local.get $3
    local.get $2
    i32.const 3696
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $6
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $12
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0537
   end
  end
  local.get $5
  local.get $6
  local.get $0
  i32.const 2
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=588
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Int64Array#constructor
  local.tee $2
  i32.store $0 offset=592
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=24
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 5
  i64.store $0 offset=40
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3728
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  local.get $0
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0550
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $8
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $9
    i32.const 3
    global.set $~argumentsLength
    local.get $9
    local.get $3
    local.get $2
    i32.const 3728
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i32)
    if
     local.get $6
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.get $9
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0550
   end
  end
  local.get $5
  local.get $6
  local.get $0
  i32.const 3
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=596
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 4
  i64.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 5
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $2
  i32.store $0 offset=600
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=24
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 5
  i64.store $0 offset=40
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3760
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  local.get $0
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0563
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $8
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $9
    i32.const 3
    global.set $~argumentsLength
    local.get $9
    local.get $3
    local.get $2
    i32.const 3760
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i32)
    if
     local.get $6
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.get $9
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0563
   end
  end
  local.get $5
  local.get $6
  local.get $0
  i32.const 3
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=604
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 4
  i64.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 5
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Float32Array#constructor
  local.tee $2
  i32.store $0 offset=608
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 4
  f32.store $0 offset=12
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 5
  f32.store $0 offset=20
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3792
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $4
  local.get $0
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0576
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $8
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $10
    i32.const 3
    global.set $~argumentsLength
    local.get $10
    local.get $3
    local.get $2
    i32.const 3792
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_i32)
    if
     local.get $6
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $10
     f32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0576
   end
  end
  local.get $5
  local.get $6
  local.get $0
  i32.const 2
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=612
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  f32.load $0
  f32.const 3
  f32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 4
  f32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 5
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Float64Array#constructor
  local.tee $2
  i32.store $0 offset=616
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 4
  f64.store $0 offset=24
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 5
  f64.store $0 offset=40
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 3824
  i32.store $0 offset=316
  local.get $1
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $4
  local.get $0
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0589
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $8
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $11
    i32.const 3
    global.set $~argumentsLength
    local.get $11
    local.get $3
    local.get $2
    i32.const 3824
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_i32)
    if
     local.get $6
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.get $11
     f64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0589
   end
  end
  local.get $5
  local.get $6
  local.get $0
  i32.const 3
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $2
  i32.store $0
  local.get $2
  if
   local.get $5
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.store $0 offset=8
  local.get $5
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $5
  i32.store $0 offset=620
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  f64.load $0
  f64.const 3
  f64.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 4
  f64.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 5
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=624
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3856
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0147
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 3856
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0147
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.0150 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3888
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0153
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 3888
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.0150
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0153
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=628
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3920
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0157
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 3920
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0157
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0160 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3952
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0163
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 3952
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0160
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0163
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=632
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0166 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3984
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0169
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 3984
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0166
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0169
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0172 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4016
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0175
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4016
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0172
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0175
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=636
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store16 $0 offset=4
  block $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4048
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
   loop $for-loop|0179
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4048
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0179
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.0182 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4080
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
   loop $for-loop|0185
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4080
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.0182
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0185
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=640
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store16 $0 offset=4
  block $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4112
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
   loop $for-loop|0189
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4112
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0189
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.0192 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4144
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
   loop $for-loop|0195
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4144
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.0192
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0195
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=644
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store $0 offset=8
  block $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4176
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0199
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4176
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0199
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.0202 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4208
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0206
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4208
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.0202
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0206
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=648
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store $0 offset=8
  block $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4240
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0211
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4240
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0211
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.0214 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4272
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0218
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $4
     local.get $1
     local.get $0
     i32.const 4272
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.0214
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0218
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=652
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 6
  i64.store $0 offset=16
  block $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4304
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0222
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $9
     local.get $1
     local.get $0
     i32.const 4304
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0222
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.0225 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4336
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0228
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $9
     local.get $1
     local.get $0
     i32.const 4336
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.0225
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0228
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=656
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 6
  i64.store $0 offset=16
  block $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4368
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0232
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $9
     local.get $1
     local.get $0
     i32.const 4368
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0232
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.0235 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4400
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0238
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $9
     local.get $1
     local.get $0
     i32.const 4400
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.0235
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0238
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=660
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 4
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 6
  f32.store $0 offset=8
  block $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4432
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0242
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $10
     local.get $1
     local.get $0
     i32.const 4432
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0242
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.0245 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4464
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0248
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $10
     local.get $1
     local.get $0
     i32.const 4464
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.0245
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0248
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=664
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 4
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 6
  f64.store $0 offset=16
  block $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4496
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0252
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $11
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $11
     local.get $1
     local.get $0
     i32.const 4496
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0252
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.0255 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4528
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0258
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $11
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $11
     local.get $1
     local.get $0
     i32.const 4528
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.0255
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0258
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=668
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 4560
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
   loop $for-loop|0262
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4560
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0262
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4592
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0265
   loop $for-loop|0268
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4592
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0265
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0268
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=672
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 4624
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
   loop $for-loop|0272
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4624
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0272
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4656
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0275
   loop $for-loop|0278
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4656
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0275
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0278
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=676
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 4688
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0281
   loop $for-loop|0284
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4688
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0281
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0284
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4720
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0287
   loop $for-loop|0290
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4720
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0287
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0290
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=680
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4752
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
   loop $for-loop|0294
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4752
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0294
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4784
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0297
   loop $for-loop|0300
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4784
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0297
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0300
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=684
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4816
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
   loop $for-loop|0304
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4816
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0304
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4848
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0307
   loop $for-loop|0310
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4848
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0307
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0310
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=688
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4880
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
   loop $for-loop|0314
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4880
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0314
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4912
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0317
   loop $for-loop|0320
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4912
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0317
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0320
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=692
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4944
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
   loop $for-loop|0324
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4944
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0324
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4976
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0327
   loop $for-loop|0330
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     local.get $4
     local.get $1
     local.get $0
     i32.const 4976
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0327
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0330
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=696
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5008
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
   loop $for-loop|0334
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     local.get $9
     local.get $1
     local.get $0
     i32.const 5008
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0334
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5040
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0337
   loop $for-loop|0340
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     local.get $9
     local.get $1
     local.get $0
     i32.const 5040
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0337
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0340
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=700
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5072
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
   loop $for-loop|0344
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     local.get $9
     local.get $1
     local.get $0
     i32.const 5072
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0344
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5104
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0347
   loop $for-loop|0350
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     local.get $9
     local.get $1
     local.get $0
     i32.const 5104
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0347
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0350
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=704
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 5136
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
   loop $for-loop|0354
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     local.get $10
     local.get $1
     local.get $0
     i32.const 5136
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0354
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5168
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0357
   loop $for-loop|0360
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     local.get $10
     local.get $1
     local.get $0
     i32.const 5168
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0357
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0360
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=708
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5200
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
   loop $for-loop|0365
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $11
     i32.const 3
     global.set $~argumentsLength
     local.get $11
     local.get $1
     local.get $0
     i32.const 5200
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0365
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5232
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0368
   loop $for-loop|0371
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $11
     i32.const 3
     global.set $~argumentsLength
     local.get $11
     local.get $1
     local.get $0
     i32.const 5232
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0368
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0371
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=712
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 5264
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
   loop $for-loop|0375
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5264
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0375
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5296
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0378
   loop $for-loop|0381
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5296
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0378
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0381
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=716
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 5328
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
   loop $for-loop|0385
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5328
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0385
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5360
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0388
   loop $for-loop|0392
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5360
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0388
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0392
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=720
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 5392
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0395
   loop $for-loop|0398
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5392
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0395
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0398
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5424
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0401
   loop $for-loop|0404
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5424
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0401
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0404
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=724
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 5456
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
   loop $for-loop|0408
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5456
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0408
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5488
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0411
   loop $for-loop|0414
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5488
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0411
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0414
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=728
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 5520
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
   loop $for-loop|0418
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5520
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0418
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5552
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0421
   loop $for-loop|0425
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5552
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0421
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0425
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=732
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 5584
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
   loop $for-loop|0429
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5584
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0429
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5616
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0432
   loop $for-loop|0435
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5616
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0432
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0435
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=736
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 5648
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
   loop $for-loop|0439
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5648
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0439
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5680
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0442
   loop $for-loop|0445
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $3
     i32.const 3
     global.set $~argumentsLength
     local.get $3
     local.get $1
     local.get $0
     i32.const 5680
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0442
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0445
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=740
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5712
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
   loop $for-loop|0449
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     local.get $9
     local.get $1
     local.get $0
     i32.const 5712
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0449
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5744
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0452
   loop $for-loop|0455
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     local.get $9
     local.get $1
     local.get $0
     i32.const 5744
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0452
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0455
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=744
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5776
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
   loop $for-loop|0460
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     local.get $9
     local.get $1
     local.get $0
     i32.const 5776
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0460
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5808
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0463
   loop $for-loop|0466
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     local.get $9
     local.get $1
     local.get $0
     i32.const 5808
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0463
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0466
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=748
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 5840
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
   loop $for-loop|0470
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     local.get $10
     local.get $1
     local.get $0
     i32.const 5840
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0470
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5872
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0473
   loop $for-loop|0476
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     local.get $10
     local.get $1
     local.get $0
     i32.const 5872
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0473
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0476
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=752
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5904
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
   loop $for-loop|0480
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $11
     i32.const 3
     global.set $~argumentsLength
     local.get $11
     local.get $1
     local.get $0
     i32.const 5904
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0480
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5936
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $1
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0483
   loop $for-loop|0486
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $11
     i32.const 3
     global.set $~argumentsLength
     local.get $11
     local.get $1
     local.get $0
     i32.const 5936
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0483
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $for-loop|0486
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=756
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5968
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0491
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 5968
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0491
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.0494 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6000
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0497
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6000
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.0494
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0497
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=760
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6032
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0501
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6032
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0501
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0504 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6064
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0507
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6064
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0504
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0507
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=764
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0510 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6096
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0513
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6096
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0510
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0513
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0516 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6128
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0519
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6128
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0516
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0519
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=768
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store16 $0 offset=4
  block $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6160
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
   loop $for-loop|0523
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6160
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0523
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.0526 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6192
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
   loop $for-loop|0529
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6192
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.0526
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0529
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=772
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store16 $0 offset=4
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6224
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
   loop $for-loop|0533
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6224
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0533
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.0536 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6256
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
   loop $for-loop|0539
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6256
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.0536
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0539
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=776
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store $0 offset=8
  block $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6288
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0543
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6288
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0543
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.0546 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6320
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0549
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6320
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.0546
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0549
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=780
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store $0 offset=8
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6352
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0553
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6352
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0553
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.0556 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6384
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0559
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $4
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $4
     local.get $1
     local.get $0
     i32.const 6384
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.0556
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0559
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=784
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 6
  i64.store $0 offset=16
  block $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6416
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0564
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $9
     local.get $1
     local.get $0
     i32.const 6416
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0564
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.0567 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6448
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0570
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $9
     local.get $1
     local.get $0
     i32.const 6448
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.0567
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0570
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=788
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 6
  i64.store $0 offset=16
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6480
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0574
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $9
     local.get $1
     local.get $0
     i32.const 6480
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0574
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.0577 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6512
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0580
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $9
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $9
     local.get $1
     local.get $0
     i32.const 6512
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.0577
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0580
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=792
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 4
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 6
  f32.store $0 offset=8
  block $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6544
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0584
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $10
     local.get $1
     local.get $0
     i32.const 6544
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0584
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.0587 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6576
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|0590
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $10
     local.get $1
     local.get $0
     i32.const 6576
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.0587
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0590
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=796
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 4
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 6
  f64.store $0 offset=16
  block $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6608
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0595
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $11
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $11
     local.get $1
     local.get $0
     i32.const 6608
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0595
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.0598 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6640
   i32.store $0 offset=316
   local.get $0
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $1
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $3
   loop $for-loop|0601
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $11
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $11
     local.get $1
     local.get $0
     i32.const 6640
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.0598
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0601
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=800
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.extend8_s
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store8 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.extend8_s
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store8 $0 offset=1
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.extend8_s
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6752
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  loop $for-loop|0605
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $2
    i32.add
    i32.load8_s $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $0
    i32.const 6752
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0605
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=808
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store8 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store8 $0 offset=1
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6784
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  loop $for-loop|0609
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $2
    i32.add
    i32.load8_u $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $0
    i32.const 6784
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0609
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=812
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 255
  local.get $2
  i32.sub
  i32.const 31
  i32.shr_s
  local.get $2
  i32.or
  local.get $2
  i32.const 31
  i32.shr_u
  i32.const -1
  i32.xor
  i32.and
  i32.store8 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 255
  local.get $2
  i32.sub
  i32.const 31
  i32.shr_s
  local.get $2
  i32.or
  local.get $2
  i32.const 31
  i32.shr_u
  i32.const -1
  i32.xor
  i32.and
  i32.store8 $0 offset=1
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 255
  local.get $2
  i32.sub
  i32.const 31
  i32.shr_s
  local.get $2
  i32.or
  local.get $2
  i32.const 31
  i32.shr_u
  i32.const -1
  i32.xor
  i32.and
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6816
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  local.set $3
  loop $for-loop|0615
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $2
    i32.add
    i32.load8_u $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $0
    i32.const 6816
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0615
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=816
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.extend16_s
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store16 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.extend16_s
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store16 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.extend16_s
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6848
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  loop $for-loop|0619
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $0
    i32.const 6848
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0619
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=820
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.const 65535
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store16 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.const 65535
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store16 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.const 65535
  i32.and
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6880
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  loop $for-loop|0623
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $0
    i32.const 6880
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0623
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=824
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6912
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  loop $for-loop|0627
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $0
    i32.const 6912
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0627
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=828
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6944
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  loop $for-loop|0631
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $0
    i32.const 6944
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0631
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=832
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0
  local.set $9
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $9
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0 offset=4
  local.set $9
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $9
  i64.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0 offset=8
  local.set $9
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 6976
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  loop $for-loop|0635
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $9
    i32.const 3
    global.set $~argumentsLength
    local.get $9
    local.get $1
    local.get $0
    i32.const 6976
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0635
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=836
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0
  local.set $9
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $9
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0 offset=4
  local.set $9
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $9
  i64.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0 offset=8
  local.set $9
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 7008
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  loop $for-loop|0639
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $9
    i32.const 3
    global.set $~argumentsLength
    local.get $9
    local.get $1
    local.get $0
    i32.const 7008
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0639
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=840
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  f32.convert_i32_s
  local.set $10
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $10
  f32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  f32.convert_i32_s
  local.set $10
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $10
  f32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  f32.convert_i32_s
  local.set $10
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $10
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 7040
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  loop $for-loop|0643
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $10
    i32.const 3
    global.set $~argumentsLength
    local.get $10
    local.get $1
    local.get $0
    i32.const 7040
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0643
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=844
  local.get $0
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  f64.convert_i32_s
  local.set $11
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $11
  f64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  f64.convert_i32_s
  local.set $11
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $11
  f64.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=804
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  f64.convert_i32_s
  local.set $11
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $11
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 7072
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  loop $for-loop|0647
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $11
    i32.const 3
    global.set $~argumentsLength
    local.get $11
    local.get $1
    local.get $0
    i32.const 7072
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_none)
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0647
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=848
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int8Array#constructor
  local.tee $1
  i32.store $0 offset=852
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Int8Array#constructor
  local.tee $3
  i32.store $0 offset=856
  i32.const 0
  local.set $0
  loop $for-loop|26
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend8_s
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $4
    i32.store8 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend8_s
    local.set $4
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $4
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|26
   end
  end
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|27
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|27
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $3
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Int8Array#subarray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=804
  local.get $0
  local.get $2
  call $~lib/typedarray/Int8Array#reverse
  local.tee $0
  i32.store $0 offset=860
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=3
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=864
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $1
  i32.store $0 offset=868
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $3
  i32.store $0 offset=872
  i32.const 0
  local.set $0
  loop $for-loop|28
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $4
    i32.store8 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $4
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $4
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|28
   end
  end
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|29
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|29
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $3
  i32.const 8
  call $~lib/typedarray/Uint8Array#subarray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=804
  local.get $0
  local.get $2
  call $~lib/typedarray/Int8Array#reverse
  local.tee $0
  i32.store $0 offset=876
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=3
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=880
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $1
  i32.store $0 offset=884
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $3
  i32.store $0 offset=888
  i32.const 0
  local.set $0
  loop $for-loop|30
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.const 255
    local.get $4
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $4
    i32.or
    local.get $4
    i32.const 31
    i32.shr_u
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $4
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.const 255
    local.get $4
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $4
    i32.or
    local.get $4
    i32.const 31
    i32.shr_u
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|30
   end
  end
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|31
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|31
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $3
  i32.const 8
  call $~lib/typedarray/Uint8ClampedArray#subarray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=804
  local.get $0
  local.get $2
  call $~lib/typedarray/Int8Array#reverse
  local.tee $0
  i32.store $0 offset=892
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=3
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=896
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int16Array#constructor
  local.tee $1
  i32.store $0 offset=900
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Int16Array#constructor
  local.tee $3
  i32.store $0 offset=904
  i32.const 0
  local.set $0
  loop $for-loop|32
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend16_s
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $4
    i32.store16 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend16_s
    local.set $4
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $4
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|32
   end
  end
  local.get $1
  call $~lib/typedarray/Int16Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|33
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|33
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $3
  i32.const 8
  call $~lib/typedarray/Int16Array#subarray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=804
  local.get $0
  local.get $2
  call $~lib/typedarray/Int16Array#reverse
  local.tee $0
  i32.store $0 offset=908
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=6
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=912
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $1
  i32.store $0 offset=916
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $3
  i32.store $0 offset=920
  i32.const 0
  local.set $0
  loop $for-loop|34
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $4
    i32.store16 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    local.set $4
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $4
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|34
   end
  end
  local.get $1
  call $~lib/typedarray/Int16Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|35
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|35
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $3
  i32.const 8
  call $~lib/typedarray/Uint16Array#subarray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=804
  local.get $0
  local.get $2
  call $~lib/typedarray/Int16Array#reverse
  local.tee $0
  i32.store $0 offset=924
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=6
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=928
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $1
  call $~lib/typedarray/Int32Array#constructor
  local.tee $3
  i32.store $0 offset=932
  global.get $~lib/memory/__stack_pointer
  local.get $1
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0 offset=936
  i32.const 0
  local.set $0
  loop $for-loop|36
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $2
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $2
    i32.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $2
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $2
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|36
   end
  end
  i32.const 0
  local.set $2
  local.get $3
  i32.load $0 offset=4
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|0
    local.get $2
    local.get $6
    i32.lt_u
    if
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $8
     i32.load $0
     local.set $12
     local.get $8
     local.get $0
     local.get $5
     local.get $2
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $8
     i32.load $0
     i32.store $0
     local.get $8
     local.get $12
     i32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $while-continue|0
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|37
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $2
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 7172
    i32.load $0
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|37
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $4
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Int32Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=804
  i32.const 0
  local.set $2
  local.get $1
  i32.load $0 offset=4
  local.set $3
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $5
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|027
    local.get $2
    local.get $5
    i32.lt_u
    if
     local.get $3
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     local.set $8
     local.get $6
     local.get $3
     local.get $4
     local.get $2
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     i32.store $0
     local.get $6
     local.get $8
     i32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $while-continue|027
    end
   end
  end
  local.get $0
  local.get $1
  i32.store $0 offset=940
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=12
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=944
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $1
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $3
  i32.store $0 offset=948
  global.get $~lib/memory/__stack_pointer
  local.get $1
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0 offset=952
  i32.const 0
  local.set $0
  loop $for-loop|38
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $2
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $2
    i32.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $2
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $2
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|38
   end
  end
  i32.const 0
  local.set $2
  local.get $3
  i32.load $0 offset=4
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|029
    local.get $2
    local.get $6
    i32.lt_u
    if
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $8
     i32.load $0
     local.set $12
     local.get $8
     local.get $0
     local.get $5
     local.get $2
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $8
     i32.load $0
     i32.store $0
     local.get $8
     local.get $12
     i32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $while-continue|029
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|39
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $2
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 7172
    i32.load $0
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|39
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $4
  i32.const 8
  call $~lib/typedarray/Uint32Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=804
  i32.const 0
  local.set $2
  local.get $1
  i32.load $0 offset=4
  local.set $3
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $5
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|031
    local.get $2
    local.get $5
    i32.lt_u
    if
     local.get $3
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     local.set $8
     local.get $6
     local.get $3
     local.get $4
     local.get $2
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     i32.store $0
     local.get $6
     local.get $8
     i32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $while-continue|031
    end
   end
  end
  local.get $0
  local.get $1
  i32.store $0 offset=956
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i32.load $0 offset=12
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=960
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int64Array#constructor
  local.tee $1
  i32.store $0 offset=964
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Int64Array#constructor
  local.tee $3
  i32.store $0 offset=968
  i32.const 0
  local.set $0
  loop $for-loop|40
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $9
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    i64.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $9
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|40
   end
  end
  i32.const 0
  local.set $0
  local.get $1
  i32.load $0 offset=4
  local.set $4
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|032
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     i64.load $0
     local.set $9
     local.get $8
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     i64.load $0
     i64.store $0
     local.get $8
     local.get $9
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|032
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|41
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    i64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|41
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $2
  local.get $3
  i32.const 8
  call $~lib/typedarray/Int64Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=804
  i32.const 0
  local.set $0
  local.get $1
  i32.load $0 offset=4
  local.set $3
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $5
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|034
    local.get $0
    local.get $5
    i32.lt_u
    if
     local.get $3
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     i64.load $0
     local.set $9
     local.get $6
     local.get $3
     local.get $4
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     i64.load $0
     i64.store $0
     local.get $6
     local.get $9
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|034
    end
   end
  end
  local.get $2
  local.get $1
  i32.store $0 offset=972
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0
  i64.const 8
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 7
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 6
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=24
  i64.const 5
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=976
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $1
  i32.store $0 offset=980
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $3
  i32.store $0 offset=984
  i32.const 0
  local.set $0
  loop $for-loop|42
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $9
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    i64.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $9
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|42
   end
  end
  i32.const 0
  local.set $0
  local.get $1
  i32.load $0 offset=4
  local.set $4
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|036
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     i64.load $0
     local.set $9
     local.get $8
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     i64.load $0
     i64.store $0
     local.get $8
     local.get $9
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|036
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|43
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    i64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|43
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $2
  local.get $3
  i32.const 8
  call $~lib/typedarray/Uint64Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=804
  i32.const 0
  local.set $0
  local.get $1
  i32.load $0 offset=4
  local.set $3
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $5
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|038
    local.get $0
    local.get $5
    i32.lt_u
    if
     local.get $3
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     i64.load $0
     local.set $9
     local.get $6
     local.get $3
     local.get $4
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     i64.load $0
     i64.store $0
     local.get $6
     local.get $9
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|038
    end
   end
  end
  local.get $2
  local.get $1
  i32.store $0 offset=988
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0
  i64.const 8
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 7
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 6
  i64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.load $0 offset=24
  i64.const 5
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=992
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Float32Array#constructor
  local.tee $1
  i32.store $0 offset=996
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Float32Array#constructor
  local.tee $3
  i32.store $0 offset=1000
  i32.const 0
  local.set $0
  loop $for-loop|44
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    local.set $10
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $10
    f32.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    local.set $10
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $10
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|44
   end
  end
  i32.const 0
  local.set $0
  local.get $1
  i32.load $0 offset=4
  local.set $4
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|039
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.tee $8
     f32.load $0
     local.set $10
     local.get $8
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $8
     f32.load $0
     f32.store $0
     local.get $8
     local.get $10
     f32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|039
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|45
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    f32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|45
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $2
  local.get $3
  i32.const 8
  call $~lib/typedarray/Float32Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=804
  i32.const 0
  local.set $0
  local.get $1
  i32.load $0 offset=4
  local.set $3
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $5
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|041
    local.get $0
    local.get $5
    i32.lt_u
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     f32.load $0
     local.set $10
     local.get $6
     local.get $3
     local.get $4
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     f32.load $0
     f32.store $0
     local.get $6
     local.get $10
     f32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|041
    end
   end
  end
  local.get $2
  local.get $1
  i32.store $0 offset=1004
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.load $0
  f32.const 8
  f32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 7
  f32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 6
  f32.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.load $0 offset=12
  f32.const 5
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7168
  i32.store $0 offset=1008
  local.get $0
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Float64Array#constructor
  local.tee $1
  i32.store $0 offset=1012
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0 offset=1016
  i32.const 0
  local.set $0
  loop $for-loop|46
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    local.set $11
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $11
    f64.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    local.set $11
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $11
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|46
   end
  end
  i32.const 0
  local.set $0
  local.get $1
  i32.load $0 offset=4
  local.set $4
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|042
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     f64.load $0
     local.set $11
     local.get $8
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     f64.load $0
     f64.store $0
     local.get $8
     local.get $11
     f64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|042
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|47
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    f64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|47
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $2
  local.get $3
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Float64Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=804
  i32.const 0
  local.set $0
  local.get $1
  i32.load $0 offset=4
  local.set $3
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $5
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|044
    local.get $0
    local.get $5
    i32.lt_u
    if
     local.get $3
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     f64.load $0
     local.set $11
     local.get $6
     local.get $3
     local.get $4
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     f64.load $0
     f64.store $0
     local.get $6
     local.get $11
     f64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|044
    end
   end
  end
  local.get $2
  local.get $1
  i32.store $0 offset=1020
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.load $0
  f64.const 8
  f64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 7
  f64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 6
  f64.ne
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.load $0 offset=24
  f64.const 5
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1024
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int8Array#constructor
  local.tee $1
  i32.store $0 offset=1028
  i32.const 0
  local.set $0
  loop $for-loop|48
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend8_s
    local.set $3
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $3
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|48
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|045
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.047
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.047
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|048
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.047
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.050
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.050
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|051
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.050
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.053
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.053
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|054
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.053
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.056
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.056
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|057
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.056
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.059
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.059
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|060
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.059
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.062
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.062
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|063
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.062
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.065
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.065
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|066
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.065
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|066
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.068
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.068
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|069
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.068
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|069
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   local.get $0
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $0
   local.get $0
   local.get $3
   i32.ge_s
   select
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|00
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|00
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.05
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.05
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|06
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.05
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|06
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.011
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.011
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|012
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.011
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|012
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.017
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.017
   local.get $2
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $2
   local.get $2
   local.get $3
   i32.ge_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|018
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.tee $0
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.017
     local.get $0
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|018
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|070
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|070
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.072
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.072
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|073
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.072
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|073
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.075
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.075
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|076
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.075
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|076
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.078
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.078
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|079
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.078
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|079
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.081
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.081
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|082
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.081
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|082
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.084
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.084
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|085
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.084
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|085
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Int8Array#subarray
  local.tee $1
  i32.store $0 offset=1032
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.087
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.087
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|088
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.087
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|088
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.090
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.090
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|091
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.090
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|091
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.093
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.093
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|094
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.093
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|094
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.096
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.096
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|097
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.096
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|097
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.099
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.099
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0100
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.099
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0100
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0102
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0102
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0103
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0102
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0103
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0105
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0105
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0106
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0105
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0106
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0108
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0108
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0109
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0108
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0109
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1036
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $1
  i32.store $0 offset=1040
  i32.const 0
  local.set $0
  loop $for-loop|49
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $3
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $3
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|49
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0110
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0110
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0112
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0112
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0113
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0112
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0113
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0115
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0115
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0116
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0115
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0116
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0118
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0118
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0119
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0118
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0119
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0121
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0121
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0122
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0121
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0122
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0124
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0124
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0125
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0124
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0125
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0127
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0127
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0128
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0127
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0128
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0130
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0130
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0131
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0130
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0131
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0133
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0133
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0134
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0133
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0134
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $0
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $0
   local.get $0
   local.get $3
   i32.ge_s
   select
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|023
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.028
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.028
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|030
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.028
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|037
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|037
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.042
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.042
   local.get $2
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $2
   local.get $2
   local.get $3
   i32.ge_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|043
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.tee $0
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.042
     local.get $0
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|043
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0135
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0135
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0137
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0137
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0138
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0137
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0138
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0140
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0140
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0141
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0140
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0141
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0143
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0143
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0144
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0143
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0144
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0146
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0146
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0147
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0146
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0147
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0149
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0149
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0150
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0149
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0150
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 9
  call $~lib/typedarray/Uint8Array#subarray
  local.tee $1
  i32.store $0 offset=1044
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0152
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0152
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0153
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0152
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0153
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0155
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0155
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0156
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0155
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0156
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0158
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0158
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0159
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0158
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0159
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0161
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0161
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0162
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0161
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0162
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0164
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0164
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0165
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0164
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0165
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0167
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0167
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0168
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0167
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0168
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0170
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0170
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0171
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0170
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0171
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0173
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0173
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0174
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0173
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0174
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1048
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $1
  i32.store $0 offset=1052
  i32.const 0
  local.set $0
  loop $for-loop|50
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $3
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.const 255
    local.get $3
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $3
    i32.or
    local.get $3
    i32.const 31
    i32.shr_u
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|50
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0176
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0176
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0177
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0176
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0177
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0179
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0179
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0180
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0179
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0180
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0182
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0182
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0183
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0182
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0183
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0185
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0185
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0186
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0185
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0186
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0188
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0188
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0189
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0188
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0189
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0191
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0191
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0192
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0191
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0192
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0194
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0194
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0195
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0194
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0195
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0197
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0197
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0198
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0197
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0198
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0200
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0200
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0201
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0200
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0201
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.049
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.049
   local.get $0
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $0
   local.get $0
   local.get $3
   i32.ge_s
   select
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|050
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.049
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|050
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.055
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.055
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|056
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.055
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|056
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.061
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.061
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|062
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.tee $2
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.061
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|062
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.067
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.067
   local.get $2
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $2
   local.get $2
   local.get $3
   i32.ge_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|068
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.tee $0
     local.get $3
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.067
     local.get $0
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|068
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0203
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0203
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0204
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0203
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0204
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0206
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0206
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0207
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0206
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0207
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0209
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0209
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0210
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0209
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0210
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0212
   local.get $1
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0212
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0213
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0212
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0213
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0215
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0215
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0216
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0215
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0216
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0218
   local.get $1
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0218
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0219
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0218
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0219
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 9
  call $~lib/typedarray/Uint8ClampedArray#subarray
  local.tee $1
  i32.store $0 offset=1056
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0221
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0221
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0222
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0221
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0222
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0224
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0224
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0225
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0224
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0225
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0227
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0227
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0228
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0227
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0228
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0230
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0230
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0231
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0230
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0231
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0233
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0233
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0234
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0233
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0234
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0236
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0236
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0237
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0236
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0237
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0239
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0239
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0240
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0239
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0240
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0242
   local.get $1
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0242
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0243
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0242
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0243
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1060
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int16Array#constructor
  local.tee $1
  i32.store $0 offset=1064
  i32.const 0
  local.set $0
  loop $for-loop|51
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend16_s
    local.set $3
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|51
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0244
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0244
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0246
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0246
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0247
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0246
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0247
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0249
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0249
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0250
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 65535
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0249
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0250
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0252
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0252
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0253
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0252
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0253
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0255
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0255
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0256
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0255
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0256
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0258
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0258
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0259
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0258
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0259
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0261
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0261
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0262
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0261
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0262
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0264
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0264
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0265
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0264
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0265
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0267
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0267
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0268
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0267
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0268
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const 11
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const -1
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const 3
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0269
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0269
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0271
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0271
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0272
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0271
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0272
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0274
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0274
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0275
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0274
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0275
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0277
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0277
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0278
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0277
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0278
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0280
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0280
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0281
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0280
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0281
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0283
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0283
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0284
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0283
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0284
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 9
  call $~lib/typedarray/Int16Array#subarray
  local.tee $1
  i32.store $0 offset=1068
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0286
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0286
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0287
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0286
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0287
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0289
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0289
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0290
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0289
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0290
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0292
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0292
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0293
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0292
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0293
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0295
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0295
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0296
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0295
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0296
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0298
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0298
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0299
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0298
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0299
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0301
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0301
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0302
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0301
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0302
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0304
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0304
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0305
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0304
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0305
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0307
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0307
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0308
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0307
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0308
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1072
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $1
  i32.store $0 offset=1076
  i32.const 0
  local.set $0
  loop $for-loop|52
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    local.set $3
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|52
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0309
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0309
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0311
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0311
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0312
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0311
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0312
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0314
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0314
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0315
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 65535
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0314
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0315
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0317
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0317
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0318
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0317
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0318
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0320
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0320
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0321
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0320
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0321
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0323
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0323
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0324
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0323
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0324
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0326
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0326
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0327
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0326
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0327
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0329
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0329
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0330
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0329
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0330
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0332
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0332
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0333
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0332
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0333
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const 11
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const -1
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const 3
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0334
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0334
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0336
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0336
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0337
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0336
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0337
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0339
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0339
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0340
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0339
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0340
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0342
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0342
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0343
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0342
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0343
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0345
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0345
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0346
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0345
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0346
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0348
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0348
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0349
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0348
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0349
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 9
  call $~lib/typedarray/Uint16Array#subarray
  local.tee $1
  i32.store $0 offset=1080
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0351
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0351
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0352
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0351
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0352
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0354
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0354
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0355
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0354
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0355
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0357
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0357
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0358
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0357
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0358
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0360
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0360
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0361
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0360
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0361
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0363
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0363
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0364
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0363
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0364
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0366
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0366
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0367
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0366
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0367
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0369
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0369
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0370
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0369
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0370
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0372
   local.get $1
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0372
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0373
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0372
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0373
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1084
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int32Array#constructor
  local.tee $1
  i32.store $0 offset=1088
  i32.const 0
  local.set $0
  loop $for-loop|53
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $3
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $3
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|53
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0374
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0374
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0376
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0376
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0377
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0376
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0377
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0379
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0379
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0380
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const -1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0379
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0380
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0382
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0382
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0383
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0382
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0383
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0385
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0385
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0386
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0385
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0386
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0388
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0388
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0389
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0388
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0389
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0391
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0391
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0392
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0391
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0392
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0394
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0394
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0395
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0394
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0395
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0397
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0397
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0398
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0397
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0398
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $4
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   i32.const -1
   local.get $1
   local.tee $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
   drop
   local.get $2
   local.get $4
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $4
   local.get $2
   local.get $4
   i32.le_s
   select
   local.get $4
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|01
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
     drop
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|01
    end
   end
   i32.const -1
  end
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $5
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.06 (result i32)
   i32.const -1
   local.get $1
   local.tee $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.06
   drop
   local.get $2
   local.get $5
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $5
   local.get $2
   local.get $5
   i32.le_s
   select
   local.get $5
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|07
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.06
     drop
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|07
    end
   end
   i32.const -1
  end
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $6
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.012 (result i32)
   i32.const -1
   local.get $1
   local.tee $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.012
   drop
   local.get $2
   local.get $6
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $6
   local.get $2
   local.get $6
   i32.le_s
   select
   local.get $6
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|013
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const -1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.012
     drop
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|013
    end
   end
   i32.const -1
  end
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $8
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.018 (result i32)
   i32.const -1
   local.get $1
   local.tee $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.018
   drop
   local.get $2
   local.get $8
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $8
   local.get $2
   local.get $8
   i32.le_s
   select
   local.get $8
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|019
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.018
     drop
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|019
    end
   end
   i32.const -1
  end
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.020
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.020
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0399
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.020
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0399
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0401
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0401
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0402
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0401
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0402
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0404
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0404
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0405
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0404
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0405
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0407
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0407
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0408
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0407
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0408
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0410
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0410
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0411
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0410
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0411
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0413
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0413
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0414
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0413
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0414
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Int32Array#subarray
  local.tee $1
  i32.store $0 offset=1092
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0416
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0416
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0417
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0416
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0417
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0419
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0419
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0420
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0419
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0420
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0422
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0422
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0423
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0422
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0423
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0425
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0425
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0426
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0425
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0426
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0428
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0428
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0429
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0428
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0429
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0431
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0431
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0432
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0431
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0432
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0434
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0434
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0435
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0434
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0435
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0437
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0437
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0438
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0437
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0438
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1096
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $1
  i32.store $0 offset=1100
  i32.const 0
  local.set $0
  loop $for-loop|54
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $3
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $3
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|54
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0439
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0439
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0441
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0441
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0442
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0441
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0442
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0444
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0444
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0445
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const -1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0444
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0445
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0447
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0447
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0448
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0447
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0448
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0450
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0450
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0451
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0450
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0451
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0453
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0453
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0454
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0453
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0454
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0456
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0456
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0457
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0456
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0457
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0459
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0459
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0460
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0459
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0460
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0462
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0462
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0463
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0462
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0463
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   i32.const -1
   local.get $1
   local.tee $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
   drop
   local.get $2
   i32.const 1
   i32.sub
   local.get $3
   local.get $2
   local.get $3
   i32.le_s
   select
   local.set $2
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|024
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
     drop
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|024
    end
   end
   i32.const -1
  end
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.029 (result i32)
   i32.const -1
   local.get $1
   local.tee $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.029
   drop
   local.get $2
   i32.const 1
   i32.sub
   local.get $3
   local.get $2
   local.get $3
   i32.le_s
   select
   local.set $2
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|033
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.029
     drop
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|033
    end
   end
   i32.const -1
  end
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.038 (result i32)
   i32.const -1
   local.get $1
   local.tee $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.038
   drop
   local.get $2
   i32.const 1
   i32.sub
   local.get $3
   local.get $2
   local.get $3
   i32.le_s
   select
   local.set $2
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|040
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const -1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.038
     drop
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|040
    end
   end
   i32.const -1
  end
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.045 (result i32)
   i32.const -1
   local.get $1
   local.tee $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.045
   drop
   local.get $2
   i32.const 1
   i32.sub
   local.get $3
   local.get $2
   local.get $3
   i32.le_s
   select
   local.set $2
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|046
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.045
     drop
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|046
    end
   end
   i32.const -1
  end
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.047
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.047
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0464
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.047
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0464
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0466
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0466
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0467
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0466
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0467
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0469
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0469
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0470
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0469
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0470
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0472
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0472
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0473
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0472
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0473
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0475
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0475
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0476
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0475
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0476
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0478
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0478
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0479
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0478
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0479
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 9
  call $~lib/typedarray/Uint32Array#subarray
  local.tee $1
  i32.store $0 offset=1104
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0481
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0481
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0482
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0481
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0482
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0484
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0484
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0485
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0484
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0485
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0487
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0487
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0488
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0487
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0488
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0490
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0490
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0491
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0490
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0491
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0493
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0493
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0494
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0493
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0494
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0496
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0496
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0497
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0496
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0497
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0499
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0499
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0500
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0499
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0500
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0502
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0502
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0503
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0502
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0503
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1108
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int64Array#constructor
  local.tee $1
  i32.store $0 offset=1112
  i32.const 0
  local.set $0
  loop $for-loop|55
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $9
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|55
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0504
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0504
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0506
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0506
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0507
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0506
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0507
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0509
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0509
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0510
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const -1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0509
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0510
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0512
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0512
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0513
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0512
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0513
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0515
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0515
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0516
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0515
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0516
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0518
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0518
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0519
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0518
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0519
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0521
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0521
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0522
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0521
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0522
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0524
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0524
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0525
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0524
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0525
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0527
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0527
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0528
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0527
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0528
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   local.get $0
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $0
   local.get $0
   local.get $3
   i32.ge_s
   select
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|072
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|072
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.077
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.077
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|078
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.077
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|078
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.083
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.083
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|084
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const -1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.083
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|084
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.089
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.089
   local.get $2
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $2
   local.get $2
   local.get $3
   i32.ge_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|090
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $2
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.089
     local.get $0
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|090
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.091
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.091
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0529
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.091
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0529
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0531
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0531
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0532
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0531
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0532
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0534
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0534
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0535
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0534
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0535
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0537
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0537
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0538
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0537
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0538
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0540
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0540
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0541
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0540
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0541
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0543
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0543
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0544
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0543
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0544
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 9
  call $~lib/typedarray/Int64Array#subarray
  local.tee $1
  i32.store $0 offset=1116
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0546
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0546
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0547
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0546
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0547
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0549
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0549
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0550
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 4
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0549
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0550
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0552
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0552
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0553
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0552
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0553
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0555
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0555
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0556
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 9
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0555
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0556
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0558
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0558
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0559
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 10
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0558
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0559
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0561
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0561
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0562
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0561
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0562
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0564
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0564
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0565
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0564
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0565
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0567
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0567
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0568
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0567
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0568
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1120
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $1
  i32.store $0 offset=1124
  i32.const 0
  local.set $0
  loop $for-loop|56
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $9
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|56
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0569
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0569
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0571
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0571
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0572
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0571
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0572
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0574
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0574
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0575
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const -1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0574
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0575
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0577
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0577
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0578
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0577
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0578
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0580
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0580
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0581
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0580
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0581
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0583
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0583
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0584
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0583
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0584
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0586
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0586
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0587
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0586
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0587
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0589
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0589
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0590
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0589
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0590
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0592
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0592
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0593
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0592
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0593
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   local.get $0
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $0
   local.get $0
   local.get $3
   i32.ge_s
   select
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|095
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|095
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0100
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0100
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0101
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0100
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0101
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0106
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0106
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0107
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const -1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0106
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0107
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0112
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0112
   local.get $2
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $2
   local.get $2
   local.get $3
   i32.ge_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0114
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $2
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0112
     local.get $0
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|0114
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0115
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0115
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0594
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0115
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0594
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0596
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0596
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0597
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0596
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0597
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0599
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0599
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0600
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0599
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0600
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0602
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0602
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0603
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0602
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0603
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0605
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0605
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0606
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0605
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0606
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0608
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0608
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0609
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0608
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0609
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 9
  call $~lib/typedarray/Uint64Array#subarray
  local.tee $1
  i32.store $0 offset=1128
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0611
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0611
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0612
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0611
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0612
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0614
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0614
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0615
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 4
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0614
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0615
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0617
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0617
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0618
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0617
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0618
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0620
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0620
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0621
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 9
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0620
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0621
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0623
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0623
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0624
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 10
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0623
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0624
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0626
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0626
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0627
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0626
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0627
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0629
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0629
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0630
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0629
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0630
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0632
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0632
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0633
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0632
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0633
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1132
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Float32Array#constructor
  local.tee $1
  i32.store $0 offset=1136
  i32.const 0
  local.set $0
  loop $for-loop|57
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    local.set $10
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $10
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|57
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0634
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 0
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0634
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0636
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0636
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0637
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 11
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0636
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0637
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0639
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0639
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0640
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const -1
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0639
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0640
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0642
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0642
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0643
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0642
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0643
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0645
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0645
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0646
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0645
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0646
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0648
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0648
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0649
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0648
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0649
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0651
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0651
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0652
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0651
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0652
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0654
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0654
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0655
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0654
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0655
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0657
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0657
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0658
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0657
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0658
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $0
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $0
   local.get $0
   local.get $3
   i32.ge_s
   select
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0120
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 0
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0120
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0125
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0125
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0126
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 11
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0125
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0126
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0131
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0131
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0132
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const -1
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0131
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0132
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0137
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0137
   local.get $2
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $2
   local.get $2
   local.get $3
   i32.ge_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0139
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $2
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0137
     local.get $0
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|0139
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0140
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0140
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0659
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0140
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0659
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0661
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0661
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0662
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0661
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0662
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0664
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0664
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0665
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0664
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0665
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0667
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0667
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0668
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0667
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0668
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0670
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0670
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0671
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0670
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0671
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0673
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0673
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0674
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0673
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0674
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 9
  call $~lib/typedarray/Float32Array#subarray
  local.tee $1
  i32.store $0 offset=1140
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0676
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0676
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0677
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0676
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0677
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0679
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0679
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0680
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 4
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0679
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0680
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0682
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0682
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0683
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 5
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0682
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0683
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0685
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0685
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0686
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 9
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0685
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0686
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0688
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0688
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0689
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 10
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0688
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0689
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0691
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0691
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0692
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 11
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0691
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0692
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0694
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0694
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0695
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 5
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0694
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0695
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0697
   local.get $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0697
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0698
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 5
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0697
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0698
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7280
  i32.store $0 offset=1144
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Float64Array#constructor
  local.tee $1
  i32.store $0 offset=1148
  i32.const 0
  local.set $0
  loop $for-loop|58
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    local.set $11
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $11
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|58
   end
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0699
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 0
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0699
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0701
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0701
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0702
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 11
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0701
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0702
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0704
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0704
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0705
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const -1
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0704
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0705
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0707
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0707
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0708
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0707
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0708
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0710
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0710
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0711
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0710
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0711
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0713
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0713
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0714
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0713
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0714
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0716
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0716
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0717
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0716
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0717
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0719
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0719
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0720
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0719
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0720
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0722
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0722
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0723
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0722
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0723
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $0
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $0
   local.get $0
   local.get $3
   i32.ge_s
   select
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0145
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 0
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0145
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0150
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0150
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0151
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 11
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0150
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0151
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0156
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0156
   local.get $0
   local.get $0
   i32.add
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0157
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const -1
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0156
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0157
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0162
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0162
   local.get $2
   local.get $3
   i32.add
   local.get $3
   i32.const 1
   i32.sub
   local.get $2
   local.get $2
   local.get $3
   i32.ge_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $2
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0163
    local.get $2
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $2
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0162
     local.get $0
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|0163
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0164
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0164
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0724
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0164
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0724
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0726
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0726
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0727
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0726
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0727
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0729
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0729
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0730
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0729
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0730
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0732
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0732
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_u
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0733
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0732
     local.get $2
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0733
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0735
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0735
   local.get $2
   i32.const 10
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0736
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0735
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0736
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0738
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0738
   local.get $2
   i32.const 11
   i32.sub
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0739
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0738
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|0739
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Float64Array#subarray
  local.tee $1
  i32.store $0 offset=1152
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0741
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0741
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0742
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0741
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0742
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0744
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0744
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0745
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 4
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0744
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0745
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0747
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0747
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0748
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 5
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0747
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0748
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0750
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0750
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0751
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 9
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0750
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0751
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0753
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0753
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0754
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 10
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0753
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0754
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0756
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0756
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0757
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 11
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0756
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0757
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0759
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0759
   local.get $1
   i32.load $0 offset=4
   local.set $4
   loop $while-continue|0760
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $4
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 5
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0759
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0760
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $2
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0762
   local.get $1
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0762
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|0763
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $1
     local.get $0
     local.tee $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 5
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0762
     local.get $2
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0763
    end
   end
   i32.const -1
   local.set $2
  end
  local.get $2
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 1
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0 offset=1156
  i32.const 0
  local.set $1
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const nan:0x8000000000000
  f64.store $0
  i32.const 0
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0765
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0765
   local.get $3
   i32.load $0 offset=4
   local.set $5
   loop $while-continue|0766
    local.get $2
    local.get $4
    i32.lt_s
    if
     local.get $5
     local.get $2
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const nan:0x8000000000000
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0765
     local.get $0
     i32.const 1
     i32.add
     local.set $2
     br $while-continue|0766
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  block $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   i32.const 0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   local.tee $2
   local.get $2
   i32.or
   br_if $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0
   drop
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0767
    local.get $0
    local.get $1
    i32.gt_s
    if
     i32.const 1
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.tee $11
     local.get $11
     f64.ne
     br_if $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0767
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 1
  call $~lib/typedarray/Float32Array#constructor
  local.tee $3
  i32.store $0 offset=1160
  i32.const 0
  local.set $1
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const nan:0x400000
  f32.store $0
  i32.const 0
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0769
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0769
   local.get $3
   i32.load $0 offset=4
   local.set $5
   loop $while-continue|0770
    local.get $2
    local.get $4
    i32.lt_s
    if
     local.get $5
     local.get $2
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const nan:0x400000
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0769
     local.get $0
     i32.const 1
     i32.add
     local.set $2
     br $while-continue|0770
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  block $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   i32.const 0
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   local.tee $2
   local.get $2
   i32.or
   br_if $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0
   drop
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0652771
    local.get $0
    local.get $1
    i32.gt_s
    if
     i32.const 1
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.tee $10
     local.get $10
     f32.ne
     br_if $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0652771
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  i32.store $0 offset=1164
  i32.const 2
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $0
  i32.store $0 offset=1168
  local.get $0
  i32.load $0 offset=8
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 2
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  i32.store $0 offset=1164
  i32.const 2
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 2
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $0
  i32.store $0 offset=1168
  local.get $0
  i32.load $0 offset=8
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1172
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Int8Array#constructor
  local.tee $2
  i32.store $0 offset=1176
  i32.const 0
  local.set $1
  loop $for-loop|59
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend8_s
    local.set $3
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    local.get $3
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|59
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1180
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.set $5
  local.get $4
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $4
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $5
  i32.store $0 offset=8
  local.get $4
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $4
  i32.store $0 offset=1184
  i32.const 0
  local.set $1
  loop $for-loop|60
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_s $0
    local.get $4
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|60
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1188
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1192
  i32.const 0
  local.set $1
  loop $for-loop|61
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $3
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    local.get $3
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|61
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1196
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $3
  i32.store $0 offset=1200
  i32.const 0
  local.set $1
  loop $for-loop|62
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $3
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $3
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|62
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1204
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $2
  i32.store $0 offset=1208
  i32.const 0
  local.set $1
  loop $for-loop|63
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $3
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.const 255
    local.get $3
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $3
    i32.or
    local.get $3
    i32.const 31
    i32.shr_u
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|63
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1212
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.set $5
  local.get $4
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $4
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $5
  i32.store $0 offset=8
  local.get $4
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $4
  i32.store $0 offset=1216
  i32.const 0
  local.set $1
  loop $for-loop|64
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $4
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|64
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1220
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Int16Array#constructor
  local.tee $2
  i32.store $0 offset=1224
  i32.const 0
  local.set $1
  loop $for-loop|65
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend16_s
    local.set $3
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|65
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1228
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $4
  i32.const 1
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $5
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $4
  i32.store $0 offset=8
  local.get $5
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $5
  i32.store $0 offset=1232
  i32.const 0
  local.set $1
  loop $for-loop|66
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $5
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.shl
    local.tee $3
    local.get $2
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|66
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1236
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $2
  i32.store $0 offset=1240
  i32.const 0
  local.set $1
  loop $for-loop|67
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    local.set $3
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|67
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1244
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $4
  i32.const 1
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $5
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $4
  i32.store $0 offset=8
  local.get $5
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $5
  i32.store $0 offset=1248
  i32.const 0
  local.set $1
  loop $for-loop|68
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $5
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.shl
    local.tee $3
    local.get $2
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|68
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1252
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Int32Array#constructor
  local.tee $2
  i32.store $0 offset=1256
  i32.const 0
  local.set $1
  loop $for-loop|69
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $3
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $3
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|69
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1260
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $4
  i32.const 3
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $5
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $4
  i32.store $0 offset=8
  local.get $5
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $5
  i32.store $0 offset=1264
  i32.const 0
  local.set $1
  loop $for-loop|70
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $5
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $3
    local.get $2
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|70
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1268
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $2
  i32.store $0 offset=1272
  i32.const 0
  local.set $1
  loop $for-loop|71
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $3
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $3
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|71
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1276
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $4
  i32.const 3
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $5
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $4
  i32.store $0 offset=8
  local.get $5
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $5
  i32.store $0 offset=1280
  i32.const 0
  local.set $1
  loop $for-loop|72
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $5
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $3
    local.get $2
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|72
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1284
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Int64Array#constructor
  local.tee $2
  i32.store $0 offset=1288
  i32.const 0
  local.set $1
  loop $for-loop|73
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $9
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|73
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1292
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $4
  i32.const 7
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $5
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $4
  i32.store $0 offset=8
  local.get $5
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $5
  i32.store $0 offset=1296
  i32.const 0
  local.set $1
  loop $for-loop|74
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $5
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 3
    i32.shl
    local.tee $3
    local.get $2
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|74
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1300
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $2
  i32.store $0 offset=1304
  i32.const 0
  local.set $1
  loop $for-loop|75
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $9
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|75
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1308
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $4
  i32.const 7
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $5
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $4
  i32.store $0 offset=8
  local.get $5
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $5
  i32.store $0 offset=1312
  i32.const 0
  local.set $1
  loop $for-loop|76
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $5
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 3
    i32.shl
    local.tee $3
    local.get $2
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|76
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1316
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Float32Array#constructor
  local.tee $2
  i32.store $0 offset=1320
  i32.const 0
  local.set $1
  loop $for-loop|77
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    local.set $10
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $10
    f32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|77
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1324
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $4
  i32.const 3
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $5
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $4
  i32.store $0 offset=8
  local.get $5
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $5
  i32.store $0 offset=1328
  i32.const 0
  local.set $1
  loop $for-loop|78
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $5
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $3
    local.get $2
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|78
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 7392
  i32.store $0 offset=1332
  local.get $0
  i32.const 7404
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Float64Array#constructor
  local.tee $2
  i32.store $0 offset=1336
  i32.const 0
  local.set $1
  loop $for-loop|79
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    local.set $11
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $11
    f64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|79
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $3
  i32.store $0 offset=804
  local.get $1
  local.get $3
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $1
  local.get $2
  i32.load $0 offset=8
  local.get $1
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $1
  i32.store $0 offset=1340
  global.get $~lib/memory/__stack_pointer
  local.set $3
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $4
  i32.const 7
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $5
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $4
  i32.store $0 offset=8
  local.get $5
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
  local.get $5
  i32.store $0 offset=1344
  i32.const 0
  local.set $1
  loop $for-loop|80
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    local.get $5
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 3
    i32.shl
    local.tee $3
    local.get $2
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|80
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1348
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1352
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=1356
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Int8Array#constructor
  local.tee $5
  i32.store $0 offset=1360
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $3
  local.get $5
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $6
  i32.const 7476
  i32.load $0
  local.set $8
  loop $for-loop|0782
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $6
    i32.add
    local.get $8
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0782
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7776
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1364
  local.get $5
  i32.load $0 offset=8
  local.tee $6
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|81
   local.get $1
   local.get $6
   i32.lt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_s $0
    local.get $3
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|81
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  local.get $5
  i32.load $0 offset=8
  i32.const 7564
  i32.load $0
  local.tee $3
  i32.const 3
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 3
  i32.add
  local.set $6
  i32.const 7556
  i32.load $0
  local.set $8
  i32.const 0
  local.set $1
  loop $for-loop|0656
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $6
    i32.add
    local.get $8
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $10
    i32.trunc_sat_f32_s
    i32.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0656
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7808
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1368
  local.get $5
  i32.load $0 offset=8
  local.tee $6
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|82
   local.get $1
   local.get $6
   i32.lt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_s $0
    local.get $3
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|82
   end
  end
  local.get $5
  i32.load $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 6
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $0
  loop $for-loop|0783
   local.get $1
   local.get $7
   i32.gt_s
   if
    local.get $3
    local.get $7
    i32.add
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store8 $0
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    br $for-loop|0783
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7840
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1372
  local.get $5
  i32.load $0 offset=8
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|83
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_s $0
    local.get $0
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|83
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  local.get $5
  i32.load $0 offset=8
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 2
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $7
  i32.const 0
  local.set $3
  loop $for-loop|0661
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $1
    local.get $3
    i32.add
    local.get $7
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $11
    i32.trunc_sat_f64_s
    i32.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store8 $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0661
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7872
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1376
  local.get $5
  i32.load $0 offset=8
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|84
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_s $0
    local.get $0
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|84
   end
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $5
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.get $0
  memory.copy $0 $0
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  i32.const 4
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $1
  local.get $4
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|0784
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.add
    local.get $7
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0784
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  local.get $5
  i32.load $0 offset=8
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 7
  i32.add
  i32.const 7732
  i32.load $0
  local.get $0
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7904
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1380
  local.get $5
  i32.load $0 offset=8
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|85
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_s $0
    local.get $0
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|85
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1384
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1388
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=1392
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $5
  i32.store $0 offset=1396
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $7
  local.get $5
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $3
  i32.const 7476
  i32.load $0
  local.set $6
  loop $for-loop|0786
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $1
    local.get $3
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0786
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7936
  call $~lib/rt/__newArray
  local.tee $7
  i32.store $0 offset=1400
  local.get $5
  i32.load $0 offset=8
  local.tee $3
  local.get $7
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|86
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $7
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|86
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  local.get $5
  i32.load $0 offset=8
  i32.const 7564
  i32.load $0
  local.tee $7
  i32.const 3
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 3
  i32.add
  local.set $3
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0669
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $1
    local.get $3
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $10
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0669
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7968
  call $~lib/rt/__newArray
  local.tee $7
  i32.store $0 offset=1404
  local.get $5
  i32.load $0 offset=8
  local.tee $3
  local.get $7
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|87
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $7
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|87
   end
  end
  i32.const 0
  local.set $7
  local.get $5
  i32.load $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 6
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $0
  loop $for-loop|0788
   local.get $1
   local.get $7
   i32.gt_s
   if
    local.get $3
    local.get $7
    i32.add
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store8 $0
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    br $for-loop|0788
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8000
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1408
  local.get $5
  i32.load $0 offset=8
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|88
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|88
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  local.get $5
  i32.load $0 offset=8
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 2
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $7
  i32.const 0
  local.set $3
  loop $for-loop|0674
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $1
    local.get $3
    i32.add
    local.get $7
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $11
    i32.trunc_sat_f64_u
    i32.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store8 $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0674
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8032
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1412
  local.get $5
  i32.load $0 offset=8
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|89
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|89
   end
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $5
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.get $0
  memory.copy $0 $0
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  i32.const 4
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $1
  local.get $4
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|0790
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.add
    local.get $7
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0790
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  local.get $5
  i32.load $0 offset=8
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 7
  i32.add
  i32.const 7732
  i32.load $0
  local.get $0
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8064
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1416
  local.get $5
  i32.load $0 offset=8
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|90
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $5
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|90
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1420
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1424
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=1428
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0 offset=1432
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $3
  local.get $4
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $5
  i32.const 7476
  i32.load $0
  local.set $6
  loop $for-loop|0687
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $5
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $8
    i32.const 255
    local.get $8
    i32.sub
    i32.const 31
    i32.shr_s
    i32.or
    local.get $8
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0687
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8096
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1436
  local.get $4
  i32.load $0 offset=8
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|91
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $4
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $3
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|91
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  local.get $4
  i32.load $0 offset=8
  i32.const 7564
  i32.load $0
  local.tee $3
  i32.const 3
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.add
  local.set $5
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0692
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $5
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $10
    f32.const 255
    f32.min
    f32.const 0
    f32.max
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0692
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8128
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1440
  local.get $4
  i32.load $0 offset=8
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|92
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $4
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $3
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|92
   end
  end
  i32.const 0
  local.set $1
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  i32.const 6
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $5
  local.get $0
  i32.load $0 offset=4
  local.set $0
  loop $for-loop|0165
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $5
    i32.add
    local.get $0
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.tee $9
    i32.wrap_i64
    local.tee $6
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i64.extend_i32_s
    i32.const 255
    local.get $6
    i32.sub
    i32.const 31
    i32.shr_s
    i64.extend_i32_s
    local.get $9
    i64.or
    i64.and
    i64.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0165
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8160
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1444
  local.get $4
  i32.load $0 offset=8
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|93
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $4
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|93
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  local.get $4
  i32.load $0 offset=8
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $5
  i32.const 0
  local.set $3
  loop $for-loop|0697
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $1
    local.get $3
    i32.add
    local.get $5
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $11
    f64.const 255
    f64.min
    f64.const 0
    f64.max
    i32.trunc_sat_f64_u
    i32.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store8 $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0697
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8192
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1448
  local.get $4
  i32.load $0 offset=8
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|94
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $4
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|94
   end
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.get $0
  memory.copy $0 $0
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  i32.const 4
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $1
  local.get $7
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|0166
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.add
    i32.const 255
    local.get $7
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.tee $3
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $3
    i32.or
    local.get $3
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0166
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  local.get $4
  i32.load $0 offset=8
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 7
  i32.add
  local.set $2
  i32.const 7732
  i32.load $0
  local.set $7
  i32.const 0
  local.set $1
  loop $for-loop|0706
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.add
    local.get $1
    local.get $7
    i32.add
    i32.load8_s $0
    local.tee $3
    i32.const 255
    local.get $3
    i32.sub
    i32.const 31
    i32.shr_s
    i32.or
    local.get $3
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0706
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8224
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1452
  local.get $4
  i32.load $0 offset=8
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|95
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $4
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|95
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1456
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $3
  i32.store $0 offset=1460
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=1464
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Int16Array#constructor
  local.tee $5
  i32.store $0 offset=1468
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $2
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $7
  i32.const 7476
  i32.load $0
  local.set $6
  loop $for-loop|0791
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $7
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0791
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8256
  call $~lib/rt/__newArray
  local.tee $2
  i32.store $0 offset=1472
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|96
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.shl
    local.tee $6
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $2
    i32.load $0 offset=4
    local.get $6
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|96
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $7
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0711
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $7
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $10
    i32.trunc_sat_f32_s
    i32.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0711
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8304
  call $~lib/rt/__newArray
  local.tee $2
  i32.store $0 offset=1476
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|97
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.shl
    local.tee $6
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $2
    i32.load $0 offset=4
    local.get $6
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|97
   end
  end
  i32.const 0
  local.set $7
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  i32.const 6
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 12
  i32.add
  local.set $1
  local.get $0
  i32.load $0 offset=4
  local.set $0
  loop $for-loop|0792
   local.get $2
   local.get $7
   i32.gt_s
   if
    local.get $1
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store16 $0
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    br $for-loop|0792
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8352
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1480
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $2
  loop $for-loop|98
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $2
    i32.const 1
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|98
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $7
  i32.const 0
  local.set $2
  loop $for-loop|0716
   local.get $0
   local.get $2
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $7
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $11
    i32.trunc_sat_f64_s
    i32.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store16 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0716
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8400
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1484
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $2
  loop $for-loop|99
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $2
    i32.const 1
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|99
   end
  end
  i32.const 0
  local.set $7
  local.get $3
  i32.load $0 offset=8
  local.tee $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=4
  local.set $1
  loop $for-loop|0793
   local.get $0
   local.get $7
   i32.gt_s
   if
    local.get $2
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    local.get $7
    i32.add
    i32.load8_u $0
    i32.store16 $0
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    br $for-loop|0793
   end
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $0
  i32.const 4
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.const 1
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  i32.const 0
  local.set $0
  i32.const 7740
  i32.load $0
  local.tee $2
  i32.const 7
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 14
  i32.add
  local.set $1
  i32.const 7732
  i32.load $0
  local.set $7
  loop $for-loop|0794
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $7
    i32.add
    i32.load8_s $0
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0794
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8448
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1488
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|100
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|100
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1492
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $3
  i32.store $0 offset=1496
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=1500
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $5
  i32.store $0 offset=1504
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $2
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $7
  i32.const 7476
  i32.load $0
  local.set $6
  loop $for-loop|0796
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $7
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0796
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8496
  call $~lib/rt/__newArray
  local.tee $2
  i32.store $0 offset=1508
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|101
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.shl
    local.tee $6
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $2
    i32.load $0 offset=4
    local.get $6
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|101
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $7
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0722
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $7
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $10
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0722
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8544
  call $~lib/rt/__newArray
  local.tee $2
  i32.store $0 offset=1512
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|102
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.shl
    local.tee $6
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $2
    i32.load $0 offset=4
    local.get $6
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|102
   end
  end
  i32.const 0
  local.set $7
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  i32.const 6
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 12
  i32.add
  local.set $1
  local.get $0
  i32.load $0 offset=4
  local.set $0
  loop $for-loop|0798
   local.get $2
   local.get $7
   i32.gt_s
   if
    local.get $1
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store16 $0
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    br $for-loop|0798
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8592
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1516
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $2
  loop $for-loop|103
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $2
    i32.const 1
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|103
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $7
  i32.const 0
  local.set $2
  loop $for-loop|0727
   local.get $0
   local.get $2
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $7
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $11
    i32.trunc_sat_f64_u
    i32.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store16 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0727
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8640
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1520
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $2
  loop $for-loop|104
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $2
    i32.const 1
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|104
   end
  end
  i32.const 0
  local.set $7
  local.get $3
  i32.load $0 offset=8
  local.tee $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=4
  local.set $1
  loop $for-loop|0800
   local.get $0
   local.get $7
   i32.gt_s
   if
    local.get $2
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    local.get $7
    i32.add
    i32.load8_u $0
    i32.store16 $0
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    br $for-loop|0800
   end
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $0
  i32.const 4
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.const 1
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  i32.const 0
  local.set $0
  i32.const 7740
  i32.load $0
  local.tee $2
  i32.const 7
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 14
  i32.add
  local.set $1
  i32.const 7732
  i32.load $0
  local.set $7
  loop $for-loop|0802
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $7
    i32.add
    i32.load8_s $0
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0802
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8688
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1524
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|105
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|105
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1528
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1532
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=1536
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0 offset=1540
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 7484
  i32.load $0
  local.tee $1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 7476
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8736
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1544
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|106
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $6
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $3
    i32.load $0 offset=4
    local.get $6
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|106
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  i32.const 7564
  i32.load $0
  local.tee $3
  i32.const 3
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 12
  i32.add
  local.set $5
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0738
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $8
    local.get $6
    i32.add
    f32.load $0
    local.set $10
    local.get $5
    local.get $8
    i32.add
    local.get $10
    i32.trunc_sat_f32_s
    i32.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0738
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8800
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1548
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|107
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $6
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $3
    i32.load $0 offset=4
    local.get $6
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|107
   end
  end
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  i32.const 6
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $5
  local.get $0
  i32.load $0 offset=4
  local.set $0
  loop $for-loop|0803
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store32 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0803
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8864
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1552
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|108
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $5
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $5
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|108
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $5
  i32.const 0
  local.set $3
  loop $for-loop|0743
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $1
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $11
    i32.trunc_sat_f64_s
    i32.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0743
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8928
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1556
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|109
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $5
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $5
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|109
   end
  end
  i32.const 0
  local.set $1
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $2
  i32.load $0 offset=4
  local.set $2
  loop $for-loop|0804
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $3
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    local.get $2
    i32.add
    i32.load8_u $0
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0804
   end
  end
  i32.const 0
  local.set $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  i32.const 4
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $1
  local.get $7
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|0805
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $7
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0805
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  i32.const 0
  local.set $0
  i32.const 7740
  i32.load $0
  local.tee $2
  i32.const 7
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 28
  i32.add
  local.set $1
  i32.const 7732
  i32.load $0
  local.set $7
  loop $for-loop|0806
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $7
    i32.add
    i32.load8_s $0
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0806
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8992
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1560
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|110
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $7
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|110
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1564
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1568
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=1572
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0 offset=1576
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 7484
  i32.load $0
  local.tee $1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 7476
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9056
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1580
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|111
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $6
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $3
    i32.load $0 offset=4
    local.get $6
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|111
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  i32.const 7564
  i32.load $0
  local.tee $3
  i32.const 3
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 12
  i32.add
  local.set $5
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0752
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $8
    local.get $6
    i32.add
    f32.load $0
    local.set $10
    local.get $5
    local.get $8
    i32.add
    local.get $10
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0752
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9120
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1584
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|112
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $6
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $3
    i32.load $0 offset=4
    local.get $6
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|112
   end
  end
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  i32.const 6
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $5
  local.get $0
  i32.load $0 offset=4
  local.set $0
  loop $for-loop|0808
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store32 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0808
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9184
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1588
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|113
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $5
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $5
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|113
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $5
  i32.const 0
  local.set $3
  loop $for-loop|0757
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $1
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $11
    i32.trunc_sat_f64_u
    i32.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0757
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9248
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1592
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|114
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $5
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $5
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|114
   end
  end
  i32.const 0
  local.set $1
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $2
  i32.load $0 offset=4
  local.set $2
  loop $for-loop|0810
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $3
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    local.get $2
    i32.add
    i32.load8_u $0
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0810
   end
  end
  i32.const 0
  local.set $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  i32.const 4
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $1
  local.get $7
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|0812
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $7
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0812
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  i32.const 0
  local.set $0
  i32.const 7740
  i32.load $0
  local.tee $2
  i32.const 7
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 28
  i32.add
  local.set $1
  i32.const 7732
  i32.load $0
  local.set $7
  loop $for-loop|0814
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $7
    i32.add
    i32.load8_s $0
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0814
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9312
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1596
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|115
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $7
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|115
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1600
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1604
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=1608
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Int64Array#constructor
  local.tee $5
  i32.store $0 offset=1612
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $7
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $3
  i32.const 7476
  i32.load $0
  local.set $6
  loop $for-loop|0815
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0815
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9376
  call $~lib/rt/__newArray
  local.tee $7
  i32.store $0 offset=1616
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  local.get $7
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|116
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $6
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $7
    i32.load $0 offset=4
    local.get $6
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|116
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  i32.const 7564
  i32.load $0
  local.tee $7
  i32.const 3
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $3
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0762
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $10
    i64.trunc_sat_f32_s
    i64.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0762
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9488
  call $~lib/rt/__newArray
  local.tee $7
  i32.store $0 offset=1620
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  local.get $7
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|117
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $6
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $7
    i32.load $0 offset=4
    local.get $6
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|117
   end
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 6
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 48
  i32.add
  local.get $0
  i32.load $0 offset=4
  local.get $1
  i32.const 3
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9600
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1624
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|118
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|118
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $7
  i32.const 0
  local.set $3
  loop $for-loop|0768
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $6
    local.get $7
    i32.add
    f64.load $0
    local.set $11
    local.get $1
    local.get $6
    i32.add
    local.get $11
    i64.trunc_sat_f64_s
    i64.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i64.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0768
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9712
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1628
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|119
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|119
   end
  end
  i32.const 0
  local.set $7
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=4
  local.set $2
  loop $for-loop|0816
   local.get $0
   local.get $7
   i32.gt_s
   if
    local.get $1
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    local.get $2
    local.get $7
    i32.add
    i64.load8_u $0
    i64.store $0
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    br $for-loop|0816
   end
  end
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  i32.const 4
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 32
  i32.add
  local.set $1
  local.get $4
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|0817
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $7
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i64.load16_s $0
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0817
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  i32.const 0
  local.set $0
  i32.const 7740
  i32.load $0
  local.tee $2
  i32.const 7
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 56
  i32.add
  local.set $1
  i32.const 7732
  i32.load $0
  local.set $7
  loop $for-loop|0818
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $7
    i32.add
    i64.load8_s $0
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0818
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9824
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1632
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|120
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|120
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1636
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1640
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=1644
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $5
  i32.store $0 offset=1648
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $7
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $3
  i32.const 7476
  i32.load $0
  local.set $6
  loop $for-loop|0820
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0820
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 9936
  call $~lib/rt/__newArray
  local.tee $7
  i32.store $0 offset=1652
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  local.get $7
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|121
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $6
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $7
    i32.load $0 offset=4
    local.get $6
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|121
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  i32.const 7564
  i32.load $0
  local.tee $7
  i32.const 3
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $3
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0773
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $10
    i64.trunc_sat_f32_u
    i64.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0773
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 10048
  call $~lib/rt/__newArray
  local.tee $7
  i32.store $0 offset=1656
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  local.get $7
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|122
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $6
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $7
    i32.load $0 offset=4
    local.get $6
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|122
   end
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 6
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 48
  i32.add
  local.get $0
  i32.load $0 offset=4
  local.get $1
  i32.const 3
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 10160
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1660
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|123
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|123
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=316
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $1
  i32.const 7652
  i32.load $0
  local.set $7
  i32.const 0
  local.set $3
  loop $for-loop|0782821
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $6
    local.get $7
    i32.add
    f64.load $0
    local.set $11
    local.get $1
    local.get $6
    i32.add
    local.get $11
    i64.trunc_sat_f64_u
    i64.const 0
    local.get $11
    local.get $11
    f64.sub
    f64.const 0
    f64.eq
    select
    i64.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0782821
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 10272
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1664
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|124
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|124
   end
  end
  i32.const 0
  local.set $7
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=4
  local.set $2
  loop $for-loop|0823
   local.get $0
   local.get $7
   i32.gt_s
   if
    local.get $1
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    local.get $2
    local.get $7
    i32.add
    i64.load8_u $0
    i64.store $0
    local.get $7
    i32.const 1
    i32.add
    local.set $7
    br $for-loop|0823
   end
  end
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  i32.const 4
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 32
  i32.add
  local.set $1
  local.get $4
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|0825
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $7
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i64.load16_s $0
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0825
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  i32.const 0
  local.set $0
  i32.const 7740
  i32.load $0
  local.tee $2
  i32.const 7
  i32.add
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 56
  i32.add
  local.set $1
  i32.const 7732
  i32.load $0
  local.set $7
  loop $for-loop|0827
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $7
    i32.add
    i64.load8_s $0
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0827
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 10384
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1668
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|125
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $7
    local.get $5
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|125
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1672
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1676
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=1680
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Float32Array#constructor
  local.tee $4
  i32.store $0 offset=1684
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $3
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $5
  i32.const 7476
  i32.load $0
  local.set $6
  loop $for-loop|0787
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $8
    local.get $5
    i32.add
    local.get $6
    local.get $8
    i32.add
    i32.load $0
    f32.convert_i32_s
    f32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0787
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 10496
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1688
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|126
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $6
    local.get $4
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $3
    i32.load $0 offset=4
    local.get $6
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|126
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  i32.const 7564
  i32.load $0
  local.tee $1
  i32.const 3
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 12
  i32.add
  i32.const 7556
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 10560
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1692
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|127
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $6
    local.get $4
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $3
    i32.load $0 offset=4
    local.get $6
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|127
   end
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 6
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $5
  local.get $0
  i32.load $0 offset=4
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0796828
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $5
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    f32.convert_i64_s
    f32.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0796828
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 10624
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1696
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|128
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $5
    local.get $4
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $5
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|128
   end
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $2
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  loop $for-loop|0801
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $3
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    local.get $2
    i32.add
    i32.load8_u $0
    f32.convert_i32_u
    f32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0801
   end
  end
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $0
  i32.const 4
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $2
  local.get $7
  i32.load $0 offset=4
  local.set $7
  i32.const 0
  local.set $1
  loop $for-loop|0806829
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $7
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    f32.convert_i32_s
    f32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0806829
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 28
  i32.add
  local.set $2
  i32.const 7732
  i32.load $0
  local.set $7
  i32.const 0
  local.set $1
  loop $for-loop|0811
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    local.get $7
    i32.add
    i32.load8_s $0
    f32.convert_i32_s
    f32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0811
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 10688
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1700
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|129
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $7
    local.get $4
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|129
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1704
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=1708
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=1712
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Float64Array#constructor
  local.tee $4
  i32.store $0 offset=1716
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=316
  i32.const 0
  local.set $1
  i32.const 7484
  i32.load $0
  local.tee $3
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $5
  i32.const 7476
  i32.load $0
  local.set $6
  loop $for-loop|0816830
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    f64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0816830
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 10752
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1720
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|130
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $6
    local.get $4
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $3
    i32.load $0 offset=4
    local.get $6
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|130
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=316
  i32.const 7564
  i32.load $0
  local.tee $3
  i32.const 3
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $5
  i32.const 7556
  i32.load $0
  local.set $6
  i32.const 0
  local.set $1
  loop $for-loop|0821
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    f64.promote_f32
    f64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0821
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 10864
  call $~lib/rt/__newArray
  local.tee $3
  i32.store $0 offset=1724
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $5
  local.get $3
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|131
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $6
    local.get $4
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $3
    i32.load $0 offset=4
    local.get $6
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|131
   end
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 6
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 48
  i32.add
  local.set $5
  local.get $0
  i32.load $0 offset=4
  local.set $0
  i32.const 0
  local.set $3
  loop $for-loop|0826
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $6
    local.get $5
    i32.add
    local.get $0
    local.get $6
    i32.add
    i64.load $0
    f64.convert_i64_s
    f64.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0826
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 10976
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1728
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $3
  loop $for-loop|132
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $5
    local.get $4
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $5
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|132
   end
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $2
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  loop $for-loop|0831
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $3
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    local.get $2
    i32.add
    i32.load8_u $0
    f64.convert_i32_u
    f64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0831
   end
  end
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $0
  i32.const 4
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 32
  i32.add
  local.set $2
  local.get $7
  i32.load $0 offset=4
  local.set $7
  i32.const 0
  local.set $1
  loop $for-loop|0836
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $7
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    f64.convert_i32_s
    f64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0836
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=316
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 56
  i32.add
  local.set $2
  i32.const 7732
  i32.load $0
  local.set $7
  i32.const 0
  local.set $1
  loop $for-loop|0842
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    local.get $7
    i32.add
    i32.load8_s $0
    f64.convert_i32_s
    f64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0842
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 11088
  call $~lib/rt/__newArray
  local.tee $0
  i32.store $0 offset=1732
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|133
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $7
    local.get $4
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $0
    i32.load $0 offset=4
    local.get $7
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|133
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=1736
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $2
  i32.store $0 offset=1740
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 400
  f32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const nan:0x400000
  f32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const inf
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Int64Array#constructor
  local.tee $1
  i32.store $0 offset=1744
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const -10
  i64.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 100
  i64.store $0 offset=8
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 10
  i64.store $0 offset=16
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 300
  i64.store $0 offset=24
  global.get $~lib/memory/__stack_pointer
  i32.const 2
  call $~lib/typedarray/Int32Array#constructor
  local.tee $7
  i32.store $0 offset=1748
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 300
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const -1
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.add
  local.set $5
  local.get $2
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $3
  loop $for-loop|0847
   local.get $3
   local.get $4
   i32.lt_s
   if
    local.get $3
    local.get $5
    i32.add
    local.get $2
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $10
    f32.const 255
    f32.min
    f32.const 0
    f32.max
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $10
    local.get $10
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store8 $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0847
   end
  end
  i32.const 0
  local.set $2
  local.get $0
  i32.load $0 offset=8
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  i32.const 4
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $4
  local.get $1
  i32.load $0 offset=4
  local.set $1
  loop $for-loop|0168
   local.get $2
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $4
    i32.add
    local.get $1
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.tee $9
    i32.wrap_i64
    local.tee $5
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i64.extend_i32_s
    i32.const 255
    local.get $5
    i32.sub
    i32.const 31
    i32.shr_s
    i64.extend_i32_s
    local.get $9
    i64.or
    i64.and
    i64.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0168
   end
  end
  local.get $0
  i32.load $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  i32.const 8
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.set $3
  local.get $7
  i32.load $0 offset=4
  local.set $7
  i32.const 0
  local.set $1
  loop $for-loop|0852
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    local.get $3
    i32.add
    local.get $7
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $4
    i32.const 255
    local.get $4
    i32.sub
    i32.const 31
    i32.shr_s
    i32.or
    local.get $4
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0852
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 11200
  call $~lib/rt/__newArray
  local.tee $2
  i32.store $0 offset=1752
  local.get $0
  i32.load $0 offset=8
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|134
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $0
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|134
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $2
  i32.store $0 offset=1756
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 300
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 100
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const -1
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=1760
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 65526
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 100
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 10
  i32.store16 $0 offset=4
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 300
  i32.store16 $0 offset=6
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $3
  local.get $0
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.set $4
  local.get $2
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $1
  loop $for-loop|0857
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $4
    i32.add
    i32.const 255
    local.get $2
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $5
    local.get $5
    i32.const 255
    i32.gt_u
    select
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0857
   end
  end
  i32.const 0
  local.set $2
  local.get $0
  i32.load $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 5
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 5
  i32.add
  local.set $3
  local.get $7
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|0170
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $2
    local.get $3
    i32.add
    i32.const 255
    local.get $7
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.tee $4
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $4
    i32.or
    local.get $4
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0170
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 11232
  call $~lib/rt/__newArray
  local.tee $2
  i32.store $0 offset=1764
  local.get $0
  i32.load $0 offset=8
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  loop $for-loop|135
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $0
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|135
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=1768
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1171
   block $0of1172
    block $outOfRange55
     global.get $~argumentsLength
     br_table $0of1172 $1of1171 $outOfRange55
    end
    unreachable
   end
   i32.const 11264
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11264
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  local.get $1
  call $~lib/util/sort/SORT<i8>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1772
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11296
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 11296
  call $~lib/util/sort/SORT<i8>
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $0
  i32.store $0 offset=1776
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11376
   block $0of11377
    block $outOfRange1378
     global.get $~argumentsLength
     br_table $0of11377 $1of11376 $outOfRange1378
    end
    unreachable
   end
   i32.const 11328
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11328
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  local.get $1
  call $~lib/util/sort/SORT<u8>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1780
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11360
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 11360
  call $~lib/util/sort/SORT<u8>
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $0
  i32.store $0 offset=1784
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11388
   block $0of11389
    block $outOfRange1390
     global.get $~argumentsLength
     br_table $0of11389 $1of11388 $outOfRange1390
    end
    unreachable
   end
   i32.const 11392
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11392
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  local.get $1
  call $~lib/util/sort/SORT<u8>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1788
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11424
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 11424
  call $~lib/util/sort/SORT<u8>
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $0
  i32.store $0 offset=1792
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11400
   block $0of11401
    block $outOfRange1402
     global.get $~argumentsLength
     br_table $0of11401 $1of11400 $outOfRange1402
    end
    unreachable
   end
   i32.const 11456
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11456
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<i16>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1796
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11488
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 11488
  call $~lib/util/sort/SORT<i16>
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $0
  i32.store $0 offset=1800
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11412
   block $0of11413
    block $outOfRange1414
     global.get $~argumentsLength
     br_table $0of11413 $1of11412 $outOfRange1414
    end
    unreachable
   end
   i32.const 11520
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11520
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<u16>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1804
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11552
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 11552
  call $~lib/util/sort/SORT<u16>
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=1808
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11424
   block $0of11425
    block $outOfRange1426
     global.get $~argumentsLength
     br_table $0of11425 $1of11424 $outOfRange1426
    end
    unreachable
   end
   i32.const 11584
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11584
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<i32>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1812
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11616
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 11616
  call $~lib/util/sort/SORT<i32>
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=1816
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11436
   block $0of11437
    block $outOfRange1438
     global.get $~argumentsLength
     br_table $0of11437 $1of11436 $outOfRange1438
    end
    unreachable
   end
   i32.const 11648
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11648
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<u32>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1820
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11680
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 11680
  call $~lib/util/sort/SORT<u32>
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $0
  i32.store $0 offset=1824
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11448
   block $0of11449
    block $outOfRange1450
     global.get $~argumentsLength
     br_table $0of11449 $1of11448 $outOfRange1450
    end
    unreachable
   end
   i32.const 11712
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11712
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<i64>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1828
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 2
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 3
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11744
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 11744
  call $~lib/util/sort/SORT<i64>
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 2
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 1
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $0
  i32.store $0 offset=1832
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 1
  i64.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.const 3
  i64.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11460
   block $0of11461
    block $outOfRange1462
     global.get $~argumentsLength
     br_table $0of11461 $1of11460 $outOfRange1462
    end
    unreachable
   end
   i32.const 11776
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11776
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<u64>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1836
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 2
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 3
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11808
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 11808
  call $~lib/util/sort/SORT<u64>
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 2
  i64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 1
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=1840
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 1
  f32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  i32.const 0
  local.set $1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 3
  f32.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of11472
   block $0of11473
    block $outOfRange1474
     global.get $~argumentsLength
     br_table $0of11473 $1of11472 $outOfRange1474
    end
    unreachable
   end
   i32.const 11840
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11840
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<f32>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $0
  i32.store $0 offset=1844
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.load $0
  f32.const 1
  f32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 2
  f32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 3
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11872
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 11872
  call $~lib/util/sort/SORT<f32>
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.load $0
  f32.const 3
  f32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 2
  f32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 1
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0 offset=1848
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 1
  f64.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 3
  f64.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Float64Array#sort@varargs
  local.tee $0
  i32.store $0 offset=1852
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0
  f64.const 1
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 2
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 3
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11904
  i32.store $0 offset=316
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 11904
  call $~lib/util/sort/SORT<f64>
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0
  f64.const 3
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 2
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 1
  f64.ne
  if
   unreachable
  end
  i32.const 45316
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/rt/itcms/state
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0880
    global.get $~lib/rt/itcms/state
    if
     call $~lib/rt/itcms/step
     drop
     br $while-continue|0880
    end
   end
  end
  call $~lib/rt/itcms/step
  drop
  loop $while-continue|1
   global.get $~lib/rt/itcms/state
   if
    call $~lib/rt/itcms/step
    drop
    br $while-continue|1
   end
  end
  global.get $~lib/rt/itcms/total
  i64.extend_i32_u
  i64.const 200
  i64.mul
  i64.const 100
  i64.div_u
  i32.wrap_i64
  i32.const 1024
  i32.add
  global.set $~lib/rt/itcms/threshold
  global.get $~lib/memory/__stack_pointer
  i32.const 1856
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/arraybuffer/ArrayBufferView#constructor (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $0
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 2
   call $~lib/rt/itcms/__new
   local.tee $0
   i32.store $0
  end
  local.get $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=4
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 1073741820
  local.get $2
  i32.shr_u
  i32.gt_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.shl
  local.tee $1
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0 offset=4
  local.get $0
  local.get $2
  i32.store $0
  local.get $2
  if
   local.get $0
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $0
  local.get $2
  i32.store $0 offset=4
  local.get $0
  local.get $1
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int8Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint8Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint8ClampedArray#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int16Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint16Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int32Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint32Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int64Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint64Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Float32Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Float64Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int32Array#subarray (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  local.get $4
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $0
  i32.load $0
  local.tee $4
  i32.store $0
  local.get $4
  if
   local.get $5
   local.get $4
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.load $0 offset=4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.tee $0
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $5
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $5
 )
 (func $~lib/typedarray/Float64Array#subarray (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  local.get $4
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $0
  i32.load $0
  local.tee $4
  i32.store $0
  local.get $4
  if
   local.get $5
   local.get $4
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.load $0 offset=4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.tee $0
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $5
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $5
 )
 (func $~lib/typedarray/Float64Array#sort@varargs (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 1296
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 1296
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<f64>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/rt/__newArray (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $0
  local.get $1
  i32.shl
  local.tee $5
  i32.const 0
  call $~lib/rt/itcms/__new
  local.set $1
  local.get $3
  if
   local.get $1
   local.get $3
   local.get $5
   memory.copy $0 $0
  end
  local.get $4
  local.get $1
  i32.store $0
  i32.const 16
  local.get $2
  call $~lib/rt/itcms/__new
  local.tee $2
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $2
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $1
  i32.store $0 offset=4
  local.get $2
  local.get $5
  i32.store $0 offset=8
  local.get $2
  local.get $0
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int8Array#subarray (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $3
  local.get $4
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $0
  i32.load $0
  local.tee $4
  i32.store $0
  local.get $4
  if
   local.get $5
   local.get $4
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  i32.load $0 offset=4
  i32.add
  i32.store $0 offset=4
  local.get $5
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.tee $0
  local.get $1
  local.get $0
  local.get $1
  i32.gt_s
  select
  local.get $1
  i32.sub
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $5
 )
 (func $~lib/typedarray/Int32Array#slice (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $2
   i32.const 0
   local.get $2
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.get $1
  i32.sub
  local.tee $2
  i32.const 0
  local.get $2
  i32.const 0
  i32.gt_s
  select
  local.tee $2
  call $~lib/typedarray/Int32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  local.get $2
  i32.const 2
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
 )
 (func $~lib/typedarray/Uint8Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $2
  local.get $3
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_s
  select
  local.tee $0
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Uint8ClampedArray#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $2
  local.get $3
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_s
  select
  local.tee $0
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Int16Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 1
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 1
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Uint16Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 1
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 1
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Uint32Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Int64Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Uint64Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Float32Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/arraybuffer/ArrayBuffer#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 1073741820
  i32.gt_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/arraybuffer/ArrayBuffer#slice (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.set $3
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $2
   i32.const 0
   local.get $2
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.get $1
  i32.sub
  local.tee $2
  i32.const 0
  local.get $2
  i32.const 0
  i32.gt_s
  select
  local.tee $2
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  local.get $3
  local.get $0
  local.get $1
  i32.add
  local.get $2
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
 )
 (func $byn-split-outlined-A$~lib/rt/itcms/__visit (type $i32_=>_none) (param $0 i32)
  global.get $~lib/rt/itcms/white
  local.get $0
  i32.const 20
  i32.sub
  local.tee $0
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.eq
  if
   local.get $0
   call $~lib/rt/itcms/Object#makeGray
   global.get $~lib/rt/itcms/visitCount
   i32.const 1
   i32.add
   global.set $~lib/rt/itcms/visitCount
  end
 )
 (func $byn-split-outlined-A$~lib/rt/itcms/__link (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/rt/itcms/white
  local.get $1
  i32.const 20
  i32.sub
  local.tee $1
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.eq
  if
   local.get $0
   i32.const 20
   i32.sub
   i32.load $0 offset=4
   i32.const 3
   i32.and
   local.tee $0
   global.get $~lib/rt/itcms/white
   i32.eqz
   i32.eq
   if
    local.get $1
    call $~lib/rt/itcms/Object#makeGray
   else
    global.get $~lib/rt/itcms/state
    i32.const 1
    i32.eq
    local.get $0
    i32.const 3
    i32.eq
    i32.and
    if
     local.get $1
     call $~lib/rt/itcms/Object#makeGray
    end
   end
  end
 )
)
