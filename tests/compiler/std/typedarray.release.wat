(module
 (type $i32_i32_i32_=>_i32 (func_subtype (param i32 i32 i32) (result i32) func))
 (type $i32_i32_=>_i32 (func_subtype (param i32 i32) (result i32) func))
 (type $none_=>_none (func_subtype func))
 (type $i32_i32_i32_i32_=>_i32 (func_subtype (param i32 i32 i32 i32) (result i32) func))
 (type $i64_i32_i32_=>_i32 (func_subtype (param i64 i32 i32) (result i32) func))
 (type $i64_i64_=>_i32 (func_subtype (param i64 i64) (result i32) func))
 (type $i32_i32_i32_=>_none (func_subtype (param i32 i32 i32) func))
 (type $i32_=>_i32 (func_subtype (param i32) (result i32) func))
 (type $f32_i32_i32_=>_i32 (func_subtype (param f32 i32 i32) (result i32) func))
 (type $f64_i32_i32_=>_i32 (func_subtype (param f64 i32 i32) (result i32) func))
 (type $f64_f64_=>_i32 (func_subtype (param f64 f64) (result i32) func))
 (type $f32_f32_=>_i32 (func_subtype (param f32 f32) (result i32) func))
 (type $i32_i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32 i32) func))
 (type $i32_i32_i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32 i32 i32) func))
 (type $i32_=>_none (func_subtype (param i32) func))
 (type $i64_i64_i32_i32_=>_i64 (func_subtype (param i64 i64 i32 i32) (result i64) func))
 (type $i32_i32_=>_none (func_subtype (param i32 i32) func))
 (type $f32_f32_i32_i32_=>_f32 (func_subtype (param f32 f32 i32 i32) (result f32) func))
 (type $f64_f64_i32_i32_=>_f64 (func_subtype (param f64 f64 i32 i32) (result f64) func))
 (type $i64_i32_i32_=>_i64 (func_subtype (param i64 i32 i32) (result i64) func))
 (type $i64_i32_i32_=>_none (func_subtype (param i64 i32 i32) func))
 (type $f32_i32_i32_=>_f32 (func_subtype (param f32 i32 i32) (result f32) func))
 (type $f64_i32_i32_=>_f64 (func_subtype (param f64 i32 i32) (result f64) func))
 (type $f32_i32_i32_=>_none (func_subtype (param f32 i32 i32) func))
 (type $f64_i32_i32_=>_none (func_subtype (param f64 i32 i32) func))
 (type $none_=>_i32 (func_subtype (result i32) func))
 (type $i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32) func))
 (import "env" "_g" (func $~lib/builtins/_g (param i32 i32) (result i32)))
 (global $~lib/rt/itcms/total (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/threshold (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/state (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/visitCount (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/pinSpace (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/iter (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/toSpace (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/white (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/fromSpace (mut i32) (i32.const 0))
 (global $~lib/rt/tlsf/ROOT (mut i32) (i32.const 0))
 (global $~argumentsLength (mut i32) (i32.const 0))
 (global $std/typedarray/forEachCallCount (mut i32) (i32.const 0))
 (global $std/typedarray/forEachSelf (mut i32) (i32.const 0))
 (global $~lib/memory/__stack_pointer (mut i32) (i32.const 45316))
 (memory $0 1)
 (data (i32.const 1036) ",")
 (data (i32.const 1048) "\01\00\00\00\0e\00\00\00Invalid length")
 (data (i32.const 1084) ",")
 (data (i32.const 1096) "\01\00\00\00\14\00\00\00Allocation too large")
 (data (i32.const 1196) ",")
 (data (i32.const 1208) "\01\00\00\00\12\00\00\00Index out of range")
 (data (i32.const 1276) "\1c")
 (data (i32.const 1288) "\0e\00\00\00\08\00\00\00\01")
 (data (i32.const 1308) "\1c")
 (data (i32.const 1324) "\05\00\00\00\01\01\01\04\05")
 (data (i32.const 1340) "\1c")
 (data (i32.const 1356) "\05")
 (data (i32.const 1372) "\1c")
 (data (i32.const 1388) "\05\00\00\00\01\01")
 (data (i32.const 1404) "\1c")
 (data (i32.const 1420) "\05\00\00\00\01\01\00\02\02")
 (data (i32.const 1436) "\1c")
 (data (i32.const 1452) "\05\00\00\00\01\01\00\02\02")
 (data (i32.const 1468) "\1c")
 (data (i32.const 1484) "\03")
 (data (i32.const 1500) "\1c")
 (data (i32.const 1516) "\05\00\00\00\01\00\00\00\02")
 (data (i32.const 1532) ",")
 (data (i32.const 1548) "\14\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\04\00\00\00\05")
 (data (i32.const 1580) ",")
 (data (i32.const 1596) "\14")
 (data (i32.const 1628) ",")
 (data (i32.const 1644) "\14\00\00\00\01\00\00\00\01")
 (data (i32.const 1676) ",")
 (data (i32.const 1692) "\14\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\02")
 (data (i32.const 1724) ",")
 (data (i32.const 1740) "\14\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\02")
 (data (i32.const 1772) "\1c")
 (data (i32.const 1788) "\0c")
 (data (i32.const 1804) ",")
 (data (i32.const 1820) "\14\00\00\00\01")
 (data (i32.const 1840) "\02")
 (data (i32.const 1852) ",")
 (data (i32.const 1868) "\14\00\00\00\04\00\00\00\05\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 1900) ",")
 (data (i32.const 1916) "\14\00\00\00\01\00\00\00\04\00\00\00\05\00\00\00\04\00\00\00\05")
 (data (i32.const 1948) ",")
 (data (i32.const 1964) "\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\05")
 (data (i32.const 1996) ",")
 (data (i32.const 2012) "\14\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2044) ",")
 (data (i32.const 2060) "\14\00\00\00\04\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2092) ",")
 (data (i32.const 2108) "\14\00\00\00\01\00\00\00\04\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2140) ",")
 (data (i32.const 2156) "\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\04\00\00\00\05")
 (data (i32.const 2188) ",")
 (data (i32.const 2204) "\14\00\00\00\04\00\00\00\05\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2236) ",")
 (data (i32.const 2252) "\14\00\00\00\04\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2284) ",")
 (data (i32.const 2300) "\14\00\00\00\01\00\00\00\03\00\00\00\03\00\00\00\04\00\00\00\05")
 (data (i32.const 2332) ",")
 (data (i32.const 2348) "\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\04\00\00\00\05")
 (data (i32.const 2380) ",")
 (data (i32.const 2396) "\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\05")
 (data (i32.const 2428) "\1c")
 (data (i32.const 2440) "\11\00\00\00\08\00\00\00\02")
 (data (i32.const 2460) "\1c")
 (data (i32.const 2472) "\12\00\00\00\08\00\00\00\03")
 (data (i32.const 2492) "\1c")
 (data (i32.const 2504) "\13\00\00\00\08\00\00\00\04")
 (data (i32.const 2524) "\1c")
 (data (i32.const 2536) "\14\00\00\00\08\00\00\00\05")
 (data (i32.const 2556) "\1c")
 (data (i32.const 2568) "\15\00\00\00\08\00\00\00\06")
 (data (i32.const 2588) "\1c")
 (data (i32.const 2600) "\16\00\00\00\08\00\00\00\07")
 (data (i32.const 2620) "\1c")
 (data (i32.const 2632) "\17\00\00\00\08\00\00\00\08")
 (data (i32.const 2652) "\1c")
 (data (i32.const 2664) "\18\00\00\00\08\00\00\00\t")
 (data (i32.const 2684) "\1c")
 (data (i32.const 2696) "\19\00\00\00\08\00\00\00\n")
 (data (i32.const 2716) "\1c")
 (data (i32.const 2728) "\1a\00\00\00\08\00\00\00\0b")
 (data (i32.const 2748) "\1c")
 (data (i32.const 2760) "\1b\00\00\00\08\00\00\00\0c")
 (data (i32.const 2780) "\1c")
 (data (i32.const 2792) "\11\00\00\00\08\00\00\00\r")
 (data (i32.const 2812) "\1c")
 (data (i32.const 2824) "\12\00\00\00\08\00\00\00\0e")
 (data (i32.const 2844) "\1c")
 (data (i32.const 2856) "\13\00\00\00\08\00\00\00\0f")
 (data (i32.const 2876) "\1c")
 (data (i32.const 2888) "\14\00\00\00\08\00\00\00\10")
 (data (i32.const 2908) "\1c")
 (data (i32.const 2920) "\15\00\00\00\08\00\00\00\11")
 (data (i32.const 2940) "\1c")
 (data (i32.const 2952) "\16\00\00\00\08\00\00\00\12")
 (data (i32.const 2972) "\1c")
 (data (i32.const 2984) "\17\00\00\00\08\00\00\00\13")
 (data (i32.const 3004) "\1c")
 (data (i32.const 3016) "\18\00\00\00\08\00\00\00\14")
 (data (i32.const 3036) "\1c")
 (data (i32.const 3048) "\19\00\00\00\08\00\00\00\15")
 (data (i32.const 3068) "\1c")
 (data (i32.const 3080) "\1a\00\00\00\08\00\00\00\16")
 (data (i32.const 3100) "\1c")
 (data (i32.const 3112) "\1b\00\00\00\08\00\00\00\17")
 (data (i32.const 3132) "\1c")
 (data (i32.const 3144) "\1c\00\00\00\08\00\00\00\18")
 (data (i32.const 3164) "\1c")
 (data (i32.const 3176) "\1d\00\00\00\08\00\00\00\19")
 (data (i32.const 3196) "\1c")
 (data (i32.const 3208) "\1e\00\00\00\08\00\00\00\1a")
 (data (i32.const 3228) "\1c")
 (data (i32.const 3240) "\1f\00\00\00\08\00\00\00\1b")
 (data (i32.const 3260) "\1c")
 (data (i32.const 3272) " \00\00\00\08\00\00\00\1c")
 (data (i32.const 3292) "\1c")
 (data (i32.const 3304) "!\00\00\00\08\00\00\00\1d")
 (data (i32.const 3324) "\1c")
 (data (i32.const 3336) "\"\00\00\00\08\00\00\00\1e")
 (data (i32.const 3356) "\1c")
 (data (i32.const 3368) "#\00\00\00\08\00\00\00\1f")
 (data (i32.const 3388) "\1c")
 (data (i32.const 3400) "$\00\00\00\08\00\00\00 ")
 (data (i32.const 3420) "\1c")
 (data (i32.const 3432) "%\00\00\00\08\00\00\00!")
 (data (i32.const 3452) "\1c")
 (data (i32.const 3464) "&\00\00\00\08\00\00\00\"")
 (data (i32.const 3484) "\1c")
 (data (i32.const 3496) "\'\00\00\00\08\00\00\00#")
 (data (i32.const 3516) "\1c")
 (data (i32.const 3528) "(\00\00\00\08\00\00\00$")
 (data (i32.const 3548) "\1c")
 (data (i32.const 3560) ")\00\00\00\08\00\00\00%")
 (data (i32.const 3580) "\1c")
 (data (i32.const 3592) "*\00\00\00\08\00\00\00&")
 (data (i32.const 3612) "\1c")
 (data (i32.const 3624) "+\00\00\00\08\00\00\00\'")
 (data (i32.const 3644) "\1c")
 (data (i32.const 3656) ",\00\00\00\08\00\00\00(")
 (data (i32.const 3676) "\1c")
 (data (i32.const 3688) "-\00\00\00\08\00\00\00)")
 (data (i32.const 3708) "\1c")
 (data (i32.const 3720) ".\00\00\00\08\00\00\00*")
 (data (i32.const 3740) "\1c")
 (data (i32.const 3752) "/\00\00\00\08\00\00\00+")
 (data (i32.const 3772) "\1c")
 (data (i32.const 3784) "0\00\00\00\08\00\00\00,")
 (data (i32.const 3804) "\1c")
 (data (i32.const 3816) "1\00\00\00\08\00\00\00-")
 (data (i32.const 3836) "\1c")
 (data (i32.const 3848) "\'\00\00\00\08\00\00\00.")
 (data (i32.const 3868) "\1c")
 (data (i32.const 3880) "\'\00\00\00\08\00\00\00/")
 (data (i32.const 3900) "\1c")
 (data (i32.const 3912) "(\00\00\00\08\00\00\000")
 (data (i32.const 3932) "\1c")
 (data (i32.const 3944) "(\00\00\00\08\00\00\001")
 (data (i32.const 3964) "\1c")
 (data (i32.const 3976) ")\00\00\00\08\00\00\002")
 (data (i32.const 3996) "\1c")
 (data (i32.const 4008) ")\00\00\00\08\00\00\003")
 (data (i32.const 4028) "\1c")
 (data (i32.const 4040) "*\00\00\00\08\00\00\004")
 (data (i32.const 4060) "\1c")
 (data (i32.const 4072) "*\00\00\00\08\00\00\005")
 (data (i32.const 4092) "\1c")
 (data (i32.const 4104) "+\00\00\00\08\00\00\006")
 (data (i32.const 4124) "\1c")
 (data (i32.const 4136) "+\00\00\00\08\00\00\007")
 (data (i32.const 4156) "\1c")
 (data (i32.const 4168) ",\00\00\00\08\00\00\008")
 (data (i32.const 4188) "\1c")
 (data (i32.const 4200) ",\00\00\00\08\00\00\009")
 (data (i32.const 4220) "\1c")
 (data (i32.const 4232) "-\00\00\00\08\00\00\00:")
 (data (i32.const 4252) "\1c")
 (data (i32.const 4264) "-\00\00\00\08\00\00\00;")
 (data (i32.const 4284) "\1c")
 (data (i32.const 4296) ".\00\00\00\08\00\00\00<")
 (data (i32.const 4316) "\1c")
 (data (i32.const 4328) ".\00\00\00\08\00\00\00=")
 (data (i32.const 4348) "\1c")
 (data (i32.const 4360) "/\00\00\00\08\00\00\00>")
 (data (i32.const 4380) "\1c")
 (data (i32.const 4392) "/\00\00\00\08\00\00\00?")
 (data (i32.const 4412) "\1c")
 (data (i32.const 4424) "0\00\00\00\08\00\00\00@")
 (data (i32.const 4444) "\1c")
 (data (i32.const 4456) "0\00\00\00\08\00\00\00A")
 (data (i32.const 4476) "\1c")
 (data (i32.const 4488) "1\00\00\00\08\00\00\00B")
 (data (i32.const 4508) "\1c")
 (data (i32.const 4520) "1\00\00\00\08\00\00\00C")
 (data (i32.const 4540) "\1c")
 (data (i32.const 4552) "\'\00\00\00\08\00\00\00D")
 (data (i32.const 4572) "\1c")
 (data (i32.const 4584) "\'\00\00\00\08\00\00\00E")
 (data (i32.const 4604) "\1c")
 (data (i32.const 4616) "(\00\00\00\08\00\00\00F")
 (data (i32.const 4636) "\1c")
 (data (i32.const 4648) "(\00\00\00\08\00\00\00G")
 (data (i32.const 4668) "\1c")
 (data (i32.const 4680) ")\00\00\00\08\00\00\00H")
 (data (i32.const 4700) "\1c")
 (data (i32.const 4712) ")\00\00\00\08\00\00\00I")
 (data (i32.const 4732) "\1c")
 (data (i32.const 4744) "*\00\00\00\08\00\00\00J")
 (data (i32.const 4764) "\1c")
 (data (i32.const 4776) "*\00\00\00\08\00\00\00K")
 (data (i32.const 4796) "\1c")
 (data (i32.const 4808) "+\00\00\00\08\00\00\00L")
 (data (i32.const 4828) "\1c")
 (data (i32.const 4840) "+\00\00\00\08\00\00\00M")
 (data (i32.const 4860) "\1c")
 (data (i32.const 4872) ",\00\00\00\08\00\00\00N")
 (data (i32.const 4892) "\1c")
 (data (i32.const 4904) ",\00\00\00\08\00\00\00O")
 (data (i32.const 4924) "\1c")
 (data (i32.const 4936) "-\00\00\00\08\00\00\00P")
 (data (i32.const 4956) "\1c")
 (data (i32.const 4968) "-\00\00\00\08\00\00\00Q")
 (data (i32.const 4988) "\1c")
 (data (i32.const 5000) ".\00\00\00\08\00\00\00R")
 (data (i32.const 5020) "\1c")
 (data (i32.const 5032) ".\00\00\00\08\00\00\00S")
 (data (i32.const 5052) "\1c")
 (data (i32.const 5064) "/\00\00\00\08\00\00\00T")
 (data (i32.const 5084) "\1c")
 (data (i32.const 5096) "/\00\00\00\08\00\00\00U")
 (data (i32.const 5116) "\1c")
 (data (i32.const 5128) "0\00\00\00\08\00\00\00V")
 (data (i32.const 5148) "\1c")
 (data (i32.const 5160) "0\00\00\00\08\00\00\00W")
 (data (i32.const 5180) "\1c")
 (data (i32.const 5192) "1\00\00\00\08\00\00\00X")
 (data (i32.const 5212) "\1c")
 (data (i32.const 5224) "1\00\00\00\08\00\00\00Y")
 (data (i32.const 5244) "\1c")
 (data (i32.const 5256) "\'\00\00\00\08\00\00\00Z")
 (data (i32.const 5276) "\1c")
 (data (i32.const 5288) "\'\00\00\00\08\00\00\00[")
 (data (i32.const 5308) "\1c")
 (data (i32.const 5320) "(\00\00\00\08\00\00\00\\")
 (data (i32.const 5340) "\1c")
 (data (i32.const 5352) "(\00\00\00\08\00\00\00]")
 (data (i32.const 5372) "\1c")
 (data (i32.const 5384) ")\00\00\00\08\00\00\00^")
 (data (i32.const 5404) "\1c")
 (data (i32.const 5416) ")\00\00\00\08\00\00\00_")
 (data (i32.const 5436) "\1c")
 (data (i32.const 5448) "*\00\00\00\08\00\00\00`")
 (data (i32.const 5468) "\1c")
 (data (i32.const 5480) "*\00\00\00\08\00\00\00a")
 (data (i32.const 5500) "\1c")
 (data (i32.const 5512) "+\00\00\00\08\00\00\00b")
 (data (i32.const 5532) "\1c")
 (data (i32.const 5544) "+\00\00\00\08\00\00\00c")
 (data (i32.const 5564) "\1c")
 (data (i32.const 5576) ",\00\00\00\08\00\00\00d")
 (data (i32.const 5596) "\1c")
 (data (i32.const 5608) ",\00\00\00\08\00\00\00e")
 (data (i32.const 5628) "\1c")
 (data (i32.const 5640) "-\00\00\00\08\00\00\00f")
 (data (i32.const 5660) "\1c")
 (data (i32.const 5672) "-\00\00\00\08\00\00\00g")
 (data (i32.const 5692) "\1c")
 (data (i32.const 5704) ".\00\00\00\08\00\00\00h")
 (data (i32.const 5724) "\1c")
 (data (i32.const 5736) ".\00\00\00\08\00\00\00i")
 (data (i32.const 5756) "\1c")
 (data (i32.const 5768) "/\00\00\00\08\00\00\00j")
 (data (i32.const 5788) "\1c")
 (data (i32.const 5800) "/\00\00\00\08\00\00\00k")
 (data (i32.const 5820) "\1c")
 (data (i32.const 5832) "0\00\00\00\08\00\00\00l")
 (data (i32.const 5852) "\1c")
 (data (i32.const 5864) "0\00\00\00\08\00\00\00m")
 (data (i32.const 5884) "\1c")
 (data (i32.const 5896) "1\00\00\00\08\00\00\00n")
 (data (i32.const 5916) "\1c")
 (data (i32.const 5928) "1\00\00\00\08\00\00\00o")
 (data (i32.const 5948) "\1c")
 (data (i32.const 5960) "\'\00\00\00\08\00\00\00p")
 (data (i32.const 5980) "\1c")
 (data (i32.const 5992) "\'\00\00\00\08\00\00\00q")
 (data (i32.const 6012) "\1c")
 (data (i32.const 6024) "(\00\00\00\08\00\00\00r")
 (data (i32.const 6044) "\1c")
 (data (i32.const 6056) "(\00\00\00\08\00\00\00s")
 (data (i32.const 6076) "\1c")
 (data (i32.const 6088) ")\00\00\00\08\00\00\00t")
 (data (i32.const 6108) "\1c")
 (data (i32.const 6120) ")\00\00\00\08\00\00\00u")
 (data (i32.const 6140) "\1c")
 (data (i32.const 6152) "*\00\00\00\08\00\00\00v")
 (data (i32.const 6172) "\1c")
 (data (i32.const 6184) "*\00\00\00\08\00\00\00w")
 (data (i32.const 6204) "\1c")
 (data (i32.const 6216) "+\00\00\00\08\00\00\00x")
 (data (i32.const 6236) "\1c")
 (data (i32.const 6248) "+\00\00\00\08\00\00\00y")
 (data (i32.const 6268) "\1c")
 (data (i32.const 6280) ",\00\00\00\08\00\00\00z")
 (data (i32.const 6300) "\1c")
 (data (i32.const 6312) ",\00\00\00\08\00\00\00{")
 (data (i32.const 6332) "\1c")
 (data (i32.const 6344) "-\00\00\00\08\00\00\00|")
 (data (i32.const 6364) "\1c")
 (data (i32.const 6376) "-\00\00\00\08\00\00\00}")
 (data (i32.const 6396) "\1c")
 (data (i32.const 6408) ".\00\00\00\08\00\00\00~")
 (data (i32.const 6428) "\1c")
 (data (i32.const 6440) ".\00\00\00\08\00\00\00\7f")
 (data (i32.const 6460) "\1c")
 (data (i32.const 6472) "/\00\00\00\08\00\00\00\80")
 (data (i32.const 6492) "\1c")
 (data (i32.const 6504) "/\00\00\00\08\00\00\00\81")
 (data (i32.const 6524) "\1c")
 (data (i32.const 6536) "0\00\00\00\08\00\00\00\82")
 (data (i32.const 6556) "\1c")
 (data (i32.const 6568) "0\00\00\00\08\00\00\00\83")
 (data (i32.const 6588) "\1c")
 (data (i32.const 6600) "1\00\00\00\08\00\00\00\84")
 (data (i32.const 6620) "\1c")
 (data (i32.const 6632) "1\00\00\00\08\00\00\00\85")
 (data (i32.const 6652) "\1c")
 (data (i32.const 6668) "\0c\00\00\00\n\00\00\00\0c\00\00\00\0e")
 (data (i32.const 6684) ",")
 (data (i32.const 6696) "\10\00\00\00\10\00\00\00\10\1a\00\00\10\1a\00\00\0c\00\00\00\03")
 (data (i32.const 6732) "\1c")
 (data (i32.const 6744) "2\00\00\00\08\00\00\00\86")
 (data (i32.const 6764) "\1c")
 (data (i32.const 6776) "3\00\00\00\08\00\00\00\87")
 (data (i32.const 6796) "\1c")
 (data (i32.const 6808) "4\00\00\00\08\00\00\00\88")
 (data (i32.const 6828) "\1c")
 (data (i32.const 6840) "5\00\00\00\08\00\00\00\89")
 (data (i32.const 6860) "\1c")
 (data (i32.const 6872) "6\00\00\00\08\00\00\00\8a")
 (data (i32.const 6892) "\1c")
 (data (i32.const 6904) "7\00\00\00\08\00\00\00\8b")
 (data (i32.const 6924) "\1c")
 (data (i32.const 6936) "8\00\00\00\08\00\00\00\8c")
 (data (i32.const 6956) "\1c")
 (data (i32.const 6968) "9\00\00\00\08\00\00\00\8d")
 (data (i32.const 6988) "\1c")
 (data (i32.const 7000) ":\00\00\00\08\00\00\00\8e")
 (data (i32.const 7020) "\1c")
 (data (i32.const 7032) ";\00\00\00\08\00\00\00\8f")
 (data (i32.const 7052) "\1c")
 (data (i32.const 7064) "<\00\00\00\08\00\00\00\90")
 (data (i32.const 7084) "<")
 (data (i32.const 7100) "$\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 7148) ",")
 (data (i32.const 7160) "\10\00\00\00\10\00\00\00\c0\1b\00\00\c0\1b\00\00$\00\00\00\t")
 (data (i32.const 7196) "<")
 (data (i32.const 7212) ",\00\00\00\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\n")
 (data (i32.const 7260) ",")
 (data (i32.const 7272) "\10\00\00\00\10\00\00\000\1c\00\000\1c\00\00,\00\00\00\0b")
 (data (i32.const 7308) "<")
 (data (i32.const 7324) ",\00\00\00\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\n")
 (data (i32.const 7372) ",")
 (data (i32.const 7384) "\10\00\00\00\10\00\00\00\a0\1c\00\00\a0\1c\00\00,\00\00\00\0b")
 (data (i32.const 7420) "\1c")
 (data (i32.const 7436) "\0c\00\00\00\01\00\00\00\02\00\00\00\03")
 (data (i32.const 7452) ",")
 (data (i32.const 7464) "\10\00\00\00\10\00\00\00\10\1d\00\00\10\1d\00\00\0c\00\00\00\03")
 (data (i32.const 7500) "\1c")
 (data (i32.const 7516) "\0c\00\00\00\00\00\80@\00\00\a0@\00\00\c0@")
 (data (i32.const 7532) ",")
 (data (i32.const 7544) "=\00\00\00\10\00\00\00`\1d\00\00`\1d\00\00\0c\00\00\00\03")
 (data (i32.const 7580) ",")
 (data (i32.const 7596) "\18")
 (data (i32.const 7606) "\f0\7f\00\00\00\00\00\00\f8\7f\00\00\00\00\00\00\f0\ff")
 (data (i32.const 7628) ",")
 (data (i32.const 7640) ">\00\00\00\10\00\00\00\b0\1d\00\00\b0\1d\00\00\18\00\00\00\03")
 (data (i32.const 7676) "\1c")
 (data (i32.const 7692) "\03\00\00\00\92\91\90")
 (data (i32.const 7708) ",")
 (data (i32.const 7720) "\0f\00\00\00\10\00\00\00\10\1e\00\00\10\1e\00\00\03\00\00\00\03")
 (data (i32.const 7756) "\1c")
 (data (i32.const 7772) "\n\00\00\00\01\02\03")
 (data (i32.const 7788) "\1c")
 (data (i32.const 7804) "\n\00\00\00\01\02\03\04\05\06")
 (data (i32.const 7820) "\1c")
 (data (i32.const 7836) "\n\00\00\00\01\02\03\04\05\06\07\08\t")
 (data (i32.const 7852) "\1c")
 (data (i32.const 7868) "\n\00\00\00\01\02\00\00\00\06\07\08\t")
 (data (i32.const 7884) "\1c")
 (data (i32.const 7900) "\n\00\00\00defg\e8\e9\ea\92\91\90")
 (data (i32.const 7916) "\1c")
 (data (i32.const 7932) "\n\00\00\00\01\02\03")
 (data (i32.const 7948) "\1c")
 (data (i32.const 7964) "\n\00\00\00\01\02\03\04\05\06")
 (data (i32.const 7980) "\1c")
 (data (i32.const 7996) "\n\00\00\00\01\02\03\04\05\06\07\08\t")
 (data (i32.const 8012) "\1c")
 (data (i32.const 8028) "\n\00\00\00\01\02\00\00\00\06\07\08\t")
 (data (i32.const 8044) "\1c")
 (data (i32.const 8060) "\n\00\00\00defg\e8\e9\ea\92\91\90")
 (data (i32.const 8076) "\1c")
 (data (i32.const 8092) "\n\00\00\00\01\02\03")
 (data (i32.const 8108) "\1c")
 (data (i32.const 8124) "\n\00\00\00\01\02\03\04\05\06")
 (data (i32.const 8140) "\1c")
 (data (i32.const 8156) "\n\00\00\00\01\02\03\04\05\06\07\08\t")
 (data (i32.const 8172) "\1c")
 (data (i32.const 8188) "\n\00\00\00\01\02\00\00\00\06\07\08\t")
 (data (i32.const 8204) "\1c")
 (data (i32.const 8220) "\n\00\00\00defg\ff\ff\ff")
 (data (i32.const 8236) ",")
 (data (i32.const 8252) "\14\00\00\00\01\00\02\00\03")
 (data (i32.const 8284) ",")
 (data (i32.const 8300) "\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06")
 (data (i32.const 8332) ",")
 (data (i32.const 8348) "\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06\00\07\00\08\00\t")
 (data (i32.const 8380) ",")
 (data (i32.const 8396) "\14\00\00\00\01\00\02\00\00\00\00\00\00\00\06\00\07\00\08\00\t")
 (data (i32.const 8428) ",")
 (data (i32.const 8444) "\14\00\00\00d\00e\00f\00g\00\e8\03\e9\03\ea\03\92\ff\91\ff\90\ff")
 (data (i32.const 8476) ",")
 (data (i32.const 8492) "\14\00\00\00\01\00\02\00\03")
 (data (i32.const 8524) ",")
 (data (i32.const 8540) "\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06")
 (data (i32.const 8572) ",")
 (data (i32.const 8588) "\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06\00\07\00\08\00\t")
 (data (i32.const 8620) ",")
 (data (i32.const 8636) "\14\00\00\00\01\00\02\00\00\00\00\00\00\00\06\00\07\00\08\00\t")
 (data (i32.const 8668) ",")
 (data (i32.const 8684) "\14\00\00\00d\00e\00f\00g\00\e8\03\e9\03\ea\03\92\ff\91\ff\90\ff")
 (data (i32.const 8716) "<")
 (data (i32.const 8732) "(\00\00\00\01\00\00\00\02\00\00\00\03")
 (data (i32.const 8780) "<")
 (data (i32.const 8796) "(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06")
 (data (i32.const 8844) "<")
 (data (i32.const 8860) "(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 8908) "<")
 (data (i32.const 8924) "(\00\00\00\01\00\00\00\02")
 (data (i32.const 8948) "\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 8972) "<")
 (data (i32.const 8988) "(\00\00\00d\00\00\00e\00\00\00f\00\00\00g\00\00\00\e8\03\00\00\e9\03\00\00\ea\03\00\00\92\ff\ff\ff\91\ff\ff\ff\90\ff\ff\ff")
 (data (i32.const 9036) "<")
 (data (i32.const 9052) "(\00\00\00\01\00\00\00\02\00\00\00\03")
 (data (i32.const 9100) "<")
 (data (i32.const 9116) "(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06")
 (data (i32.const 9164) "<")
 (data (i32.const 9180) "(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 9228) "<")
 (data (i32.const 9244) "(\00\00\00\01\00\00\00\02")
 (data (i32.const 9268) "\06\00\00\00\07\00\00\00\08\00\00\00\t")
 (data (i32.const 9292) "<")
 (data (i32.const 9308) "(\00\00\00d\00\00\00e\00\00\00f\00\00\00g\00\00\00\e8\03\00\00\e9\03\00\00\ea\03\00\00\92\ff\ff\ff\91\ff\ff\ff\90\ff\ff\ff")
 (data (i32.const 9356) "l")
 (data (i32.const 9372) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03")
 (data (i32.const 9468) "l")
 (data (i32.const 9484) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06")
 (data (i32.const 9580) "l")
 (data (i32.const 9596) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t")
 (data (i32.const 9692) "l")
 (data (i32.const 9708) "P\00\00\00\01\00\00\00\00\00\00\00\02")
 (data (i32.const 9752) "\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t")
 (data (i32.const 9804) "l")
 (data (i32.const 9820) "P\00\00\00d\00\00\00\00\00\00\00e\00\00\00\00\00\00\00f\00\00\00\00\00\00\00g\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\e9\03\00\00\00\00\00\00\ea\03\00\00\00\00\00\00\92\ff\ff\ff\ff\ff\ff\ff\91\ff\ff\ff\ff\ff\ff\ff\90\ff\ff\ff\ff\ff\ff\ff")
 (data (i32.const 9916) "l")
 (data (i32.const 9932) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03")
 (data (i32.const 10028) "l")
 (data (i32.const 10044) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06")
 (data (i32.const 10140) "l")
 (data (i32.const 10156) "P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t")
 (data (i32.const 10252) "l")
 (data (i32.const 10268) "P\00\00\00\01\00\00\00\00\00\00\00\02")
 (data (i32.const 10312) "\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t")
 (data (i32.const 10364) "l")
 (data (i32.const 10380) "P\00\00\00d\00\00\00\00\00\00\00e\00\00\00\00\00\00\00f\00\00\00\00\00\00\00g\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\e9\03\00\00\00\00\00\00\ea\03\00\00\00\00\00\00\92\ff\ff\ff\ff\ff\ff\ff\91\ff\ff\ff\ff\ff\ff\ff\90\ff\ff\ff\ff\ff\ff\ff")
 (data (i32.const 10476) "<")
 (data (i32.const 10492) "(\00\00\00\00\00\80?\00\00\00@\00\00@@")
 (data (i32.const 10540) "<")
 (data (i32.const 10556) "(\00\00\00\00\00\80?\00\00\00@\00\00@@\00\00\80@\00\00\a0@\00\00\c0@")
 (data (i32.const 10604) "<")
 (data (i32.const 10620) "(\00\00\00\00\00\80?\00\00\00@\00\00@@\00\00\80@\00\00\a0@\00\00\c0@\00\00\e0@\00\00\00A\00\00\10A")
 (data (i32.const 10668) "<")
 (data (i32.const 10684) "(\00\00\00\00\00\c8B\00\00\caB\00\00\ccB\00\00\ceB\00\00zD\00@zD\00\80zD\00\00\dc\c2\00\00\de\c2\00\00\e0\c2")
 (data (i32.const 10732) "l")
 (data (i32.const 10748) "P")
 (data (i32.const 10758) "\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@")
 (data (i32.const 10844) "l")
 (data (i32.const 10860) "P")
 (data (i32.const 10870) "\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\00\00\10@\00\00\00\00\00\00\14@\00\00\00\00\00\00\18@")
 (data (i32.const 10956) "l")
 (data (i32.const 10972) "P")
 (data (i32.const 10982) "\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\00\00\10@\00\00\00\00\00\00\14@\00\00\00\00\00\00\18@\00\00\00\00\00\00\1c@\00\00\00\00\00\00 @\00\00\00\00\00\00\"@")
 (data (i32.const 11068) "l")
 (data (i32.const 11084) "P")
 (data (i32.const 11094) "Y@\00\00\00\00\00@Y@\00\00\00\00\00\80Y@\00\00\00\00\00\c0Y@\00\00\00\00\00@\8f@\00\00\00\00\00H\8f@\00\00\00\00\00P\8f@\00\00\00\00\00\80[\c0\00\00\00\00\00\c0[\c0\00\00\00\00\00\00\\\c0")
 (data (i32.const 11180) "\1c")
 (data (i32.const 11196) "\n\00\00\00\00\ff\00\00\00d\n\ff\ff")
 (data (i32.const 11212) "\1c")
 (data (i32.const 11228) "\n\00\00\00\01\ffd\ff\00\00d\n\ff")
 (data (i32.const 11244) "\1c")
 (data (i32.const 11256) "E\00\00\00\08\00\00\00\91")
 (data (i32.const 11276) "\1c")
 (data (i32.const 11288) "E\00\00\00\08\00\00\00\92")
 (data (i32.const 11308) "\1c")
 (data (i32.const 11320) "F\00\00\00\08\00\00\00\93")
 (data (i32.const 11340) "\1c")
 (data (i32.const 11352) "F\00\00\00\08\00\00\00\94")
 (data (i32.const 11372) "\1c")
 (data (i32.const 11384) "F\00\00\00\08\00\00\00\95")
 (data (i32.const 11404) "\1c")
 (data (i32.const 11416) "F\00\00\00\08\00\00\00\96")
 (data (i32.const 11436) "\1c")
 (data (i32.const 11448) "G\00\00\00\08\00\00\00\97")
 (data (i32.const 11468) "\1c")
 (data (i32.const 11480) "G\00\00\00\08\00\00\00\98")
 (data (i32.const 11500) "\1c")
 (data (i32.const 11512) "H\00\00\00\08\00\00\00\99")
 (data (i32.const 11532) "\1c")
 (data (i32.const 11544) "H\00\00\00\08\00\00\00\9a")
 (data (i32.const 11564) "\1c")
 (data (i32.const 11576) "I\00\00\00\08\00\00\00\9b")
 (data (i32.const 11596) "\1c")
 (data (i32.const 11608) "I\00\00\00\08\00\00\00\9c")
 (data (i32.const 11628) "\1c")
 (data (i32.const 11640) "J\00\00\00\08\00\00\00\9d")
 (data (i32.const 11660) "\1c")
 (data (i32.const 11672) "J\00\00\00\08\00\00\00\9e")
 (data (i32.const 11692) "\1c")
 (data (i32.const 11704) "K\00\00\00\08\00\00\00\9f")
 (data (i32.const 11724) "\1c")
 (data (i32.const 11736) "K\00\00\00\08\00\00\00\a0")
 (data (i32.const 11756) "\1c")
 (data (i32.const 11768) "L\00\00\00\08\00\00\00\a1")
 (data (i32.const 11788) "\1c")
 (data (i32.const 11800) "L\00\00\00\08\00\00\00\a2")
 (data (i32.const 11820) "\1c")
 (data (i32.const 11832) "M\00\00\00\08\00\00\00\a3")
 (data (i32.const 11852) "\1c")
 (data (i32.const 11864) "M\00\00\00\08\00\00\00\a4")
 (data (i32.const 11884) "\1c")
 (data (i32.const 11896) "\0e\00\00\00\08\00\00\00\a5")
 (data (i32.const 11920) "N\00\00\00 \00\00\00\00\00\00\00 ")
 (data (i32.const 11948) "A\08\00\00\02\00\00\00A\00\00\00\02\00\00\00A\00\00\00\02\00\00\00\81\08\00\00\02\00\00\00\81\00\00\00\02\00\00\00\01\t\00\00\02\00\00\00\01\01\00\00\02\00\00\00\01\n\00\00\02\00\00\00\01\02\00\00\02\00\00\00\01\19\00\00\02\00\00\00\01\1a\00\00\02")
 (data (i32.const 12044) "B\08\00\00\00\00\00\00\02\t")
 (data (i32.const 12412) "\02\19\00\00\00\00\00\00\02\1a\00\00\00\00\00\00B\00\00\00\00\00\00\00\82\08\00\00\00\00\00\00\82\00\00\00\00\00\00\00\02\01\00\00\00\00\00\00\02\n\00\00\00\00\00\00\02\02")
 (table $0 166 166 funcref)
 (elem $0 (i32.const 1) $~lib/util/sort/COMPARATOR<f64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Float64Array,f64>~anonymous|0 $~lib/util/sort/COMPARATOR<i8>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int8Array,i8>~anonymous|0 $~lib/util/sort/COMPARATOR<u8>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>~anonymous|0 $~lib/util/sort/COMPARATOR<u8>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>~anonymous|0 $~lib/util/sort/COMPARATOR<i16>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16>~anonymous|0 $~lib/util/sort/COMPARATOR<u16>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16>~anonymous|0 $~lib/util/sort/COMPARATOR<i32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32>~anonymous|0 $~lib/util/sort/COMPARATOR<u32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32>~anonymous|0 $~lib/util/sort/COMPARATOR<i64>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64>~anonymous|0 $~lib/util/sort/COMPARATOR<u64>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64>~anonymous|0 $~lib/util/sort/COMPARATOR<f32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Float64Array,f64>~anonymous|0)
 (export "memory" (memory $0))
 (start $~start)
 (func $~lib/rt/itcms/visitRoots (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  i32.const 6704
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7168
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7280
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7392
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7472
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7552
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7648
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 7728
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 1216
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 1056
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  i32.const 1104
  call $byn-split-outlined-A$~lib/rt/itcms/__visit
  global.get $~lib/rt/itcms/pinSpace
  local.tee $1
  i32.load $0 offset=4
  i32.const -4
  i32.and
  local.set $0
  loop $while-continue|0
   local.get $0
   local.get $1
   i32.ne
   if
    local.get $0
    i32.load $0 offset=4
    i32.const 3
    i32.and
    i32.const 3
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 20
    i32.add
    call $~lib/rt/__visit_members
    local.get $0
    i32.load $0 offset=4
    i32.const -4
    i32.and
    local.set $0
    br $while-continue|0
   end
  end
 )
 (func $~lib/rt/itcms/Object#makeGray (type $i32_=>_none) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  global.get $~lib/rt/itcms/iter
  i32.eq
  if
   local.get $0
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   if
    unreachable
   end
   local.get $1
   global.set $~lib/rt/itcms/iter
  end
  block $__inlined_func$~lib/rt/itcms/Object#unlink
   local.get $0
   i32.load $0 offset=4
   i32.const -4
   i32.and
   local.tee $1
   i32.eqz
   if
    local.get $0
    i32.load $0 offset=8
    i32.eqz
    local.get $0
    i32.const 45316
    i32.lt_u
    i32.and
    i32.eqz
    if
     unreachable
    end
    br $__inlined_func$~lib/rt/itcms/Object#unlink
   end
   local.get $0
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   if
    unreachable
   end
   local.get $1
   local.get $2
   i32.store $0 offset=8
   local.get $2
   local.get $1
   local.get $2
   i32.load $0 offset=4
   i32.const 3
   i32.and
   i32.or
   i32.store $0 offset=4
  end
  global.get $~lib/rt/itcms/toSpace
  local.tee $2
  i32.load $0 offset=8
  local.set $1
  local.get $0
  global.get $~lib/rt/itcms/white
  i32.eqz
  i32.const 2
  local.get $0
  i32.load $0 offset=12
  local.tee $3
  i32.const 1
  i32.le_u
  if (result i32)
   i32.const 1
  else
   local.get $3
   i32.const 11920
   i32.load $0
   i32.gt_u
   if
    unreachable
   end
   local.get $3
   i32.const 3
   i32.shl
   i32.const 11924
   i32.add
   i32.load $0
   i32.const 32
   i32.and
  end
  select
  local.get $2
  i32.or
  i32.store $0 offset=4
  local.get $0
  local.get $1
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $1
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.or
  i32.store $0 offset=4
  local.get $2
  local.get $0
  i32.store $0 offset=8
 )
 (func $~lib/rt/tlsf/removeBlock (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.load $0
  local.tee $2
  i32.const 1
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.const -4
  i32.and
  local.tee $2
  i32.const 12
  i32.lt_u
  if
   unreachable
  end
  local.get $2
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $2
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   i32.const 1073741820
   local.get $2
   local.get $2
   i32.const 1073741820
   i32.ge_u
   select
   local.tee $2
   i32.clz
   i32.sub
   local.tee $4
   i32.const 7
   i32.sub
   local.set $3
   local.get $2
   local.get $4
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.tee $2
  i32.const 16
  i32.lt_u
  local.get $3
  i32.const 23
  i32.lt_u
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.set $5
  local.get $1
  i32.load $0 offset=4
  local.tee $4
  if
   local.get $4
   local.get $5
   i32.store $0 offset=8
  end
  local.get $5
  if
   local.get $5
   local.get $4
   i32.store $0 offset=4
  end
  local.get $1
  local.get $0
  local.get $3
  i32.const 4
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=96
  i32.eq
  if
   local.get $0
   local.get $3
   i32.const 4
   i32.shl
   local.get $2
   i32.add
   i32.const 2
   i32.shl
   i32.add
   local.get $5
   i32.store $0 offset=96
   local.get $5
   i32.eqz
   if
    local.get $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.tee $1
    i32.load $0 offset=4
    i32.const -2
    local.get $2
    i32.rotl
    i32.and
    local.set $2
    local.get $1
    local.get $2
    i32.store $0 offset=4
    local.get $2
    i32.eqz
    if
     local.get $0
     local.get $0
     i32.load $0
     i32.const -2
     local.get $3
     i32.rotl
     i32.and
     i32.store $0
    end
   end
  end
 )
 (func $~lib/rt/tlsf/insertBlock (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0
  local.tee $3
  i32.const 1
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.const 4
  i32.add
  local.get $1
  i32.load $0
  i32.const -4
  i32.and
  i32.add
  local.tee $4
  i32.load $0
  local.tee $2
  i32.const 1
  i32.and
  if
   local.get $0
   local.get $4
   call $~lib/rt/tlsf/removeBlock
   local.get $1
   local.get $3
   i32.const 4
   i32.add
   local.get $2
   i32.const -4
   i32.and
   i32.add
   local.tee $3
   i32.store $0
   local.get $1
   i32.const 4
   i32.add
   local.get $1
   i32.load $0
   i32.const -4
   i32.and
   i32.add
   local.tee $4
   i32.load $0
   local.set $2
  end
  local.get $3
  i32.const 2
  i32.and
  if
   local.get $1
   i32.const 4
   i32.sub
   i32.load $0
   local.tee $1
   i32.load $0
   local.tee $6
   i32.const 1
   i32.and
   i32.eqz
   if
    unreachable
   end
   local.get $0
   local.get $1
   call $~lib/rt/tlsf/removeBlock
   local.get $1
   local.get $6
   i32.const 4
   i32.add
   local.get $3
   i32.const -4
   i32.and
   i32.add
   local.tee $3
   i32.store $0
  end
  local.get $4
  local.get $2
  i32.const 2
  i32.or
  i32.store $0
  local.get $3
  i32.const -4
  i32.and
  local.tee $2
  i32.const 12
  i32.lt_u
  if
   unreachable
  end
  local.get $4
  local.get $1
  i32.const 4
  i32.add
  local.get $2
  i32.add
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.const 4
  i32.sub
  local.get $1
  i32.store $0
  local.get $2
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $2
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   i32.const 1073741820
   local.get $2
   local.get $2
   i32.const 1073741820
   i32.ge_u
   select
   local.tee $2
   i32.clz
   i32.sub
   local.tee $3
   i32.const 7
   i32.sub
   local.set $5
   local.get $2
   local.get $3
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.tee $2
  i32.const 16
  i32.lt_u
  local.get $5
  i32.const 23
  i32.lt_u
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $0
  local.get $5
  i32.const 4
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=96
  local.set $3
  local.get $1
  i32.const 0
  i32.store $0 offset=4
  local.get $1
  local.get $3
  i32.store $0 offset=8
  local.get $3
  if
   local.get $3
   local.get $1
   i32.store $0 offset=4
  end
  local.get $0
  local.get $5
  i32.const 4
  i32.shl
  local.get $2
  i32.add
  i32.const 2
  i32.shl
  i32.add
  local.get $1
  i32.store $0 offset=96
  local.get $0
  local.get $0
  i32.load $0
  i32.const 1
  local.get $5
  i32.shl
  i32.or
  i32.store $0
  local.get $0
  local.get $5
  i32.const 2
  i32.shl
  i32.add
  local.tee $0
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  local.get $2
  i32.shl
  i32.or
  i32.store $0 offset=4
 )
 (func $~lib/rt/tlsf/addMemory (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  local.get $2
  i32.gt_u
  if
   unreachable
  end
  local.get $1
  i32.const 19
  i32.add
  i32.const -16
  i32.and
  i32.const 4
  i32.sub
  local.set $1
  local.get $0
  i32.load $0 offset=1568
  local.tee $4
  if
   local.get $4
   i32.const 4
   i32.add
   local.get $1
   i32.gt_u
   if
    unreachable
   end
   local.get $1
   i32.const 16
   i32.sub
   local.get $4
   i32.eq
   if
    local.get $4
    i32.load $0
    local.set $3
    local.get $1
    i32.const 16
    i32.sub
    local.set $1
   end
  else
   local.get $0
   i32.const 1572
   i32.add
   local.get $1
   i32.gt_u
   if
    unreachable
   end
  end
  local.get $2
  i32.const -16
  i32.and
  local.get $1
  i32.sub
  local.tee $2
  i32.const 20
  i32.lt_u
  if
   return
  end
  local.get $1
  local.get $3
  i32.const 2
  i32.and
  local.get $2
  i32.const 8
  i32.sub
  local.tee $2
  i32.const 1
  i32.or
  i32.or
  i32.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 4
  i32.add
  local.get $2
  i32.add
  local.tee $2
  i32.const 2
  i32.store $0
  local.get $0
  local.get $2
  i32.store $0 offset=1568
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/tlsf/initialize (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  memory.size $0
  local.tee $1
  i32.const 0
  i32.le_s
  if (result i32)
   i32.const 1
   local.get $1
   i32.sub
   memory.grow $0
   i32.const 0
   i32.lt_s
  else
   i32.const 0
  end
  if
   unreachable
  end
  i32.const 45328
  i32.const 0
  i32.store $0
  i32.const 46896
  i32.const 0
  i32.store $0
  loop $for-loop|0
   local.get $0
   i32.const 23
   i32.lt_u
   if
    local.get $0
    i32.const 2
    i32.shl
    i32.const 45328
    i32.add
    i32.const 0
    i32.store $0 offset=4
    i32.const 0
    local.set $1
    loop $for-loop|1
     local.get $1
     i32.const 16
     i32.lt_u
     if
      local.get $0
      i32.const 4
      i32.shl
      local.get $1
      i32.add
      i32.const 2
      i32.shl
      i32.const 45328
      i32.add
      i32.const 0
      i32.store $0 offset=96
      local.get $1
      i32.const 1
      i32.add
      local.set $1
      br $for-loop|1
     end
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 45328
  i32.const 46900
  memory.size $0
  i32.const 16
  i32.shl
  call $~lib/rt/tlsf/addMemory
  i32.const 45328
  global.set $~lib/rt/tlsf/ROOT
 )
 (func $~lib/rt/tlsf/__free (type $i32_=>_none) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.const 45316
  i32.lt_u
  if
   return
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $0
  i32.const 4
  i32.sub
  local.set $1
  local.get $0
  i32.const 15
  i32.and
  i32.const 1
  local.get $0
  select
  if (result i32)
   i32.const 1
  else
   local.get $1
   i32.load $0
   i32.const 1
   i32.and
  end
  if
   unreachable
  end
  local.get $1
  local.get $1
  i32.load $0
  i32.const 1
  i32.or
  i32.store $0
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/itcms/step (type $none_=>_i32) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  block $break|0
   block $case2|0
    block $case1|0
     block $case0|0
      global.get $~lib/rt/itcms/state
      br_table $case0|0 $case1|0 $case2|0 $break|0
     end
     i32.const 1
     global.set $~lib/rt/itcms/state
     i32.const 0
     global.set $~lib/rt/itcms/visitCount
     call $~lib/rt/itcms/visitRoots
     global.get $~lib/rt/itcms/toSpace
     global.set $~lib/rt/itcms/iter
     global.get $~lib/rt/itcms/visitCount
     return
    end
    global.get $~lib/rt/itcms/white
    i32.eqz
    local.set $1
    global.get $~lib/rt/itcms/iter
    i32.load $0 offset=4
    i32.const -4
    i32.and
    local.set $0
    loop $while-continue|1
     local.get $0
     global.get $~lib/rt/itcms/toSpace
     i32.ne
     if
      local.get $0
      global.set $~lib/rt/itcms/iter
      local.get $1
      local.get $0
      i32.load $0 offset=4
      i32.const 3
      i32.and
      i32.ne
      if
       local.get $0
       local.get $0
       i32.load $0 offset=4
       i32.const -4
       i32.and
       local.get $1
       i32.or
       i32.store $0 offset=4
       i32.const 0
       global.set $~lib/rt/itcms/visitCount
       local.get $0
       i32.const 20
       i32.add
       call $~lib/rt/__visit_members
       global.get $~lib/rt/itcms/visitCount
       return
      end
      local.get $0
      i32.load $0 offset=4
      i32.const -4
      i32.and
      local.set $0
      br $while-continue|1
     end
    end
    i32.const 0
    global.set $~lib/rt/itcms/visitCount
    call $~lib/rt/itcms/visitRoots
    global.get $~lib/rt/itcms/toSpace
    global.get $~lib/rt/itcms/iter
    i32.load $0 offset=4
    i32.const -4
    i32.and
    i32.eq
    if
     global.get $~lib/memory/__stack_pointer
     local.set $0
     loop $while-continue|0
      local.get $0
      i32.const 45316
      i32.lt_u
      if
       local.get $0
       i32.load $0
       local.tee $2
       if
        local.get $2
        call $byn-split-outlined-A$~lib/rt/itcms/__visit
       end
       local.get $0
       i32.const 4
       i32.add
       local.set $0
       br $while-continue|0
      end
     end
     global.get $~lib/rt/itcms/iter
     i32.load $0 offset=4
     i32.const -4
     i32.and
     local.set $0
     loop $while-continue|2
      local.get $0
      global.get $~lib/rt/itcms/toSpace
      i32.ne
      if
       local.get $1
       local.get $0
       i32.load $0 offset=4
       i32.const 3
       i32.and
       i32.ne
       if
        local.get $0
        local.get $0
        i32.load $0 offset=4
        i32.const -4
        i32.and
        local.get $1
        i32.or
        i32.store $0 offset=4
        local.get $0
        i32.const 20
        i32.add
        call $~lib/rt/__visit_members
       end
       local.get $0
       i32.load $0 offset=4
       i32.const -4
       i32.and
       local.set $0
       br $while-continue|2
      end
     end
     global.get $~lib/rt/itcms/fromSpace
     local.set $0
     global.get $~lib/rt/itcms/toSpace
     global.set $~lib/rt/itcms/fromSpace
     local.get $0
     global.set $~lib/rt/itcms/toSpace
     local.get $1
     global.set $~lib/rt/itcms/white
     local.get $0
     i32.load $0 offset=4
     i32.const -4
     i32.and
     global.set $~lib/rt/itcms/iter
     i32.const 2
     global.set $~lib/rt/itcms/state
    end
    global.get $~lib/rt/itcms/visitCount
    return
   end
   global.get $~lib/rt/itcms/iter
   local.tee $0
   global.get $~lib/rt/itcms/toSpace
   i32.ne
   if
    local.get $0
    i32.load $0 offset=4
    local.tee $1
    i32.const -4
    i32.and
    global.set $~lib/rt/itcms/iter
    global.get $~lib/rt/itcms/white
    i32.eqz
    local.get $1
    i32.const 3
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 45316
    i32.lt_u
    if
     local.get $0
     i32.const 0
     i32.store $0 offset=4
     local.get $0
     i32.const 0
     i32.store $0 offset=8
    else
     global.get $~lib/rt/itcms/total
     local.get $0
     i32.load $0
     i32.const -4
     i32.and
     i32.const 4
     i32.add
     i32.sub
     global.set $~lib/rt/itcms/total
     local.get $0
     i32.const 4
     i32.add
     call $~lib/rt/tlsf/__free
    end
    i32.const 10
    return
   end
   global.get $~lib/rt/itcms/toSpace
   local.tee $0
   local.get $0
   i32.store $0 offset=4
   local.get $0
   local.get $0
   i32.store $0 offset=8
   i32.const 0
   global.set $~lib/rt/itcms/state
  end
  i32.const 0
 )
 (func $~lib/rt/tlsf/searchBlock (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $1
   i32.const 4
   i32.shr_u
  else
   i32.const 31
   local.get $1
   i32.const 1
   i32.const 27
   local.get $1
   i32.clz
   i32.sub
   i32.shl
   i32.add
   i32.const 1
   i32.sub
   local.get $1
   local.get $1
   i32.const 536870910
   i32.lt_u
   select
   local.tee $1
   i32.clz
   i32.sub
   local.tee $3
   i32.const 7
   i32.sub
   local.set $2
   local.get $1
   local.get $3
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
  end
  local.tee $1
  i32.const 16
  i32.lt_u
  local.get $2
  i32.const 23
  i32.lt_u
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $0
  local.get $2
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=4
  i32.const -1
  local.get $1
  i32.shl
  i32.and
  local.tee $1
  if (result i32)
   local.get $0
   local.get $1
   i32.ctz
   local.get $2
   i32.const 4
   i32.shl
   i32.add
   i32.const 2
   i32.shl
   i32.add
   i32.load $0 offset=96
  else
   local.get $0
   i32.load $0
   i32.const -1
   local.get $2
   i32.const 1
   i32.add
   i32.shl
   i32.and
   local.tee $1
   if (result i32)
    local.get $0
    local.get $1
    i32.ctz
    local.tee $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    local.tee $2
    i32.eqz
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.ctz
    local.get $1
    i32.const 4
    i32.shl
    i32.add
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=96
   else
    i32.const 0
   end
  end
 )
 (func $~lib/rt/tlsf/allocateBlock (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i32.const 1073741820
  i32.gt_u
  if
   unreachable
  end
  local.get $0
  i32.const 12
  local.get $1
  i32.const 19
  i32.add
  i32.const -16
  i32.and
  i32.const 4
  i32.sub
  local.get $1
  i32.const 12
  i32.le_u
  select
  local.tee $3
  call $~lib/rt/tlsf/searchBlock
  local.tee $1
  i32.eqz
  if
   memory.size $0
   local.tee $1
   i32.const 4
   local.get $0
   i32.load $0 offset=1568
   local.get $1
   i32.const 16
   i32.shl
   i32.const 4
   i32.sub
   i32.ne
   i32.shl
   local.get $3
   i32.const 1
   i32.const 27
   local.get $3
   i32.clz
   i32.sub
   i32.shl
   i32.const 1
   i32.sub
   i32.add
   local.get $3
   local.get $3
   i32.const 536870910
   i32.lt_u
   select
   i32.add
   i32.const 65535
   i32.add
   i32.const -65536
   i32.and
   i32.const 16
   i32.shr_u
   local.tee $2
   local.get $1
   local.get $2
   i32.gt_s
   select
   memory.grow $0
   i32.const 0
   i32.lt_s
   if
    local.get $2
    memory.grow $0
    i32.const 0
    i32.lt_s
    if
     unreachable
    end
   end
   local.get $0
   local.get $1
   i32.const 16
   i32.shl
   memory.size $0
   i32.const 16
   i32.shl
   call $~lib/rt/tlsf/addMemory
   local.get $0
   local.get $3
   call $~lib/rt/tlsf/searchBlock
   local.tee $1
   i32.eqz
   if
    unreachable
   end
  end
  local.get $3
  local.get $1
  i32.load $0
  i32.const -4
  i32.and
  i32.gt_u
  if
   unreachable
  end
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/removeBlock
  local.get $1
  i32.load $0
  local.set $4
  local.get $3
  i32.const 4
  i32.add
  i32.const 15
  i32.and
  if
   unreachable
  end
  local.get $4
  i32.const -4
  i32.and
  local.get $3
  i32.sub
  local.tee $2
  i32.const 16
  i32.ge_u
  if
   local.get $1
   local.get $3
   local.get $4
   i32.const 2
   i32.and
   i32.or
   i32.store $0
   local.get $1
   i32.const 4
   i32.add
   local.get $3
   i32.add
   local.tee $3
   local.get $2
   i32.const 4
   i32.sub
   i32.const 1
   i32.or
   i32.store $0
   local.get $0
   local.get $3
   call $~lib/rt/tlsf/insertBlock
  else
   local.get $1
   local.get $4
   i32.const -2
   i32.and
   i32.store $0
   local.get $1
   i32.const 4
   i32.add
   local.get $1
   i32.load $0
   i32.const -4
   i32.and
   i32.add
   local.tee $0
   local.get $0
   i32.load $0
   i32.const -3
   i32.and
   i32.store $0
  end
  local.get $1
 )
 (func $~lib/rt/itcms/__new (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 1073741804
  i32.ge_u
  if
   unreachable
  end
  global.get $~lib/rt/itcms/total
  global.get $~lib/rt/itcms/threshold
  i32.ge_u
  if
   block $__inlined_func$~lib/rt/itcms/interrupt
    i32.const 2048
    local.set $2
    loop $do-loop|0
     local.get $2
     call $~lib/rt/itcms/step
     i32.sub
     local.set $2
     global.get $~lib/rt/itcms/state
     i32.eqz
     if
      global.get $~lib/rt/itcms/total
      i64.extend_i32_u
      i64.const 200
      i64.mul
      i64.const 100
      i64.div_u
      i32.wrap_i64
      i32.const 1024
      i32.add
      global.set $~lib/rt/itcms/threshold
      br $__inlined_func$~lib/rt/itcms/interrupt
     end
     local.get $2
     i32.const 0
     i32.gt_s
     br_if $do-loop|0
    end
    global.get $~lib/rt/itcms/total
    local.tee $2
    global.get $~lib/rt/itcms/threshold
    i32.sub
    i32.const 1024
    i32.lt_u
    i32.const 10
    i32.shl
    local.get $2
    i32.add
    global.set $~lib/rt/itcms/threshold
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $0
  i32.const 16
  i32.add
  call $~lib/rt/tlsf/allocateBlock
  local.tee $2
  local.get $1
  i32.store $0 offset=12
  local.get $2
  local.get $0
  i32.store $0 offset=16
  global.get $~lib/rt/itcms/fromSpace
  local.tee $1
  i32.load $0 offset=8
  local.set $3
  local.get $2
  local.get $1
  global.get $~lib/rt/itcms/white
  i32.or
  i32.store $0 offset=4
  local.get $2
  local.get $3
  i32.store $0 offset=8
  local.get $3
  local.get $2
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.or
  i32.store $0 offset=4
  local.get $1
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/rt/itcms/total
  local.get $2
  i32.load $0
  i32.const -4
  i32.and
  i32.const 4
  i32.add
  i32.add
  global.set $~lib/rt/itcms/total
  local.get $2
  i32.const 20
  i32.add
  local.tee $1
  i32.const 0
  local.get $0
  memory.fill $0
  local.get $1
 )
 (func $std/typedarray/testInstantiate (type $i32_=>_none) (param $0 i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 44
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 44
  memory.fill $0
  local.get $1
  local.get $0
  call $~lib/typedarray/Int8Array#constructor
  local.tee $1
  i32.store $0
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $1
  i32.store $0 offset=4
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $1
  i32.store $0 offset=8
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Int16Array#constructor
  local.tee $1
  i32.store $0 offset=12
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.const 1
  i32.shl
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $1
  i32.store $0 offset=16
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.const 1
  i32.shl
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Int32Array#constructor
  local.tee $1
  i32.store $0 offset=20
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.const 2
  i32.shl
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $1
  i32.store $0 offset=24
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.const 2
  i32.shl
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Int64Array#constructor
  local.tee $1
  i32.store $0 offset=28
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.const 3
  i32.shl
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $1
  i32.store $0 offset=32
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.const 3
  i32.shl
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Float32Array#constructor
  local.tee $1
  i32.store $0 offset=36
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.const 2
  i32.shl
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Float64Array#constructor
  local.tee $1
  i32.store $0 offset=40
  local.get $1
  i32.load $0 offset=4
  local.get $1
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  local.get $0
  i32.const 3
  i32.shl
  i32.ne
  if
   unreachable
  end
  local.get $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 44
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/util/sort/insertionSort<f64> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 f64)
  (local $6 f64)
  (local $7 i32)
  (local $8 f64)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $7
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $7
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    local.tee $3
    f64.load $0 offset=8
    local.tee $8
    local.set $6
    local.get $3
    f64.load $0
    local.set $5
    i32.const 2
    global.set $~argumentsLength
    local.get $5
    local.get $8
    local.get $4
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $5
     local.set $6
     local.get $8
     local.set $5
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $3
    loop $while-continue|1
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       f64.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $f64_f64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $8
       f64.store $0 offset=16
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    f64.store $0 offset=16
    loop $while-continue|2
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       f64.load $0
       local.set $5
       i32.const 2
       global.set $~argumentsLength
       local.get $5
       local.get $6
       local.get $4
       i32.load $0
       call_indirect $0 (type $f64_f64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $5
       f64.store $0 offset=8
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    f64.store $0 offset=8
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<f64> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 f64)
  (local $6 i32)
  (local $7 f64)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  local.set $7
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $7
  local.get $3
  i32.load $0
  call_indirect $0 (type $f64_f64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     f64.load $0 offset=8
     local.set $5
     local.get $6
     f64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     f64.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     f64.load $0
     f64.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     f64.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $1
     f64.load $0 offset=8
     local.set $5
     local.get $1
     f64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<f64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 f64)
  (local $8 f64)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $9
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 3
    i32.shl
    local.tee $10
    local.get $4
    i32.add
    local.get $0
    local.get $10
    i32.add
    f64.load $0
    f64.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $9
    local.get $6
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    f64.load $0 offset=8
    f64.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $7
     f64.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $8
     f64.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<f64> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 f64)
  (local $10 f64)
  (local $11 i32)
  (local $12 i32)
  (local $13 f64)
  (local $14 i32)
  (local $15 i32)
  (local $16 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     f64.load $0
     local.set $13
     local.get $0
     f64.load $0 offset=8
     local.set $9
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $9
     local.get $13
     local.get $13
     local.get $9
     local.get $2
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     f64.store $0
     local.get $0
     f64.load $0 offset=16
     local.set $10
     i32.const 2
     global.set $~argumentsLength
     local.get $13
     local.get $9
     local.get $1
     select
     local.tee $9
     local.get $10
     local.get $2
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $10
     local.get $9
     local.get $1
     select
     f64.store $0 offset=8
     local.get $0
     local.get $9
     local.get $10
     local.get $1
     select
     f64.store $0 offset=16
    end
    local.get $0
    f64.load $0
    local.set $10
    local.get $0
    f64.load $0 offset=8
    local.set $9
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $9
    local.get $10
    local.get $10
    local.get $9
    local.get $2
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    f64.store $0
    local.get $0
    local.get $10
    local.get $9
    local.get $1
    select
    f64.store $0 offset=8
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<f64>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $12
  i32.add
  local.set $14
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $12
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $15
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $11
  local.get $2
  call $~lib/util/sort/extendRunRight<f64>
  local.tee $6
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $11
   local.get $11
   i32.const 31
   i32.ge_s
   select
   local.tee $6
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<f64>
  end
  loop $while-continue|2
   local.get $6
   local.get $11
   i32.lt_s
   if
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $5
    local.get $11
    local.get $2
    call $~lib/util/sort/extendRunRight<f64>
    local.tee $7
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $11
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $11
     i32.gt_s
     select
     local.tee $7
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<f64>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $11
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $16
    i64.div_u
    local.get $5
    local.get $7
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $16
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $12
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $14
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $6
       local.get $15
       local.get $2
       call $~lib/util/sort/mergeRuns<f64>
       local.get $3
       local.get $12
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $12
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $14
    i32.add
    local.get $6
    i32.store $0
    local.get $5
    local.set $3
    local.get $7
    local.set $6
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $12
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $14
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $11
     local.get $15
     local.get $2
     call $~lib/util/sort/mergeRuns<f64>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $15
  call $~lib/rt/tlsf/__free
  local.get $12
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<f64>~anonymous|0 (type $f64_f64_=>_i32) (param $0 f64) (param $1 f64) (result i32)
  (local $2 i64)
  (local $3 i64)
  local.get $0
  i64.reinterpret_f64
  local.tee $2
  i64.const 63
  i64.shr_s
  i64.const 1
  i64.shr_u
  local.get $2
  i64.xor
  local.tee $2
  local.get $1
  i64.reinterpret_f64
  local.tee $3
  i64.const 63
  i64.shr_s
  i64.const 1
  i64.shr_u
  local.get $3
  i64.xor
  local.tee $3
  i64.gt_s
  local.get $2
  local.get $3
  i64.lt_s
  i32.sub
 )
 (func $~lib/typedarray/Int32Array#fill (type $i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $0
  i32.load $0 offset=4
  local.set $5
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  local.get $2
  i32.add
  local.get $2
  local.get $4
  local.get $2
  local.get $4
  i32.lt_s
  select
  local.get $2
  i32.const 0
  i32.lt_s
  select
  local.set $0
  local.get $3
  local.get $4
  i32.add
  local.get $3
  local.get $4
  local.get $3
  local.get $4
  i32.lt_s
  select
  local.get $3
  i32.const 0
  i32.lt_s
  select
  local.set $2
  block $__inlined_func$~lib/util/bytes/FILL<u32>
   local.get $1
   i32.eqz
   local.get $1
   i32.const -1
   i32.eq
   i32.or
   if
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $5
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $1
     local.get $2
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     memory.fill $0
    end
    br $__inlined_func$~lib/util/bytes/FILL<u32>
   end
   loop $for-loop|0
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $5
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $1
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0
    end
   end
  end
 )
 (func $~lib/typedarray/Int32Array#copyWithin (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  local.get $3
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  local.get $3
  local.get $4
  i32.lt_s
  select
  local.set $5
  local.get $0
  i32.load $0 offset=4
  local.tee $3
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $4
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $4
   local.get $1
   local.get $4
   i32.lt_s
   select
  end
  local.tee $1
  i32.const 2
  i32.shl
  i32.add
  local.get $3
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $4
   i32.add
   local.tee $2
   i32.const 0
   local.get $2
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $4
   local.get $2
   local.get $4
   i32.lt_s
   select
  end
  local.tee $2
  i32.const 2
  i32.shl
  i32.add
  local.get $5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $4
   local.get $5
   i32.add
   local.tee $3
   i32.const 0
   local.get $3
   i32.const 0
   i32.gt_s
   select
  else
   local.get $5
   local.get $4
   local.get $4
   local.get $5
   i32.gt_s
   select
  end
  local.get $2
  i32.sub
  local.tee $2
  local.get $4
  local.get $1
  i32.sub
  local.tee $1
  local.get $1
  local.get $2
  i32.gt_s
  select
  i32.const 2
  i32.shl
  memory.copy $0 $0
  local.get $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  local.get $0
  local.get $1
  i32.add
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i64_i32_i32_=>_i64) (param $0 i64) (param $1 i64) (param $2 i32) (param $3 i32) (result i64)
  local.get $0
  local.get $1
  i64.add
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_f32_i32_i32_=>_f32) (param $0 f32) (param $1 f32) (param $2 i32) (param $3 i32) (result f32)
  local.get $0
  local.get $1
  f32.add
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_f64_i32_i32_=>_f64) (param $0 f64) (param $1 f64) (param $2 i32) (param $3 i32) (result f64)
  local.get $0
  local.get $1
  f64.add
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  local.get $0
  i32.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i64) (param $0 i64) (param $1 i32) (param $2 i32) (result i64)
  local.get $0
  local.get $0
  i64.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_f32) (param $0 f32) (param $1 i32) (param $2 i32) (result f32)
  local.get $0
  local.get $0
  f32.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_f64) (param $0 f64) (param $1 i32) (param $2 i32) (result f64)
  local.get $0
  local.get $0
  f64.mul
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.extend8_s
  i32.const 2
  i32.gt_s
 )
 (func $~lib/rt/itcms/__renew (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.const 20
  i32.sub
  local.tee $3
  i32.load $0
  i32.const -4
  i32.and
  i32.const 16
  i32.sub
  i32.le_u
  if
   local.get $3
   local.get $1
   i32.store $0 offset=16
   local.get $0
   return
  end
  local.get $1
  local.get $3
  i32.load $0 offset=12
  call $~lib/rt/itcms/__new
  local.tee $2
  local.get $0
  local.get $1
  local.get $3
  i32.load $0 offset=16
  local.tee $0
  local.get $0
  local.get $1
  i32.gt_u
  select
  memory.copy $0 $0
  local.get $2
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.extend16_s
  i32.const 2
  i32.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 2
  i32.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 2
  i64.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 2
  i64.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f32.const 2
  f32.gt
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f64.const 2
  f64.gt
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.eqz
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 2
  i64.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.eqz
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f32.const 2
  f32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|1 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f32.const 0
  f32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f64.const 2
  f64.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|1 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f64.const 0
  f64.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 4
  i64.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f32.const 4
  f32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  f64.const 4
  f64.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.extend8_s
  i32.const 1
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.const 1
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i32.extend16_s
  i32.const 1
  i32.and
  i32.eqz
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $0 i64) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  i64.const 1
  i64.and
  i64.eqz
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $0 f32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  block $__inlined_func$~lib/math/NativeMathf.mod (result f32)
   local.get $0
   i32.reinterpret_f32
   local.tee $3
   i32.const 23
   i32.shr_u
   i32.const 255
   i32.and
   local.tee $2
   i32.const 255
   i32.eq
   if
    local.get $0
    local.get $0
    f32.add
    local.tee $0
    local.get $0
    f32.div
    br $__inlined_func$~lib/math/NativeMathf.mod
   end
   local.get $3
   i32.const 1
   i32.shl
   local.tee $1
   i32.const -2147483648
   i32.le_u
   if
    local.get $0
    local.get $1
    i32.const -2147483648
    i32.ne
    f32.convert_i32_u
    f32.mul
    br $__inlined_func$~lib/math/NativeMathf.mod
   end
   local.get $2
   if (result i32)
    local.get $3
    i32.const 8388607
    i32.and
    i32.const 8388608
    i32.or
   else
    local.get $3
    i32.const 1
    local.get $2
    local.get $3
    i32.const 9
    i32.shl
    i32.clz
    i32.sub
    local.tee $2
    i32.sub
    i32.shl
   end
   local.set $1
   loop $while-continue|0
    local.get $2
    i32.const 128
    i32.gt_s
    if
     local.get $1
     i32.const 8388608
     i32.ge_u
     if (result i32)
      local.get $0
      f32.const 0
      f32.mul
      local.get $1
      i32.const 8388608
      i32.eq
      br_if $__inlined_func$~lib/math/NativeMathf.mod
      drop
      local.get $1
      i32.const 8388608
      i32.sub
     else
      local.get $1
     end
     i32.const 1
     i32.shl
     local.set $1
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|0
    end
   end
   local.get $1
   i32.const 8388608
   i32.ge_u
   if
    local.get $0
    f32.const 0
    f32.mul
    local.get $1
    i32.const 8388608
    i32.eq
    br_if $__inlined_func$~lib/math/NativeMathf.mod
    drop
    local.get $1
    i32.const 8388608
    i32.sub
    local.set $1
   end
   local.get $2
   local.get $1
   i32.const 8
   i32.shl
   i32.clz
   local.tee $4
   i32.sub
   local.set $2
   local.get $3
   i32.const -2147483648
   i32.and
   local.get $1
   local.get $4
   i32.shl
   local.tee $1
   i32.const 8388608
   i32.sub
   local.get $2
   i32.const 23
   i32.shl
   i32.or
   local.get $1
   i32.const 1
   local.get $2
   i32.sub
   i32.shr_u
   local.get $2
   i32.const 0
   i32.gt_s
   select
   i32.or
   f32.reinterpret_i32
  end
  f32.const 0
  f32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $0 f64) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i64)
  (local $4 i64)
  (local $5 i64)
  (local $6 i64)
  block $__inlined_func$~lib/math/NativeMath.mod (result f64)
   local.get $0
   i64.reinterpret_f64
   local.tee $5
   i64.const 52
   i64.shr_u
   i64.const 2047
   i64.and
   local.tee $4
   i64.const 2047
   i64.eq
   if
    local.get $0
    local.get $0
    f64.add
    local.tee $0
    local.get $0
    f64.div
    br $__inlined_func$~lib/math/NativeMath.mod
   end
   local.get $5
   i64.const 1
   i64.shl
   local.tee $3
   i64.const -9223372036854775808
   i64.le_u
   if
    local.get $0
    local.get $3
    i64.const -9223372036854775808
    i64.ne
    f64.convert_i32_u
    f64.mul
    br $__inlined_func$~lib/math/NativeMath.mod
   end
   local.get $4
   i64.eqz
   if (result i64)
    local.get $5
    i64.const 1
    local.get $4
    local.get $5
    i64.const 12
    i64.shl
    i64.clz
    i64.sub
    local.tee $4
    i64.sub
    i64.shl
   else
    local.get $5
    i64.const 4503599627370495
    i64.and
    i64.const 4503599627370496
    i64.or
   end
   local.set $3
   loop $while-continue|0
    local.get $4
    i64.const 1024
    i64.gt_s
    if
     local.get $3
     i64.const 4503599627370496
     i64.ge_u
     if (result i64)
      local.get $0
      f64.const 0
      f64.mul
      local.get $3
      i64.const 4503599627370496
      i64.eq
      br_if $__inlined_func$~lib/math/NativeMath.mod
      drop
      local.get $3
      i64.const 4503599627370496
      i64.sub
     else
      local.get $3
     end
     i64.const 1
     i64.shl
     local.set $3
     local.get $4
     i64.const 1
     i64.sub
     local.set $4
     br $while-continue|0
    end
   end
   local.get $3
   i64.const 4503599627370496
   i64.ge_u
   if
    local.get $0
    f64.const 0
    f64.mul
    local.get $3
    i64.const 4503599627370496
    i64.eq
    br_if $__inlined_func$~lib/math/NativeMath.mod
    drop
    local.get $3
    i64.const 4503599627370496
    i64.sub
    local.set $3
   end
   local.get $4
   local.get $3
   i64.const 11
   i64.shl
   i64.clz
   local.tee $4
   i64.sub
   local.set $6
   local.get $5
   i64.const -9223372036854775808
   i64.and
   local.get $3
   local.get $4
   i64.shl
   local.tee $3
   i64.const 4503599627370496
   i64.sub
   local.get $6
   i64.const 52
   i64.shl
   i64.or
   local.get $3
   i64.const 1
   local.get $6
   i64.sub
   i64.shr_u
   local.get $6
   i64.const 0
   i64.gt_s
   select
   i64.or
   f64.reinterpret_i64
  end
  f64.const 0
  f64.eq
 )
 (func $~lib/typedarray/Int8Array#reverse (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i64)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $4
   local.get $5
   i32.const 8
   i32.sub
   local.set $6
   loop $while-continue|0
    local.get $1
    i32.const 7
    i32.add
    local.get $4
    i32.lt_u
    if
     local.get $1
     local.get $2
     i32.add
     local.tee $7
     i64.load $0
     local.tee $3
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $3
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.set $3
     local.get $7
     local.get $2
     local.get $6
     i32.add
     local.get $1
     i32.sub
     local.tee $7
     i64.load $0
     local.tee $8
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $8
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.tee $8
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $8
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     i64.store $0
     local.get $7
     local.get $3
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $3
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     i64.store $0
     local.get $1
     i32.const 8
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|1
    local.get $1
    local.get $4
    i32.lt_u
    if
     local.get $1
     local.get $2
     i32.add
     local.tee $6
     i32.load8_u $0
     local.set $7
     local.get $6
     local.get $2
     local.get $5
     local.get $1
     i32.sub
     i32.add
     local.tee $6
     i32.load8_u $0
     i32.store8 $0
     local.get $6
     local.get $7
     i32.store8 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|1
    end
   end
  end
  local.get $0
 )
 (func $~lib/typedarray/Int16Array#reverse (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $0
  i32.load $0 offset=4
  local.set $2
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $3
   local.get $4
   i32.const 2
   i32.sub
   local.set $5
   loop $while-continue|0
    local.get $1
    i32.const 1
    i32.add
    local.get $3
    i32.lt_u
    if
     local.get $2
     local.get $5
     local.get $1
     i32.sub
     i32.const 1
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     i32.const 16
     i32.rotr
     local.set $7
     local.get $6
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     i32.const 16
     i32.rotr
     i32.store $0
     local.get $6
     local.get $7
     i32.store $0
     local.get $1
     i32.const 2
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|1
    local.get $1
    local.get $3
    i32.lt_u
    if
     local.get $2
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.tee $5
     i32.load16_u $0
     local.set $6
     local.get $5
     local.get $2
     local.get $4
     local.get $1
     i32.sub
     i32.const 1
     i32.shl
     i32.add
     local.tee $5
     i32.load16_u $0
     i32.store16 $0
     local.get $5
     local.get $6
     i32.store16 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|1
    end
   end
  end
  local.get $0
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 7280
  i32.store $0
  local.get $2
  i32.const 7292
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend8_s
    local.set $2
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $2
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.01
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.01
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|02
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.04
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.04
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|05
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.07
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.07
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|08
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.010
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.010
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|011
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.013
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.013
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|014
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.016
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.016
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|017
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|020
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.022
   local.get $4
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.022
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   local.get $1
   local.get $2
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $2
   local.get $1
   local.get $2
   i32.le_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|00
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|00
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.05
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.05
   local.get $1
   local.get $1
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|06
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.05
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|06
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.011
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.011
   local.get $1
   local.get $1
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|012
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.011
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|012
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.017
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.017
   local.get $1
   local.get $2
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $2
   local.get $1
   local.get $2
   i32.le_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|018
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.017
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|018
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.026
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.029
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.032
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.035
   local.get $4
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.038
   local.get $4
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Int8Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.041
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.044
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.047
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.050
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.053
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.056
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.059
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.062
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 7280
  i32.store $0
  local.get $2
  i32.const 7292
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $2
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $2
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.01
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.01
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|02
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.04
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.04
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|05
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.07
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.07
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|08
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.010
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.010
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|011
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.013
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.013
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|014
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.016
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.016
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|017
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|020
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.022
   local.get $4
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.022
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $1
   local.get $2
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $2
   local.get $1
   local.get $2
   i32.le_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|00
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|00
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.05
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.05
   local.get $1
   local.get $1
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|06
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.05
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|06
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.011
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.011
   local.get $1
   local.get $1
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|012
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.011
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|012
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.017
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.017
   local.get $1
   local.get $2
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $2
   local.get $1
   local.get $2
   i32.le_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|018
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.017
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|018
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.026
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.029
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.032
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
   local.get $4
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.038
   local.get $4
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 9
  call $~lib/typedarray/Uint8Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.041
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.047
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.050
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.053
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.056
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.059
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.062
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 7280
  i32.store $0
  local.get $2
  i32.const 7292
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $2
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.const 255
    local.get $2
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $2
    i32.or
    local.get $2
    i32.const 31
    i32.shr_u
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.01
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.01
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|02
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.04
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.04
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|05
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.07
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.07
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|08
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.010
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.010
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|011
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.013
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.013
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|014
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.016
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.016
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|017
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|020
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.022
   local.get $4
   i32.load $0 offset=8
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.022
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   local.get $1
   local.get $2
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $2
   local.get $1
   local.get $2
   i32.le_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|00
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|00
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.05
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.05
   local.get $1
   local.get $1
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|06
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.05
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|06
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.011
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.011
   local.get $1
   local.get $1
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|012
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.tee $0
     local.get $2
     i32.add
     i32.load8_u $0
     i32.const 255
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.011
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|012
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.load $0 offset=8
  local.set $2
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.017
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.017
   local.get $1
   local.get $2
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $2
   local.get $1
   local.get $2
   i32.le_s
   select
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|018
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.017
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|018
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.026
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.029
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.032
   local.get $4
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_s
   select
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
   local.get $4
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.038
   local.get $4
   i32.load $0 offset=8
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $4
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.add
     i32.load8_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 9
  call $~lib/typedarray/Uint8ClampedArray#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.041
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.047
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.050
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.053
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.056
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 0
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.059
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.062
   local.get $4
   i32.load $0 offset=8
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.add
     i32.load8_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Int16Array#lastIndexOf@varargs (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $3
  end
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   i32.const -1
   local.get $0
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   drop
   local.get $1
   local.set $2
   local.get $4
   i32.const 1
   i32.sub
   local.get $3
   local.get $3
   local.get $4
   i32.ge_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|0
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.get $2
     i32.const 65535
     i32.and
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
     drop
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 7280
  i32.store $0
  local.get $1
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $2
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend16_s
    local.set $1
    local.get $3
    local.get $4
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $3
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    i32.store16 $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.01
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.01
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|02
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.01
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.04
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.04
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|05
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 65535
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.04
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.07
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.07
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|08
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.07
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.010
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.010
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|011
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.010
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.013
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.013
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|014
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.013
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.016
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.016
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|017
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.016
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.019
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.019
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|020
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.019
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.022
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.022
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|023
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $1
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.022
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.const 0
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.const 11
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.const -1
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.const 3
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|024
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.026
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.026
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|027
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.026
     local.get $1
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.029
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.029
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|030
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.029
     local.get $1
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.032
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.032
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|033
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.032
     local.get $1
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.035
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.035
   local.get $1
   i32.const 10
   i32.sub
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|036
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.035
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.038
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.038
   local.get $1
   i32.const 11
   i32.sub
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|039
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.038
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 9
  call $~lib/typedarray/Int16Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.041
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.041
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.044
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.044
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.047
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.047
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.050
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.050
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.053
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.053
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.056
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.056
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.059
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.059
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.062
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.062
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 7280
  i32.store $0
  local.get $1
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $2
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    local.set $1
    local.get $3
    local.get $4
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $3
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    i32.store16 $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|0
   end
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.01
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.01
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|02
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.01
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.04
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.04
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|05
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 65535
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.04
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.07
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.07
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|08
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.07
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.010
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.010
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|011
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.010
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.013
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.013
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|014
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.013
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.016
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.016
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|017
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.016
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.019
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.019
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|020
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.019
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.022
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.022
   local.get $2
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|023
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $1
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.022
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.const 0
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.const 11
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.const -1
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $4
  i32.const 3
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   i32.const 4
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 4
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|024
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.026
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.026
   i32.const 3
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 3
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|027
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.026
     local.get $1
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.029
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.029
   i32.const 2
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 2
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|030
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.029
     local.get $1
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.032
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.032
   i32.const 100
   local.get $0
   i32.const 1
   i32.sub
   local.get $0
   i32.const 100
   i32.gt_s
   select
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|033
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.032
     local.get $1
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.035
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.035
   local.get $1
   i32.const 10
   i32.sub
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|036
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.035
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.038
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.038
   local.get $1
   i32.const 11
   i32.sub
   local.set $0
   local.get $4
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|039
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.038
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.const 9
  call $~lib/typedarray/Uint16Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.041
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.041
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.044
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.044
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.047
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.047
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.050
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.050
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.053
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.053
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.056
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.056
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.059
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.059
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $0
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.062
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $0
     local.tee $1
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.062
     local.get $1
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 7280
  i32.store $0
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int32Array#constructor
  local.tee $3
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $2
   local.get $4
   i32.gt_s
   if
    local.get $4
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $0
    local.get $4
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    i32.store $0
    local.get $4
    i32.const 1
    i32.add
    local.set $4
    br $for-loop|0
   end
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.01
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.01
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|02
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.04
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.04
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|05
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const -1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.07
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.07
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|08
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.010
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.010
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|011
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.013
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.013
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|014
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.016
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.016
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|017
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.019
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.019
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|020
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.022
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.022
   local.get $2
   i32.const 100
   i32.sub
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   i32.const -1
   local.get $3
   local.tee $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
   drop
   local.get $0
   i32.const 1
   i32.sub
   local.get $2
   local.get $0
   local.get $2
   i32.le_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|00
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|00
    end
   end
   i32.const -1
  end
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.05 (result i32)
   i32.const -1
   local.get $3
   local.tee $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.05
   drop
   local.get $0
   i32.const 1
   i32.sub
   local.get $2
   local.get $0
   local.get $2
   i32.le_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|06
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.05
     drop
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|06
    end
   end
   i32.const -1
  end
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.011 (result i32)
   i32.const -1
   local.get $3
   local.tee $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.011
   drop
   local.get $0
   i32.const 1
   i32.sub
   local.get $2
   local.get $0
   local.get $2
   i32.le_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|012
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const -1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.011
     drop
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|012
    end
   end
   i32.const -1
  end
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.017 (result i32)
   i32.const -1
   local.get $3
   local.tee $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.017
   drop
   local.get $0
   i32.const 1
   i32.sub
   local.get $2
   local.get $0
   local.get $2
   i32.le_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|018
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.017
     drop
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|018
    end
   end
   i32.const -1
  end
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.019
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.026
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.029
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.032
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.035
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.038
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Int32Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.041
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|042
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.044
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|045
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.047
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|048
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.050
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|051
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.053
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|054
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.056
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|057
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.059
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|060
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.062
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|063
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 7280
  i32.store $0
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $3
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $2
   local.get $4
   i32.gt_s
   if
    local.get $4
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $0
    local.get $4
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    i32.store $0
    local.get $4
    i32.const 1
    i32.add
    local.set $4
    br $for-loop|0
   end
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|0
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.01
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.01
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|02
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.04
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.04
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|05
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const -1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.07
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.07
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|08
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.010
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.010
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|011
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.013
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.013
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|014
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.016
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.016
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|017
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.019
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.019
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|020
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.022
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.const -100
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.022
   local.get $2
   i32.const 100
   i32.sub
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   i32.const -1
   local.get $3
   local.tee $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
   drop
   local.get $0
   i32.const 1
   i32.sub
   local.get $2
   local.get $0
   local.get $2
   i32.le_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|00
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|00
    end
   end
   i32.const -1
  end
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.05 (result i32)
   i32.const -1
   local.get $3
   local.tee $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.05
   drop
   local.get $0
   i32.const 1
   i32.sub
   local.get $2
   local.get $0
   local.get $2
   i32.le_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|06
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.05
     drop
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|06
    end
   end
   i32.const -1
  end
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.011 (result i32)
   i32.const -1
   local.get $3
   local.tee $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.011
   drop
   local.get $0
   i32.const 1
   i32.sub
   local.get $2
   local.get $0
   local.get $2
   i32.le_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|012
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const -1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.011
     drop
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|012
    end
   end
   i32.const -1
  end
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.017 (result i32)
   i32.const -1
   local.get $3
   local.tee $1
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.017
   drop
   local.get $0
   i32.const 1
   i32.sub
   local.get $2
   local.get $0
   local.get $2
   i32.le_s
   select
   local.set $0
   local.get $1
   i32.load $0 offset=4
   local.set $1
   loop $while-continue|018
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.017
     drop
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $while-continue|018
    end
   end
   i32.const -1
  end
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.019
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.026
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.029
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.032
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_s
   select
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.035
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.038
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $3
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 9
  call $~lib/typedarray/Uint32Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.041
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|042
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 3
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.044
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|045
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 4
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.047
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|048
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.050
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|051
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 9
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.053
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|054
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 10
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.056
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.eqz
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|057
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 11
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.059
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|060
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.062
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   local.get $2
   i32.const 2
   i32.le_s
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|063
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 5
     i32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 7280
  i32.store $0
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Int64Array#constructor
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $5
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.01
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.01
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|02
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.04
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.04
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|05
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const -1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.07
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.07
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|08
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.010
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.010
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|011
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.013
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.013
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|014
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.016
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.016
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|017
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.019
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.019
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|020
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.022
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.022
   local.get $3
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $2
  local.tee $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   local.get $2
   local.get $3
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $3
   local.get $2
   local.get $3
   i32.le_s
   select
   local.get $3
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|00
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|00
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.05
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.05
   local.get $2
   local.get $2
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|06
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.05
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|06
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.011
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.011
   local.get $2
   local.get $2
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|012
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const -1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.011
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|012
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  local.tee $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.017
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.017
   local.get $1
   local.get $3
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $3
   local.get $1
   local.get $3
   i32.le_s
   select
   local.get $3
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|018
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.017
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|018
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.019
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.026
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.029
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.032
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.035
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.038
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 9
  call $~lib/typedarray/Int64Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.041
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.044
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 4
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.047
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.050
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 9
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.053
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 10
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.056
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.059
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.062
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 7280
  i32.store $0
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $5
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.eqz
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.01
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.01
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|02
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.04
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.04
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|05
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const -1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.07
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.07
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|08
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.010
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.010
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|011
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.013
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.013
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|014
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.016
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.016
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|017
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.019
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.019
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|020
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.022
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.022
   local.get $3
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $2
  local.tee $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   local.get $2
   local.get $3
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $3
   local.get $2
   local.get $3
   i32.le_s
   select
   local.get $3
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|00
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.eqz
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|00
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.05
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.05
   local.get $2
   local.get $2
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|06
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.05
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|06
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.011
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.011
   local.get $2
   local.get $2
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|012
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const -1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.011
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|012
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  local.tee $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.017
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.017
   local.get $1
   local.get $3
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $3
   local.get $1
   local.get $3
   i32.le_s
   select
   local.get $3
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|018
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.017
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|018
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.019
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.026
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.029
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.032
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.035
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.038
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 1
     i64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 9
  call $~lib/typedarray/Uint64Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.041
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 3
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.044
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 4
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.047
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.050
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 9
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.053
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 10
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.056
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 11
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.059
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.062
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.const 5
     i64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 f32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 7280
  i32.store $0
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Float32Array#constructor
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    local.set $5
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    f32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 0
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.01
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.01
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|02
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 11
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.04
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.04
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|05
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const -1
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.07
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.07
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|08
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.010
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.010
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|011
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.013
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.013
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|014
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.016
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.016
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|017
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.019
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.019
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|020
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.022
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.022
   local.get $3
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $2
  local.tee $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $2
   local.get $3
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $3
   local.get $2
   local.get $3
   i32.le_s
   select
   local.get $3
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|00
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 0
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|00
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.05
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.05
   local.get $2
   local.get $2
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|06
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 11
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.05
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|06
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.011
   local.get $0
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.011
   local.get $2
   local.get $2
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|012
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const -1
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.011
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|012
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  local.tee $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.017
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.017
   local.get $1
   local.get $3
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $3
   local.get $1
   local.get $3
   i32.le_s
   select
   local.get $3
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|018
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.017
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|018
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.019
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.026
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.029
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.032
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.035
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.038
   local.get $2
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 1
     f32.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 9
  call $~lib/typedarray/Float32Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.041
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 3
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.044
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 4
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.047
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 5
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.050
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 9
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.053
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 10
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.056
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 11
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.059
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 5
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.062
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const 5
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 f64)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 7280
  i32.store $0
  local.get $0
  i32.const 7292
  i32.load $0
  local.tee $0
  call $~lib/typedarray/Float64Array#constructor
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|0
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    i32.const 7292
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7284
    i32.load $0
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    local.set $5
    local.get $1
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    f64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 0
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.01
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.01
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|02
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 11
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|02
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.04
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.04
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|05
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const -1
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.04
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|05
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.07
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.07
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|08
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.07
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|08
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.010
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.010
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|011
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.010
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|011
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.013
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 3
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.013
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|014
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.013
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|014
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 4
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.016
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 4
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.016
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|017
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.016
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|017
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 10
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.019
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.get $4
   i32.const 10
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.019
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|020
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.019
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|020
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.022
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.022
   local.get $3
   i32.const 100
   i32.sub
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|023
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.022
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|023
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $2
  local.tee $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $2
   local.get $3
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $3
   local.get $2
   local.get $3
   i32.le_s
   select
   local.get $3
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|00
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 0
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|00
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.05
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.05
   local.get $2
   local.get $2
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|06
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 11
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.05
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|06
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.011
   local.get $0
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $2
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.011
   local.get $2
   local.get $2
   i32.add
   local.get $2
   i32.const 1
   i32.sub
   local.get $2
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $0
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|012
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const -1
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.011
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|012
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  local.tee $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.017
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.017
   local.get $1
   local.get $3
   i32.add
   local.get $1
   i32.const 1
   i32.sub
   local.get $3
   local.get $1
   local.get $3
   i32.le_s
   select
   local.get $3
   i32.const 0
   i32.lt_s
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|018
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.017
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|018
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.019
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.019
   i32.const 4
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 4
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|024
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.019
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|024
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.026
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.026
   i32.const 3
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 3
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|027
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.026
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|027
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.029
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.029
   i32.const 2
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 2
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|030
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.029
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|030
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $0
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.032
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.032
   i32.const 100
   local.get $1
   i32.const 1
   i32.sub
   local.get $1
   i32.const 100
   i32.gt_u
   select
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|033
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.032
     local.get $0
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|033
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.035
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.035
   local.get $0
   i32.const 10
   i32.sub
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|036
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.035
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|036
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const -1
  local.set $1
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.038
   local.get $2
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $0
   i32.eqz
   br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.038
   local.get $0
   i32.const 11
   i32.sub
   local.set $1
   local.get $2
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|039
    local.get $1
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 1
     f64.eq
     br_if $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.038
     local.get $1
     i32.const 1
     i32.sub
     local.set $1
     br $while-continue|039
    end
   end
   i32.const -1
   local.set $1
  end
  local.get $1
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Float64Array#subarray
  local.tee $4
  i32.store $0 offset=8
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.041
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.041
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|042
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 3
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.041
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|042
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.044
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.044
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|045
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 4
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.044
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|045
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.047
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.047
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|048
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 5
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.047
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|048
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.050
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.050
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|051
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 9
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.050
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|051
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.053
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.053
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|054
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 10
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.053
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|054
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.056
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.056
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|057
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 11
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.056
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  i32.const 1
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.059
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 1
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.059
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|060
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 5
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  i32.const 2
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.062
   local.get $4
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $3
   i32.eqz
   local.get $3
   i32.const 2
   i32.le_u
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.062
   local.get $4
   i32.load $0 offset=4
   local.set $2
   loop $while-continue|063
    local.get $1
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const 5
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.062
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|063
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint8Array.wrap@varargs (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $1
   end
   i32.const -1
   local.set $2
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $3
  local.get $1
  i32.lt_u
  if
   unreachable
  end
  local.get $2
  i32.const 0
  i32.lt_s
  if
   local.get $2
   i32.const -1
   i32.eq
   if (result i32)
    local.get $3
    local.get $1
    i32.sub
   else
    unreachable
   end
   local.set $2
  else
   local.get $1
   local.get $2
   i32.add
   local.get $3
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  local.get $3
  local.get $0
  i32.store $0
  local.get $0
  if
   local.get $3
   local.get $0
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $2
  i32.store $0 offset=8
  local.get $3
  local.get $0
  local.get $1
  i32.add
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
 )
 (func $~lib/util/sort/insertionSort<i8> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.add
    local.tee $3
    i32.load8_s $0 offset=1
    local.tee $6
    local.set $5
    local.get $3
    i32.load8_s $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.add
       i32.load8_s $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.add
       local.get $8
       i32.store8 $0 offset=2
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.add
    local.get $3
    i32.store8 $0 offset=2
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.add
       i32.load8_s $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.add
       local.get $3
       i32.store8 $0 offset=1
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.add
    local.get $5
    i32.store8 $0 offset=1
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i8> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.add
  i32.load8_s $0
  local.set $5
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  local.get $0
  i32.add
  i32.load8_s $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.add
     local.tee $5
     i32.load8_s $0 offset=1
     local.set $6
     local.get $5
     i32.load8_s $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     local.tee $3
     i32.load8_s $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.add
     local.tee $3
     i32.load8_s $0
     i32.store8 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store8 $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.add
     local.tee $1
     i32.load8_s $0 offset=1
     local.set $5
     local.get $1
     i32.load8_s $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<i8> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    local.get $4
    i32.add
    local.get $0
    local.get $2
    i32.add
    i32.load8_s $0
    i32.store8 $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.add
    local.get $0
    local.get $6
    i32.add
    i32.load8_s $0 offset=1
    i32.store8 $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.add
    i32.load8_s $0
    local.set $8
    local.get $2
    local.get $4
    i32.add
    i32.load8_s $0
    local.set $7
    i32.const 2
    global.set $~argumentsLength
    local.get $8
    local.get $7
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     local.get $8
     i32.store8 $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.add
     local.get $7
     i32.store8 $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i8> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load8_s $0
     local.set $5
     local.get $0
     i32.load8_s $0 offset=1
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $5
     local.get $5
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     i32.store8 $0
     local.get $0
     i32.load8_s $0 offset=2
     local.set $4
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $3
     local.get $1
     select
     local.tee $3
     local.get $4
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $4
     local.get $3
     local.get $1
     select
     i32.store8 $0 offset=1
     local.get $0
     local.get $3
     local.get $4
     local.get $1
     select
     i32.store8 $0 offset=2
    end
    local.get $0
    i32.load8_s $0
    local.set $4
    local.get $0
    i32.load8_s $0 offset=1
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $4
    local.get $4
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    i32.store8 $0
    local.get $0
    local.get $4
    local.get $3
    local.get $1
    select
    i32.store8 $0 offset=1
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<i8>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<i8>
  local.tee $7
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $7
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<i8>
  end
  loop $while-continue|2
   local.get $7
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.add
    local.tee $5
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<i8>
    local.tee $6
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $9
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $6
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<i8>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $5
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $7
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<i8>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $7
    i32.store $0
    local.get $5
    local.set $3
    local.get $6
    local.set $7
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<i8>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<i8>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.extend8_s
  local.get $1
  i32.extend8_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.extend8_s
  local.tee $1
  local.get $0
  i32.extend8_s
  local.tee $0
  i32.gt_s
  local.get $0
  local.get $1
  i32.gt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u8> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.add
    local.tee $3
    i32.load8_u $0 offset=1
    local.tee $6
    local.set $5
    local.get $3
    i32.load8_u $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.add
       i32.load8_u $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.add
       local.get $8
       i32.store8 $0 offset=2
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.add
    local.get $3
    i32.store8 $0 offset=2
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.add
       i32.load8_u $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.add
       local.get $3
       i32.store8 $0 offset=1
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.add
    local.get $5
    i32.store8 $0 offset=1
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u8> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.add
  i32.load8_u $0
  local.set $5
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  local.get $0
  i32.add
  i32.load8_u $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.add
     local.tee $5
     i32.load8_u $0 offset=1
     local.set $6
     local.get $5
     i32.load8_u $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     local.tee $3
     i32.load8_u $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.add
     local.tee $3
     i32.load8_u $0
     i32.store8 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store8 $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.add
     local.tee $1
     i32.load8_u $0 offset=1
     local.set $5
     local.get $1
     i32.load8_u $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<u8> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    local.get $4
    i32.add
    local.get $0
    local.get $2
    i32.add
    i32.load8_u $0
    i32.store8 $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.add
    local.get $0
    local.get $6
    i32.add
    i32.load8_u $0 offset=1
    i32.store8 $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.add
    i32.load8_u $0
    local.set $8
    local.get $2
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $7
    i32.const 2
    global.set $~argumentsLength
    local.get $8
    local.get $7
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.add
     local.get $8
     i32.store8 $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.add
     local.get $7
     i32.store8 $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u8> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load8_u $0
     local.set $5
     local.get $0
     i32.load8_u $0 offset=1
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $5
     local.get $5
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     i32.store8 $0
     local.get $0
     i32.load8_u $0 offset=2
     local.set $4
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $3
     local.get $1
     select
     local.tee $3
     local.get $4
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $4
     local.get $3
     local.get $1
     select
     i32.store8 $0 offset=1
     local.get $0
     local.get $3
     local.get $4
     local.get $1
     select
     i32.store8 $0 offset=2
    end
    local.get $0
    i32.load8_u $0
    local.set $4
    local.get $0
    i32.load8_u $0 offset=1
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $4
    local.get $4
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    i32.store8 $0
    local.get $0
    local.get $4
    local.get $3
    local.get $1
    select
    i32.store8 $0 offset=1
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<u8>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<u8>
  local.tee $7
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $7
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<u8>
  end
  loop $while-continue|2
   local.get $7
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.add
    local.tee $5
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<u8>
    local.tee $6
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $9
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $6
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<u8>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $5
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $7
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<u8>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $7
    i32.store $0
    local.get $5
    local.set $3
    local.get $6
    local.set $7
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<u8>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<u8>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.const 255
  i32.and
  local.tee $0
  local.get $1
  i32.const 255
  i32.and
  local.tee $1
  i32.gt_u
  local.get $0
  local.get $1
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.const 255
  i32.and
  local.tee $1
  local.get $0
  i32.const 255
  i32.and
  local.tee $0
  i32.gt_u
  local.get $0
  local.get $1
  i32.gt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i16> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.tee $3
    i32.load16_s $0 offset=2
    local.tee $6
    local.set $5
    local.get $3
    i32.load16_s $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       i32.load16_s $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       local.get $8
       i32.store16 $0 offset=4
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.store16 $0 offset=4
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       i32.load16_s $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       local.get $3
       i32.store16 $0 offset=2
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    local.get $5
    i32.store16 $0 offset=2
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i16> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.tee $5
     i32.load16_s $0 offset=2
     local.set $6
     local.get $5
     i32.load16_s $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.tee $3
     i32.load16_s $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     local.tee $3
     i32.load16_s $0
     i32.store16 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store16 $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.tee $1
     i32.load16_s $0 offset=2
     local.set $5
     local.get $1
     i32.load16_s $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<i16> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    local.tee $8
    local.get $4
    i32.add
    local.get $0
    local.get $8
    i32.add
    i32.load16_s $0
    i32.store16 $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0 offset=2
    i32.store16 $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.get $7
     i32.store16 $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.get $8
     i32.store16 $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i16> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load16_s $0
     local.set $1
     local.get $0
     i32.load16_s $0 offset=2
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $1
     local.get $1
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $4
     select
     i32.store16 $0
     local.get $0
     i32.load16_s $0 offset=4
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $1
     local.get $3
     local.get $4
     select
     local.tee $1
     local.get $5
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $3
     local.get $0
     local.get $5
     local.get $1
     local.get $3
     select
     i32.store16 $0 offset=2
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     select
     i32.store16 $0 offset=4
    end
    local.get $0
    i32.load16_s $0
    local.set $1
    local.get $0
    i32.load16_s $0 offset=2
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $1
    local.get $1
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $2
    select
    i32.store16 $0
    local.get $0
    local.get $1
    local.get $3
    local.get $2
    select
    i32.store16 $0 offset=2
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<i16>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $5
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $7
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $7
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $5
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<i16>
  local.tee $5
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $5
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<i16>
  end
  loop $while-continue|2
   local.get $5
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $6
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<i16>
    local.tee $1
    local.get $6
    i32.sub
    i32.const 1
    i32.add
    local.tee $7
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $6
     local.get $9
     local.get $6
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $1
     local.get $7
     local.get $2
     call $~lib/util/sort/insertionSort<i16>
    end
    local.get $3
    local.get $6
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $1
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $7
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $7
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $5
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<i16>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $7
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $5
    i32.store $0
    local.get $6
    local.set $3
    local.get $1
    local.set $5
    local.get $7
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<i16>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<i16>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.extend16_s
  local.get $1
  i32.extend16_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.extend16_s
  local.tee $1
  local.get $0
  i32.extend16_s
  local.tee $0
  i32.gt_s
  local.get $0
  local.get $1
  i32.gt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u16> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 1
    i32.shl
    i32.add
    local.tee $3
    i32.load16_u $0 offset=2
    local.tee $6
    local.set $5
    local.get $3
    i32.load16_u $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       i32.load16_u $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       local.get $8
       i32.store16 $0 offset=4
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    local.get $3
    i32.store16 $0 offset=4
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       i32.load16_u $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.const 1
       i32.shl
       i32.add
       local.get $3
       i32.store16 $0 offset=2
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    local.get $5
    i32.store16 $0 offset=2
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u16> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.tee $5
     i32.load16_u $0 offset=2
     local.set $6
     local.get $5
     i32.load16_u $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.tee $3
     i32.load16_u $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 1
     i32.shl
     i32.add
     local.tee $3
     i32.load16_u $0
     i32.store16 $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store16 $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 1
     i32.shl
     i32.add
     local.tee $1
     i32.load16_u $0 offset=2
     local.set $5
     local.get $1
     i32.load16_u $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<u16> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 1
    i32.shl
    local.tee $8
    local.get $4
    i32.add
    local.get $0
    local.get $8
    i32.add
    i32.load16_u $0
    i32.store16 $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0 offset=2
    i32.store16 $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.get $7
     i32.store16 $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 1
     i32.shl
     i32.add
     local.get $8
     i32.store16 $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u16> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load16_u $0
     local.set $1
     local.get $0
     i32.load16_u $0 offset=2
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $1
     local.get $1
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $4
     select
     i32.store16 $0
     local.get $0
     i32.load16_u $0 offset=4
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $1
     local.get $3
     local.get $4
     select
     local.tee $1
     local.get $5
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $3
     local.get $0
     local.get $5
     local.get $1
     local.get $3
     select
     i32.store16 $0 offset=2
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     select
     i32.store16 $0 offset=4
    end
    local.get $0
    i32.load16_u $0
    local.set $1
    local.get $0
    i32.load16_u $0 offset=2
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $1
    local.get $1
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $2
    select
    i32.store16 $0
    local.get $0
    local.get $1
    local.get $3
    local.get $2
    select
    i32.store16 $0 offset=2
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<u16>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $5
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $7
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $7
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $5
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<u16>
  local.tee $5
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $5
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<u16>
  end
  loop $while-continue|2
   local.get $5
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $6
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<u16>
    local.tee $1
    local.get $6
    i32.sub
    i32.const 1
    i32.add
    local.tee $7
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $6
     local.get $9
     local.get $6
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $1
     local.get $7
     local.get $2
     call $~lib/util/sort/insertionSort<u16>
    end
    local.get $3
    local.get $6
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $1
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $7
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $7
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $5
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<u16>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $7
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $5
    i32.store $0
    local.get $6
    local.set $3
    local.get $1
    local.set $5
    local.get $7
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<u16>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<u16>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.const 65535
  i32.and
  local.tee $0
  local.get $1
  i32.const 65535
  i32.and
  local.tee $1
  i32.gt_u
  local.get $0
  local.get $1
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.const 65535
  i32.and
  local.tee $1
  local.get $0
  i32.const 65535
  i32.and
  local.tee $0
  i32.gt_u
  local.get $0
  local.get $1
  i32.gt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i32> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 2
    i32.shl
    i32.add
    local.tee $3
    i32.load $0 offset=4
    local.tee $6
    local.set $5
    local.get $3
    i32.load $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       local.get $8
       i32.store $0 offset=8
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    local.get $3
    i32.store $0 offset=8
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       local.get $3
       i32.store $0 offset=4
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    i32.store $0 offset=4
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i32> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $5
     i32.load $0 offset=4
     local.set $6
     local.get $5
     i32.load $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     i32.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     i32.load $0
     i32.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $1
     i32.load $0 offset=4
     local.set $5
     local.get $1
     i32.load $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<i32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 2
    i32.shl
    local.tee $8
    local.get $4
    i32.add
    local.get $0
    local.get $8
    i32.add
    i32.load $0
    i32.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    i32.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $7
     i32.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $8
     i32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i32> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load $0
     local.set $1
     local.get $0
     i32.load $0 offset=4
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $1
     local.get $1
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $4
     select
     i32.store $0
     local.get $0
     i32.load $0 offset=8
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $1
     local.get $3
     local.get $4
     select
     local.tee $1
     local.get $5
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $3
     local.get $0
     local.get $5
     local.get $1
     local.get $3
     select
     i32.store $0 offset=4
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     select
     i32.store $0 offset=8
    end
    local.get $0
    i32.load $0
    local.set $1
    local.get $0
    i32.load $0 offset=4
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $1
    local.get $1
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $2
    select
    i32.store $0
    local.get $0
    local.get $1
    local.get $3
    local.get $2
    select
    i32.store $0 offset=4
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<i32>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $5
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $7
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $7
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $5
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<i32>
  local.tee $5
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $5
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<i32>
  end
  loop $while-continue|2
   local.get $5
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $6
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<i32>
    local.tee $1
    local.get $6
    i32.sub
    i32.const 1
    i32.add
    local.tee $7
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $6
     local.get $9
     local.get $6
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $1
     local.get $7
     local.get $2
     call $~lib/util/sort/insertionSort<i32>
    end
    local.get $3
    local.get $6
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $1
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $7
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $7
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $5
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<i32>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $7
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $5
    i32.store $0
    local.get $6
    local.set $3
    local.get $1
    local.set $5
    local.get $7
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<i32>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<i32>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.lt_s
  local.get $0
  local.get $1
  i32.gt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u32> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $5
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $5
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 2
    i32.shl
    i32.add
    local.tee $3
    i32.load $0 offset=4
    local.tee $6
    local.set $5
    local.get $3
    i32.load $0
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $3
    local.get $6
    local.get $4
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $3
     local.set $5
     local.get $6
     local.set $3
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $6
    loop $while-continue|1
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $3
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       local.get $8
       i32.store $0 offset=8
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    local.get $3
    i32.store $0 offset=8
    loop $while-continue|2
     local.get $1
     local.get $6
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $3
       i32.const 2
       global.set $~argumentsLength
       local.get $3
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $6
       i32.const 2
       i32.shl
       i32.add
       local.get $3
       i32.store $0 offset=4
       local.get $6
       i32.const 1
       i32.sub
       local.set $6
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    i32.store $0 offset=4
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u32> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $6
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $6
  local.get $3
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $5
     i32.load $0 offset=4
     local.set $6
     local.get $5
     i32.load $0
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $6
     local.get $5
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     i32.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     i32.load $0
     i32.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i32.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $1
     i32.load $0 offset=4
     local.set $5
     local.get $1
     i32.load $0
     local.set $1
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $1
     local.get $3
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<u32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $7
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 2
    i32.shl
    local.tee $8
    local.get $4
    i32.add
    local.get $0
    local.get $8
    i32.add
    i32.load $0
    i32.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $7
    local.get $6
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    i32.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $7
     i32.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $8
     i32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u32> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i32.load $0
     local.set $1
     local.get $0
     i32.load $0 offset=4
     local.set $3
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $3
     local.get $1
     local.get $1
     local.get $3
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $4
     select
     i32.store $0
     local.get $0
     i32.load $0 offset=8
     local.set $5
     i32.const 2
     global.set $~argumentsLength
     local.get $1
     local.get $3
     local.get $4
     select
     local.tee $1
     local.get $5
     local.get $2
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $3
     local.get $0
     local.get $5
     local.get $1
     local.get $3
     select
     i32.store $0 offset=4
     local.get $0
     local.get $1
     local.get $5
     local.get $3
     select
     i32.store $0 offset=8
    end
    local.get $0
    i32.load $0
    local.set $1
    local.get $0
    i32.load $0 offset=4
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $1
    local.get $1
    local.get $3
    local.get $2
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $2
    select
    i32.store $0
    local.get $0
    local.get $1
    local.get $3
    local.get $2
    select
    i32.store $0 offset=4
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<u32>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $5
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $7
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $7
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $10
  i32.add
  local.set $11
  loop $for-loop|1
   local.get $5
   local.get $8
   i32.gt_u
   if
    local.get $10
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $12
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $9
  local.get $2
  call $~lib/util/sort/extendRunRight<u32>
  local.tee $5
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $9
   local.get $9
   i32.const 31
   i32.ge_s
   select
   local.tee $5
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<u32>
  end
  loop $while-continue|2
   local.get $5
   local.get $9
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.const 1
    i32.add
    local.tee $6
    local.get $9
    local.get $2
    call $~lib/util/sort/extendRunRight<u32>
    local.tee $1
    local.get $6
    i32.sub
    i32.const 1
    i32.add
    local.tee $7
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $6
     local.get $9
     local.get $6
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $9
     i32.gt_s
     select
     local.tee $1
     local.get $7
     local.get $2
     call $~lib/util/sort/insertionSort<u32>
    end
    local.get $3
    local.get $6
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $13
    i64.div_u
    local.get $1
    local.get $6
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $13
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $7
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $7
     local.get $8
     i32.lt_u
     if
      local.get $10
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $11
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $5
       local.get $12
       local.get $2
       call $~lib/util/sort/mergeRuns<u32>
       local.get $3
       local.get $10
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $7
    i32.const 2
    i32.shl
    local.tee $4
    local.get $10
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $11
    i32.add
    local.get $5
    i32.store $0
    local.get $6
    local.set $3
    local.get $1
    local.set $5
    local.get $7
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $10
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $11
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $9
     local.get $12
     local.get $2
     call $~lib/util/sort/mergeRuns<u32>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $12
  call $~lib/rt/tlsf/__free
  local.get $10
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<u32>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.gt_u
  local.get $0
  local.get $1
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  local.get $1
  i32.lt_u
  local.get $0
  local.get $1
  i32.gt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i64> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $7
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $7
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    local.tee $3
    i64.load $0 offset=8
    local.tee $8
    local.set $6
    local.get $3
    i64.load $0
    local.set $5
    i32.const 2
    global.set $~argumentsLength
    local.get $5
    local.get $8
    local.get $4
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $5
     local.set $6
     local.get $8
     local.set $5
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $3
    loop $while-continue|1
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $8
       i64.store $0 offset=16
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    i64.store $0 offset=16
    loop $while-continue|2
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $5
       i32.const 2
       global.set $~argumentsLength
       local.get $5
       local.get $6
       local.get $4
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $5
       i64.store $0 offset=8
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    i64.store $0 offset=8
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i64> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  (local $7 i64)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.set $7
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $7
  local.get $3
  i32.load $0
  call_indirect $0 (type $i64_i64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     i64.load $0 offset=8
     local.set $5
     local.get $6
     i64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     i64.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     i64.load $0
     i64.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i64.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $1
     i64.load $0 offset=8
     local.set $5
     local.get $1
     i64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<i64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $9
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 3
    i32.shl
    local.tee $10
    local.get $4
    i32.add
    local.get $0
    local.get $10
    i32.add
    i64.load $0
    i64.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $9
    local.get $6
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    i64.load $0 offset=8
    i64.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $7
     i64.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $8
     i64.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i64> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i64)
  (local $10 i64)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i64.load $0
     local.set $13
     local.get $0
     i64.load $0 offset=8
     local.set $9
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $9
     local.get $13
     local.get $13
     local.get $9
     local.get $2
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     i64.store $0
     local.get $0
     i64.load $0 offset=16
     local.set $10
     i32.const 2
     global.set $~argumentsLength
     local.get $13
     local.get $9
     local.get $1
     select
     local.tee $9
     local.get $10
     local.get $2
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $10
     local.get $9
     local.get $1
     select
     i64.store $0 offset=8
     local.get $0
     local.get $9
     local.get $10
     local.get $1
     select
     i64.store $0 offset=16
    end
    local.get $0
    i64.load $0
    local.set $10
    local.get $0
    i64.load $0 offset=8
    local.set $9
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $9
    local.get $10
    local.get $10
    local.get $9
    local.get $2
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    i64.store $0
    local.get $0
    local.get $10
    local.get $9
    local.get $1
    select
    i64.store $0 offset=8
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<i64>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $12
  i32.add
  local.set $14
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $12
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $15
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $11
  local.get $2
  call $~lib/util/sort/extendRunRight<i64>
  local.tee $6
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $11
   local.get $11
   i32.const 31
   i32.ge_s
   select
   local.tee $6
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<i64>
  end
  loop $while-continue|2
   local.get $6
   local.get $11
   i32.lt_s
   if
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $5
    local.get $11
    local.get $2
    call $~lib/util/sort/extendRunRight<i64>
    local.tee $7
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $11
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $11
     i32.gt_s
     select
     local.tee $7
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<i64>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $11
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $9
    i64.div_u
    local.get $5
    local.get $7
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $12
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $14
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $6
       local.get $15
       local.get $2
       call $~lib/util/sort/mergeRuns<i64>
       local.get $3
       local.get $12
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $12
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $14
    i32.add
    local.get $6
    i32.store $0
    local.get $5
    local.set $3
    local.get $7
    local.set $6
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $12
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $14
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $11
     local.get $15
     local.get $2
     call $~lib/util/sort/mergeRuns<i64>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $15
  call $~lib/rt/tlsf/__free
  local.get $12
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<i64>~anonymous|0 (type $i64_i64_=>_i32) (param $0 i64) (param $1 i64) (result i32)
  local.get $0
  local.get $1
  i64.gt_s
  local.get $0
  local.get $1
  i64.lt_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i64_=>_i32) (param $0 i64) (param $1 i64) (result i32)
  local.get $0
  local.get $1
  i64.lt_s
  local.get $0
  local.get $1
  i64.gt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u64> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 i64)
  (local $6 i64)
  (local $7 i32)
  (local $8 i64)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $7
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $7
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 3
    i32.shl
    i32.add
    local.tee $3
    i64.load $0 offset=8
    local.tee $8
    local.set $6
    local.get $3
    i64.load $0
    local.set $5
    i32.const 2
    global.set $~argumentsLength
    local.get $5
    local.get $8
    local.get $4
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $5
     local.set $6
     local.get $8
     local.set $5
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $3
    loop $while-continue|1
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $8
       i64.store $0 offset=16
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $5
    i64.store $0 offset=16
    loop $while-continue|2
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $5
       i32.const 2
       global.set $~argumentsLength
       local.get $5
       local.get $6
       local.get $4
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $3
       i32.const 3
       i32.shl
       i32.add
       local.get $5
       i64.store $0 offset=8
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    i64.store $0 offset=8
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u64> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 i32)
  (local $7 i64)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.set $7
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $7
  local.get $3
  i32.load $0
  call_indirect $0 (type $i64_i64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $6
     i64.load $0 offset=8
     local.set $5
     local.get $6
     i64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     i64.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     local.tee $3
     i64.load $0
     i64.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     i64.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 3
     i32.shl
     i32.add
     local.tee $1
     i64.load $0 offset=8
     local.set $5
     local.get $1
     i64.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<u64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 i64)
  (local $8 i64)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $9
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 3
    i32.shl
    local.tee $10
    local.get $4
    i32.add
    local.get $0
    local.get $10
    i32.add
    i64.load $0
    i64.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $9
    local.get $6
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    i64.load $0 offset=8
    i64.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $7
     i64.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 3
     i32.shl
     i32.add
     local.get $8
     i64.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u64> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i64)
  (local $10 i64)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  (local $14 i32)
  (local $15 i32)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     i64.load $0
     local.set $13
     local.get $0
     i64.load $0 offset=8
     local.set $9
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $9
     local.get $13
     local.get $13
     local.get $9
     local.get $2
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     i64.store $0
     local.get $0
     i64.load $0 offset=16
     local.set $10
     i32.const 2
     global.set $~argumentsLength
     local.get $13
     local.get $9
     local.get $1
     select
     local.tee $9
     local.get $10
     local.get $2
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $10
     local.get $9
     local.get $1
     select
     i64.store $0 offset=8
     local.get $0
     local.get $9
     local.get $10
     local.get $1
     select
     i64.store $0 offset=16
    end
    local.get $0
    i64.load $0
    local.set $10
    local.get $0
    i64.load $0 offset=8
    local.set $9
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $9
    local.get $10
    local.get $10
    local.get $9
    local.get $2
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    i64.store $0
    local.get $0
    local.get $10
    local.get $9
    local.get $1
    select
    i64.store $0 offset=8
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<u64>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $12
  i32.add
  local.set $14
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $12
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $15
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $11
  local.get $2
  call $~lib/util/sort/extendRunRight<u64>
  local.tee $6
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $11
   local.get $11
   i32.const 31
   i32.ge_s
   select
   local.tee $6
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<u64>
  end
  loop $while-continue|2
   local.get $6
   local.get $11
   i32.lt_s
   if
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $5
    local.get $11
    local.get $2
    call $~lib/util/sort/extendRunRight<u64>
    local.tee $7
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $11
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $11
     i32.gt_s
     select
     local.tee $7
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<u64>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $11
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $9
    i64.div_u
    local.get $5
    local.get $7
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $9
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $12
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $14
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $6
       local.get $15
       local.get $2
       call $~lib/util/sort/mergeRuns<u64>
       local.get $3
       local.get $12
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $12
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $14
    i32.add
    local.get $6
    i32.store $0
    local.get $5
    local.set $3
    local.get $7
    local.set $6
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $12
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $14
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $11
     local.get $15
     local.get $2
     call $~lib/util/sort/mergeRuns<u64>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $15
  call $~lib/rt/tlsf/__free
  local.get $12
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<u64>~anonymous|0 (type $i64_i64_=>_i32) (param $0 i64) (param $1 i64) (result i32)
  local.get $0
  local.get $1
  i64.gt_u
  local.get $0
  local.get $1
  i64.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i64_=>_i32) (param $0 i64) (param $1 i64) (result i32)
  local.get $0
  local.get $1
  i64.lt_u
  local.get $0
  local.get $1
  i64.gt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<f32> (type $i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32)
  (local $5 f32)
  (local $6 f32)
  (local $7 i32)
  (local $8 f32)
  local.get $1
  local.get $3
  local.get $2
  local.get $1
  i32.sub
  i32.const 1
  i32.add
  local.tee $7
  local.get $3
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $7
  i32.const 1
  i32.and
  local.get $3
  select
  i32.add
  local.set $7
  loop $for-loop|0
   local.get $2
   local.get $7
   i32.ge_s
   if
    local.get $0
    local.get $7
    i32.const 2
    i32.shl
    i32.add
    local.tee $3
    f32.load $0 offset=4
    local.tee $8
    local.set $6
    local.get $3
    f32.load $0
    local.set $5
    i32.const 2
    global.set $~argumentsLength
    local.get $5
    local.get $8
    local.get $4
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $5
     local.set $6
     local.get $8
     local.set $5
    end
    local.get $7
    i32.const 1
    i32.sub
    local.set $3
    loop $while-continue|1
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|1
       local.get $0
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       local.set $8
       i32.const 2
       global.set $~argumentsLength
       local.get $8
       local.get $5
       local.get $4
       i32.load $0
       call_indirect $0 (type $f32_f32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|1
       local.get $0
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       local.get $8
       f32.store $0 offset=8
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|1
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    f32.store $0 offset=8
    loop $while-continue|2
     local.get $1
     local.get $3
     i32.le_s
     if
      block $while-break|2
       local.get $0
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       local.set $5
       i32.const 2
       global.set $~argumentsLength
       local.get $5
       local.get $6
       local.get $4
       i32.load $0
       call_indirect $0 (type $f32_f32_=>_i32)
       i32.const 0
       i32.le_s
       br_if $while-break|2
       local.get $0
       local.get $3
       i32.const 2
       i32.shl
       i32.add
       local.get $5
       f32.store $0 offset=4
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       br $while-continue|2
      end
     end
    end
    local.get $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.get $6
    f32.store $0 offset=4
    local.get $7
    i32.const 2
    i32.add
    local.set $7
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<f32> (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 f32)
  (local $6 i32)
  (local $7 f32)
  local.get $1
  local.get $2
  i32.eq
  if
   local.get $1
   return
  end
  local.get $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  local.set $5
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.tee $4
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  local.set $7
  i32.const 2
  global.set $~argumentsLength
  local.get $5
  local.get $7
  local.get $3
  i32.load $0
  call_indirect $0 (type $f32_f32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     f32.load $0 offset=4
     local.set $5
     local.get $6
     f32.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|0
    end
   end
   local.get $4
   local.set $2
   loop $while-continue|1
    local.get $1
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     f32.load $0
     local.set $5
     local.get $3
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     local.tee $3
     f32.load $0
     f32.store $0
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $5
     f32.store $0
     local.get $2
     i32.const 1
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $2
    local.get $4
    i32.gt_s
    if (result i32)
     local.get $0
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     local.tee $1
     f32.load $0 offset=4
     local.set $5
     local.get $1
     f32.load $0
     local.set $7
     i32.const 2
     global.set $~argumentsLength
     local.get $5
     local.get $7
     local.get $3
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    if
     local.get $4
     i32.const 1
     i32.add
     local.set $4
     br $while-continue|2
    end
   end
  end
  local.get $4
 )
 (func $~lib/util/sort/mergeRuns<f32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32)
  (local $6 i32)
  (local $7 f32)
  (local $8 f32)
  (local $9 i32)
  (local $10 i32)
  local.get $2
  i32.const 1
  i32.sub
  local.tee $6
  local.get $3
  i32.add
  local.set $9
  local.get $6
  i32.const 1
  i32.add
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.sub
    local.tee $2
    i32.const 2
    i32.shl
    local.tee $10
    local.get $4
    i32.add
    local.get $0
    local.get $10
    i32.add
    f32.load $0
    f32.store $0
    br $for-loop|0
   end
  end
  loop $for-loop|1
   local.get $3
   local.get $6
   i32.gt_s
   if
    local.get $4
    local.get $9
    local.get $6
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    f32.load $0 offset=4
    f32.store $0
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  loop $for-loop|2
   local.get $1
   local.get $3
   i32.le_s
   if
    local.get $4
    local.get $6
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $7
    local.get $4
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $8
    i32.const 2
    global.set $~argumentsLength
    local.get $7
    local.get $8
    local.get $5
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $7
     f32.store $0
     local.get $6
     i32.const 1
     i32.sub
     local.set $6
    else
     local.get $0
     local.get $1
     i32.const 2
     i32.shl
     i32.add
     local.get $8
     f32.store $0
     local.get $2
     i32.const 1
     i32.add
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<f32> (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 f32)
  (local $10 f32)
  (local $11 i32)
  (local $12 i32)
  (local $13 f32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i64)
  local.get $1
  i32.const 48
  i32.le_s
  if
   local.get $1
   i32.const 1
   i32.le_s
   if
    return
   end
   block $break|0
    block $case1|0
     local.get $1
     i32.const 3
     i32.ne
     if
      local.get $1
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $0
     f32.load $0
     local.set $13
     local.get $0
     f32.load $0 offset=4
     local.set $9
     i32.const 2
     global.set $~argumentsLength
     local.get $0
     local.get $9
     local.get $13
     local.get $13
     local.get $9
     local.get $2
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.gt_s
     local.tee $1
     select
     f32.store $0
     local.get $0
     f32.load $0 offset=8
     local.set $10
     i32.const 2
     global.set $~argumentsLength
     local.get $13
     local.get $9
     local.get $1
     select
     local.tee $9
     local.get $10
     local.get $2
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $1
     local.get $0
     local.get $10
     local.get $9
     local.get $1
     select
     f32.store $0 offset=4
     local.get $0
     local.get $9
     local.get $10
     local.get $1
     select
     f32.store $0 offset=8
    end
    local.get $0
    f32.load $0
    local.set $10
    local.get $0
    f32.load $0 offset=4
    local.set $9
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    local.get $9
    local.get $10
    local.get $10
    local.get $9
    local.get $2
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.gt_s
    local.tee $1
    select
    f32.store $0
    local.get $0
    local.get $10
    local.get $9
    local.get $1
    select
    f32.store $0 offset=4
    return
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 1
   i32.sub
   i32.const 0
   local.get $2
   call $~lib/util/sort/insertionSort<f32>
   return
  end
  i32.const 33
  local.get $1
  i32.clz
  i32.sub
  local.tee $7
  i32.const 2
  i32.shl
  local.tee $6
  i32.const 1
  i32.shl
  local.set $5
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  local.get $6
  global.get $~lib/rt/tlsf/ROOT
  local.get $5
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.tee $12
  i32.add
  local.set $14
  loop $for-loop|1
   local.get $7
   local.get $8
   i32.gt_u
   if
    local.get $12
    local.get $8
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $8
    i32.const 1
    i32.add
    local.set $8
    br $for-loop|1
   end
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $1
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
  local.set $15
  local.get $0
  i32.const 0
  local.get $1
  i32.const 1
  i32.sub
  local.tee $11
  local.get $2
  call $~lib/util/sort/extendRunRight<f32>
  local.tee $6
  i32.const 1
  i32.add
  local.tee $1
  i32.const 32
  i32.lt_s
  if
   local.get $0
   i32.const 0
   i32.const 31
   local.get $11
   local.get $11
   i32.const 31
   i32.ge_s
   select
   local.tee $6
   local.get $1
   local.get $2
   call $~lib/util/sort/insertionSort<f32>
  end
  loop $while-continue|2
   local.get $6
   local.get $11
   i32.lt_s
   if
    local.get $0
    local.get $6
    i32.const 1
    i32.add
    local.tee $5
    local.get $11
    local.get $2
    call $~lib/util/sort/extendRunRight<f32>
    local.tee $7
    local.get $5
    i32.sub
    i32.const 1
    i32.add
    local.tee $8
    i32.const 32
    i32.lt_s
    if
     local.get $0
     local.get $5
     local.get $11
     local.get $5
     i32.const 31
     i32.add
     local.tee $1
     local.get $1
     local.get $11
     i32.gt_s
     select
     local.tee $7
     local.get $8
     local.get $2
     call $~lib/util/sort/insertionSort<f32>
    end
    local.get $3
    local.get $5
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $11
    i32.const 1
    i32.add
    i64.extend_i32_u
    local.tee $16
    i64.div_u
    local.get $5
    local.get $7
    i32.add
    i32.const 1
    i32.add
    i64.extend_i32_u
    i64.const 30
    i64.shl
    local.get $16
    i64.div_u
    i64.xor
    i32.wrap_i64
    i32.clz
    local.set $1
    local.get $4
    local.set $8
    loop $for-loop|3
     local.get $1
     local.get $8
     i32.lt_u
     if
      local.get $12
      local.get $8
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.tee $4
      i32.const -1
      i32.ne
      if
       local.get $0
       local.get $4
       local.get $8
       i32.const 2
       i32.shl
       local.tee $3
       local.get $14
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $6
       local.get $15
       local.get $2
       call $~lib/util/sort/mergeRuns<f32>
       local.get $3
       local.get $12
       i32.add
       i32.const -1
       i32.store $0
       local.get $4
       local.set $3
      end
      local.get $8
      i32.const 1
      i32.sub
      local.set $8
      br $for-loop|3
     end
    end
    local.get $1
    i32.const 2
    i32.shl
    local.tee $4
    local.get $12
    i32.add
    local.get $3
    i32.store $0
    local.get $4
    local.get $14
    i32.add
    local.get $6
    i32.store $0
    local.get $5
    local.set $3
    local.get $7
    local.set $6
    local.get $1
    local.set $4
    br $while-continue|2
   end
  end
  loop $for-loop|4
   local.get $4
   if
    local.get $12
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.const -1
    i32.ne
    if
     local.get $0
     local.get $1
     local.get $14
     local.get $4
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $11
     local.get $15
     local.get $2
     call $~lib/util/sort/mergeRuns<f32>
    end
    local.get $4
    i32.const 1
    i32.sub
    local.set $4
    br $for-loop|4
   end
  end
  local.get $15
  call $~lib/rt/tlsf/__free
  local.get $12
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/util/sort/COMPARATOR<f32>~anonymous|0 (type $f32_f32_=>_i32) (param $0 f32) (param $1 f32) (result i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.reinterpret_f32
  local.tee $2
  i32.const 31
  i32.shr_s
  i32.const 1
  i32.shr_u
  local.get $2
  i32.xor
  local.tee $2
  local.get $1
  i32.reinterpret_f32
  local.tee $3
  i32.const 31
  i32.shr_s
  i32.const 1
  i32.shr_u
  local.get $3
  i32.xor
  local.tee $3
  i32.gt_s
  local.get $2
  local.get $3
  i32.lt_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_f32_=>_i32) (param $0 f32) (param $1 f32) (result i32)
  local.get $0
  local.get $1
  f32.lt
  local.get $0
  local.get $1
  f32.gt
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_f64_=>_i32) (param $0 f64) (param $1 f64) (result i32)
  local.get $0
  local.get $1
  f64.lt
  local.get $0
  local.get $1
  f64.gt
  i32.sub
 )
 (func $~lib/rt/__visit_members (type $i32_=>_none) (param $0 i32)
  block $folding-inner3
   block $folding-inner2
    block $invalid
     block $~lib/string/String
      block $~lib/arraybuffer/ArrayBuffer
       local.get $0
       i32.const 8
       i32.sub
       i32.load $0
       br_table $~lib/arraybuffer/ArrayBuffer $~lib/string/String $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner2 $folding-inner3 $folding-inner3 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner3 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $folding-inner2 $invalid
      end
      return
     end
     return
    end
    unreachable
   end
   local.get $0
   i32.load $0 offset=4
   local.tee $0
   if
    local.get $0
    call $byn-split-outlined-A$~lib/rt/itcms/__visit
   end
   return
  end
  local.get $0
  i32.load $0
  local.tee $0
  if
   local.get $0
   call $byn-split-outlined-A$~lib/rt/itcms/__visit
  end
 )
 (func $~start (type $none_=>_none)
  call $start:std/typedarray
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Int8Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $7
  i32.load $0 offset=8
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=5
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3504
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  local.set $3
  local.get $4
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $5
    i32.add
    i32.load8_s $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3504
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $0
     local.get $8
     i32.add
     local.get $4
     i32.store8 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $7
  i32.load $0 offset=8
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=5
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3536
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  local.set $3
  local.get $4
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $5
    i32.add
    i32.load8_u $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3536
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $0
     local.get $8
     i32.add
     local.get $4
     i32.store8 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $7
  i32.load $0 offset=8
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=5
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3568
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  local.set $3
  local.get $4
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $5
    i32.add
    i32.load8_u $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3568
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $0
     local.get $8
     i32.add
     local.get $4
     i32.store8 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=6
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 5
  i32.store16 $0 offset=10
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3600
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  local.get $4
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 1
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3600
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $8
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     local.get $4
     i32.store16 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  i32.const 1
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=6
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 5
  i32.store16 $0 offset=10
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3632
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  local.get $4
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 1
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3632
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $8
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     local.get $4
     i32.store16 $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  i32.const 1
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Int32Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=20
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3664
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  local.get $4
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3664
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $8
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $4
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  i32.const 2
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=20
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3696
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  local.get $4
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3696
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $8
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $4
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  i32.const 2
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Int64Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=24
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 5
  i64.store $0 offset=40
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3728
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  local.get $5
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3728
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i32)
    if
     local.get $8
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.get $4
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  i32.const 3
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 4
  i64.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 5
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=24
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 5
  i64.store $0 offset=40
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3760
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  local.get $5
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3760
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i32)
    if
     local.get $8
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.get $4
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  i32.const 3
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 4
  i64.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 5
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 f32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Float32Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f32.const 4
  f32.store $0 offset=12
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f32.const 5
  f32.store $0 offset=20
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3792
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  local.get $5
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3792
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_i32)
    if
     local.get $8
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.get $4
     f32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  i32.const 2
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  f32.load $0
  f32.const 3
  f32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 4
  f32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 5
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 f64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i64.const 0
  i64.store $0
  local.get $2
  i32.const 0
  i32.store $0 offset=8
  local.get $2
  i32.const 6
  call $~lib/typedarray/Float64Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f64.const 4
  f64.store $0 offset=24
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  f64.const 5
  f64.store $0 offset=40
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 3824
  i32.store $0 offset=4
  local.get $2
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i64.const 0
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  local.get $5
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $6
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $8
  i32.store $0 offset=4
  local.get $7
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $5
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $4
    i32.const 3
    global.set $~argumentsLength
    local.get $4
    local.get $1
    local.get $7
    i32.const 3824
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_i32)
    if
     local.get $8
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.get $4
     f64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $6
  local.get $8
  local.get $0
  i32.const 3
  i32.shl
  local.tee $0
  call $~lib/rt/itcms/__renew
  local.tee $1
  i32.store $0
  local.get $1
  if
   local.get $6
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $6
  local.get $0
  i32.store $0 offset=8
  local.get $6
  local.get $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=4
  local.get $6
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  f64.load $0
  f64.const 3
  f64.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 4
  f64.ne
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 5
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.const 255
  i32.and
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 255
  i32.and
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.const 65535
  i32.and
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 65535
  i32.and
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_none) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  local.get $0
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_none) (param $0 i64) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i64.load32_s $0
  local.get $0
  i64.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_none) (param $0 f32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  f32.convert_i32_s
  local.get $0
  f32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_none) (param $0 f64) (param $1 i32) (param $2 i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 6704
  i32.store $0
  local.get $1
  i32.const 6716
  i32.load $0
  i32.ge_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  f64.convert_i32_s
  local.get $0
  f64.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  local.get $1
  i32.ne
  if
   unreachable
  end
  local.get $2
  global.get $std/typedarray/forEachSelf
  i32.ne
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7168
  i32.store $0
  local.get $1
  i32.const 7180
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $2
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend8_s
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $4
    i32.store8 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend8_s
    local.set $4
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $4
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $2
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Int8Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=12
  local.get $0
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  local.tee $0
  i32.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0 offset=3
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7168
  i32.store $0
  local.get $1
  i32.const 7180
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $4
    i32.store8 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $4
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $4
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $2
  i32.const 8
  call $~lib/typedarray/Uint8Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=12
  local.get $0
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  local.tee $0
  i32.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=3
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7168
  i32.store $0
  local.get $1
  i32.const 7180
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $2
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.const 255
    local.get $4
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $4
    i32.or
    local.get $4
    i32.const 31
    i32.shr_u
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $4
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.const 255
    local.get $4
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $4
    i32.or
    local.get $4
    i32.const 31
    i32.shr_u
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $2
  i32.const 8
  call $~lib/typedarray/Uint8ClampedArray#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=12
  local.get $0
  local.get $1
  call $~lib/typedarray/Int8Array#reverse
  local.tee $0
  i32.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_u $0 offset=3
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7168
  i32.store $0
  local.get $1
  i32.const 7180
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $2
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend16_s
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $4
    i32.store16 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend16_s
    local.set $4
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $4
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/typedarray/Int16Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $2
  i32.const 8
  call $~lib/typedarray/Int16Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=12
  local.get $0
  local.get $1
  call $~lib/typedarray/Int16Array#reverse
  local.tee $0
  i32.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_s $0 offset=6
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7168
  i32.store $0
  local.get $1
  i32.const 7180
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $1
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $2
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    local.set $4
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $4
    i32.store16 $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    local.set $4
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $4
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/typedarray/Int16Array#reverse
  drop
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $0
  local.get $2
  i32.const 8
  call $~lib/typedarray/Uint16Array#subarray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=12
  local.get $0
  local.get $1
  call $~lib/typedarray/Int16Array#reverse
  local.tee $0
  i32.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load16_u $0 offset=6
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7168
  i32.store $0
  local.get $1
  i32.const 7180
  i32.load $0
  local.tee $1
  call $~lib/typedarray/Int32Array#constructor
  local.tee $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $1
  call $~lib/typedarray/Int32Array#constructor
  local.tee $3
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $4
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $4
    i32.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $4
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $4
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $0
  local.get $2
  i32.load $0 offset=4
  local.set $4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|0
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.tee $7
     i32.load $0
     local.set $8
     local.get $7
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $7
     i32.load $0
     i32.store $0
     local.get $7
     local.get $8
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $1
  local.get $3
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Int32Array#subarray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=12
  i32.const 0
  local.set $0
  local.get $2
  i32.load $0 offset=4
  local.set $3
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $5
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|01
    local.get $0
    local.get $5
    i32.lt_u
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     local.set $7
     local.get $6
     local.get $3
     local.get $4
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     i32.store $0
     local.get $6
     local.get $7
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|01
    end
   end
  end
  local.get $1
  local.get $2
  i32.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=12
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7168
  i32.store $0
  local.get $1
  i32.const 7180
  i32.load $0
  local.tee $1
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $2
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $1
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $3
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $4
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $4
    i32.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $4
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $4
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $0
  local.get $2
  i32.load $0 offset=4
  local.set $4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|0
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.tee $7
     i32.load $0
     local.set $8
     local.get $7
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $7
     i32.load $0
     i32.store $0
     local.get $7
     local.get $8
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $4
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 7172
    i32.load $0
    local.get $4
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $1
  local.get $3
  i32.const 8
  call $~lib/typedarray/Uint32Array#subarray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=12
  i32.const 0
  local.set $0
  local.get $2
  i32.load $0 offset=4
  local.set $3
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  i32.const 1
  i32.gt_u
  if
   local.get $4
   i32.const 1
   i32.shr_u
   local.set $5
   local.get $4
   i32.const 1
   i32.sub
   local.set $4
   loop $while-continue|01
    local.get $0
    local.get $5
    i32.lt_u
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     local.set $7
     local.get $6
     local.get $3
     local.get $4
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $6
     i32.load $0
     i32.store $0
     local.get $6
     local.get $7
     i32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|01
    end
   end
  end
  local.get $1
  local.get $2
  i32.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0
  i32.const 8
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 7
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 6
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=12
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $2
  i32.const 7168
  i32.store $0
  local.get $2
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Int64Array#constructor
  local.tee $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Int64Array#constructor
  local.tee $4
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $1
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    i64.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=4
  local.set $5
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $6
  i32.const 1
  i32.gt_u
  if
   local.get $6
   i32.const 1
   i32.shr_u
   local.set $7
   local.get $6
   i32.const 1
   i32.sub
   local.set $6
   loop $while-continue|0
    local.get $0
    local.get $7
    i32.lt_u
    if
     local.get $5
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     i64.load $0
     local.set $1
     local.get $8
     local.get $5
     local.get $6
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     i64.load $0
     i64.store $0
     local.get $8
     local.get $1
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $5
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i32.const 7172
    i32.load $0
    local.get $5
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    i64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $2
  local.get $4
  i32.const 8
  call $~lib/typedarray/Int64Array#subarray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=12
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=4
  local.set $4
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|01
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $7
     i64.load $0
     local.set $1
     local.get $7
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $7
     i64.load $0
     i64.store $0
     local.get $7
     local.get $1
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|01
    end
   end
  end
  local.get $2
  local.get $3
  i32.store $0 offset=16
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0
  i64.const 8
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 7
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 6
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=24
  i64.const 5
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $2
  i32.const 7168
  i32.store $0
  local.get $2
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $4
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $1
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    i64.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=4
  local.set $5
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $6
  i32.const 1
  i32.gt_u
  if
   local.get $6
   i32.const 1
   i32.shr_u
   local.set $7
   local.get $6
   i32.const 1
   i32.sub
   local.set $6
   loop $while-continue|0
    local.get $0
    local.get $7
    i32.lt_u
    if
     local.get $5
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     i64.load $0
     local.set $1
     local.get $8
     local.get $5
     local.get $6
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     i64.load $0
     i64.store $0
     local.get $8
     local.get $1
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $5
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i32.const 7172
    i32.load $0
    local.get $5
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    i64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $2
  local.get $4
  i32.const 8
  call $~lib/typedarray/Uint64Array#subarray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=12
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=4
  local.set $4
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|01
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $7
     i64.load $0
     local.set $1
     local.get $7
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $7
     i64.load $0
     i64.store $0
     local.get $7
     local.get $1
     i64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|01
    end
   end
  end
  local.get $2
  local.get $3
  i32.store $0 offset=16
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0
  i64.const 8
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 7
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 6
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=24
  i64.const 5
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $0 i32)
  (local $1 f32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $2
  i32.const 7168
  i32.store $0
  local.get $2
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Float32Array#constructor
  local.tee $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Float32Array#constructor
  local.tee $4
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    local.set $1
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    f32.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=4
  local.set $5
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $6
  i32.const 1
  i32.gt_u
  if
   local.get $6
   i32.const 1
   i32.shr_u
   local.set $7
   local.get $6
   i32.const 1
   i32.sub
   local.set $6
   loop $while-continue|0
    local.get $0
    local.get $7
    i32.lt_u
    if
     local.get $5
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.tee $8
     f32.load $0
     local.set $1
     local.get $8
     local.get $5
     local.get $6
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $8
     f32.load $0
     f32.store $0
     local.get $8
     local.get $1
     f32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $5
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    i32.const 7172
    i32.load $0
    local.get $5
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    f32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $2
  local.get $4
  i32.const 8
  call $~lib/typedarray/Float32Array#subarray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=12
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=4
  local.set $4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|01
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     local.tee $7
     f32.load $0
     local.set $1
     local.get $7
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.tee $7
     f32.load $0
     f32.store $0
     local.get $7
     local.get $1
     f32.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|01
    end
   end
  end
  local.get $2
  local.get $3
  i32.store $0 offset=16
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.load $0
  f32.const 8
  f32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 7
  f32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 6
  f32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.load $0 offset=12
  f32.const 5
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $0 i32)
  (local $1 f64)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $2
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $2
  i32.const 7168
  i32.store $0
  local.get $2
  i32.const 7180
  i32.load $0
  local.tee $2
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.get $2
  call $~lib/typedarray/Float64Array#constructor
  local.tee $4
  i32.store $0 offset=8
  loop $for-loop|0
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    local.set $1
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    f64.store $0
    local.get $0
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7172
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=4
  local.set $5
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $6
  i32.const 1
  i32.gt_u
  if
   local.get $6
   i32.const 1
   i32.shr_u
   local.set $7
   local.get $6
   i32.const 1
   i32.sub
   local.set $6
   loop $while-continue|0
    local.get $0
    local.get $7
    i32.lt_u
    if
     local.get $5
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     f64.load $0
     local.set $1
     local.get $8
     local.get $5
     local.get $6
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $8
     f64.load $0
     f64.store $0
     local.get $8
     local.get $1
     f64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.sub
    local.get $0
    i32.sub
    local.tee $5
    i32.const 7180
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    local.get $3
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    i32.const 7172
    i32.load $0
    local.get $5
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    f64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.set $2
  local.get $4
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Float64Array#subarray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=12
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=4
  local.set $4
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $5
  i32.const 1
  i32.gt_u
  if
   local.get $5
   i32.const 1
   i32.shr_u
   local.set $6
   local.get $5
   i32.const 1
   i32.sub
   local.set $5
   loop $while-continue|01
    local.get $0
    local.get $6
    i32.lt_u
    if
     local.get $4
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     local.tee $7
     f64.load $0
     local.set $1
     local.get $7
     local.get $4
     local.get $5
     local.get $0
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.tee $7
     f64.load $0
     f64.store $0
     local.get $7
     local.get $1
     f64.store $0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $while-continue|01
    end
   end
  end
  local.get $2
  local.get $3
  i32.store $0 offset=16
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.load $0
  f64.const 8
  f64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 7
  f64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 6
  f64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.load $0 offset=24
  f64.const 5
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Int8Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 f32)
  (local $5 f64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $6
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $6
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $6
  i32.store $0 offset=4
  local.get $6
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Int8Array#constructor
  local.tee $10
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $11
  local.get $10
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  local.set $12
  i32.const 7476
  i32.load $0
  local.set $8
  loop $for-loop|0
   local.get $2
   local.get $11
   i32.lt_s
   if
    local.get $2
    local.get $12
    i32.add
    local.get $8
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7776
  call $~lib/rt/__newArray
  local.set $8
  global.get $~lib/memory/__stack_pointer
  local.get $8
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $10
  i32.load $0 offset=8
  local.tee $11
  local.get $8
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $2
   local.get $11
   i32.lt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $2
    i32.add
    i32.load8_s $0
    local.get $8
    i32.load $0 offset=4
    local.get $2
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  local.get $10
  i32.load $0 offset=8
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 3
  i32.add
  local.set $8
  i32.const 7556
  i32.load $0
  local.set $11
  loop $for-loop|01
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $8
    i32.add
    local.get $11
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $4
    i32.trunc_sat_f32_s
    i32.const 0
    local.get $4
    local.get $4
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01
   end
  end
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7808
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $10
  i32.load $0 offset=8
  local.tee $8
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|03
   local.get $2
   local.get $8
   i32.lt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $2
    i32.add
    i32.load8_s $0
    local.get $0
    i32.load $0 offset=4
    local.get $2
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|03
   end
  end
  i32.const 0
  local.set $2
  local.get $10
  i32.load $0 offset=8
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $0
  i32.const 6
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $8
  local.get $9
  i32.load $0 offset=4
  local.set $9
  loop $for-loop|04
   local.get $0
   local.get $2
   i32.gt_s
   if
    local.get $2
    local.get $8
    i32.add
    local.get $9
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|04
   end
  end
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7840
  call $~lib/rt/__newArray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $10
  i32.load $0 offset=8
  local.tee $8
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|06
   local.get $0
   local.get $8
   i32.lt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_s $0
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|06
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  local.get $10
  i32.load $0 offset=8
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 2
  i32.add
  local.set $2
  i32.const 7652
  i32.load $0
  local.set $8
  loop $for-loop|037
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.add
    local.get $8
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $5
    i32.trunc_sat_f64_s
    i32.const 0
    local.get $5
    local.get $5
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|037
   end
  end
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7872
  call $~lib/rt/__newArray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $10
  i32.load $0 offset=8
  local.tee $2
  local.get $1
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|09
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_s $0
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|09
   end
  end
  local.get $6
  i32.load $0 offset=8
  local.tee $0
  local.get $10
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  local.get $6
  i32.load $0 offset=4
  local.get $0
  memory.copy $0 $0
  i32.const 0
  local.set $0
  local.get $10
  i32.load $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 4
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $2
  local.get $7
  i32.load $0 offset=4
  local.set $6
  loop $for-loop|010
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $2
    i32.add
    local.get $6
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|010
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  local.get $10
  i32.load $0 offset=8
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 7
  i32.add
  i32.const 7732
  i32.load $0
  local.get $0
  memory.copy $0 $0
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 7904
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $10
  i32.load $0 offset=8
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|012
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_s $0
    local.get $0
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|012
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint8Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 f32)
  (local $5 f64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $6
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $6
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $6
  i32.store $0 offset=4
  local.get $6
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $10
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $11
  local.get $10
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  local.set $12
  i32.const 7476
  i32.load $0
  local.set $8
  loop $for-loop|0
   local.get $2
   local.get $11
   i32.lt_s
   if
    local.get $2
    local.get $12
    i32.add
    local.get $8
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7936
  call $~lib/rt/__newArray
  local.set $8
  global.get $~lib/memory/__stack_pointer
  local.get $8
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $10
  i32.load $0 offset=8
  local.tee $11
  local.get $8
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $2
   local.get $11
   i32.lt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $2
    i32.add
    i32.load8_u $0
    local.get $8
    i32.load $0 offset=4
    local.get $2
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  local.get $10
  i32.load $0 offset=8
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 3
  i32.add
  local.set $8
  i32.const 7556
  i32.load $0
  local.set $11
  loop $for-loop|01
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $8
    i32.add
    local.get $11
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $4
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $4
    local.get $4
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7968
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $10
  i32.load $0 offset=8
  local.tee $8
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|03
   local.get $2
   local.get $8
   i32.lt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $2
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $2
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|03
   end
  end
  i32.const 0
  local.set $2
  local.get $10
  i32.load $0 offset=8
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $0
  i32.const 6
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $8
  local.get $9
  i32.load $0 offset=4
  local.set $9
  loop $for-loop|04
   local.get $0
   local.get $2
   i32.gt_s
   if
    local.get $2
    local.get $8
    i32.add
    local.get $9
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|04
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8000
  call $~lib/rt/__newArray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $10
  i32.load $0 offset=8
  local.tee $8
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|06
   local.get $0
   local.get $8
   i32.lt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|06
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  local.get $10
  i32.load $0 offset=8
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 2
  i32.add
  local.set $2
  i32.const 7652
  i32.load $0
  local.set $8
  loop $for-loop|037
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $2
    i32.add
    local.get $8
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $5
    i32.trunc_sat_f64_u
    i32.const 0
    local.get $5
    local.get $5
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|037
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8032
  call $~lib/rt/__newArray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $10
  i32.load $0 offset=8
  local.tee $2
  local.get $1
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|09
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|09
   end
  end
  local.get $6
  i32.load $0 offset=8
  local.tee $0
  local.get $10
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  local.get $6
  i32.load $0 offset=4
  local.get $0
  memory.copy $0 $0
  i32.const 0
  local.set $0
  local.get $10
  i32.load $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 4
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $2
  local.get $7
  i32.load $0 offset=4
  local.set $6
  loop $for-loop|010
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $2
    i32.add
    local.get $6
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|010
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  local.get $10
  i32.load $0 offset=8
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $10
  i32.load $0 offset=4
  i32.const 7
  i32.add
  i32.const 7732
  i32.load $0
  local.get $0
  memory.copy $0 $0
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8064
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $10
  i32.load $0 offset=8
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|012
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $10
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $3
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|012
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint8ClampedArray> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 f32)
  (local $3 f64)
  (local $4 i64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $5
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $8
  i32.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $9
  i32.store $0 offset=4
  local.get $9
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $9
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $9
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $5
  i32.store $0 offset=8
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $6
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $10
  local.get $6
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  local.set $11
  i32.const 7476
  i32.load $0
  local.set $12
  loop $for-loop|0
   local.get $0
   local.get $10
   i32.lt_s
   if
    local.get $0
    local.get $11
    i32.add
    local.get $12
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $7
    i32.const 255
    local.get $7
    i32.sub
    i32.const 31
    i32.shr_s
    i32.or
    local.get $7
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8096
  call $~lib/rt/__newArray
  local.set $7
  global.get $~lib/memory/__stack_pointer
  local.get $7
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $6
  i32.load $0 offset=8
  local.tee $10
  local.get $7
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $0
   local.get $10
   i32.lt_s
   if
    local.get $6
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    local.get $7
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 7564
  i32.load $0
  local.tee $7
  i32.const 3
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 3
  i32.add
  local.set $10
  i32.const 7556
  i32.load $0
  local.set $11
  i32.const 0
  local.set $0
  loop $for-loop|03
   local.get $0
   local.get $7
   i32.lt_s
   if
    local.get $0
    local.get $10
    i32.add
    local.get $11
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $2
    f32.const 255
    f32.min
    f32.const 0
    f32.max
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $2
    local.get $2
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|03
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8128
  call $~lib/rt/__newArray
  local.set $7
  global.get $~lib/memory/__stack_pointer
  local.get $7
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $6
  i32.load $0 offset=8
  local.tee $10
  local.get $7
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|02
   local.get $0
   local.get $10
   i32.lt_s
   if
    local.get $6
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    local.get $7
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|02
   end
  end
  i32.const 0
  local.set $0
  local.get $6
  i32.load $0 offset=8
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $7
  i32.const 6
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $10
  local.get $8
  i32.load $0 offset=4
  local.set $8
  loop $for-loop|01
   local.get $0
   local.get $7
   i32.lt_s
   if
    local.get $0
    local.get $10
    i32.add
    local.get $8
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.tee $4
    i32.wrap_i64
    local.tee $11
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i64.extend_i32_s
    i32.const 255
    local.get $11
    i32.sub
    i32.const 31
    i32.shr_s
    i64.extend_i32_s
    local.get $4
    i64.or
    i64.and
    i64.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8160
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  local.tee $7
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|04
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $6
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|04
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 7660
  i32.load $0
  local.tee $1
  i32.const 2
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 2
  i32.add
  local.set $7
  i32.const 7652
  i32.load $0
  local.set $8
  i32.const 0
  local.set $0
  loop $for-loop|08
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $7
    i32.add
    local.get $8
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $3
    f64.const 255
    f64.min
    f64.const 0
    f64.max
    i32.trunc_sat_f64_u
    i32.const 0
    local.get $3
    local.get $3
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|08
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8192
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $6
  i32.load $0 offset=8
  local.tee $7
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|06
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $6
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|06
   end
  end
  local.get $9
  i32.load $0 offset=8
  local.tee $0
  local.get $6
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  local.get $9
  i32.load $0 offset=4
  local.get $0
  memory.copy $0 $0
  i32.const 0
  local.set $1
  local.get $6
  i32.load $0 offset=8
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $0
  i32.const 4
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $7
  local.get $5
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|05
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $1
    local.get $7
    i32.add
    i32.const 255
    local.get $5
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.tee $8
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $8
    i32.or
    local.get $8
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|05
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 7740
  i32.load $0
  local.tee $1
  i32.const 7
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 7
  i32.add
  local.set $5
  i32.const 7732
  i32.load $0
  local.set $7
  i32.const 0
  local.set $0
  loop $for-loop|014
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $0
    local.get $5
    i32.add
    local.get $0
    local.get $7
    i32.add
    i32.load8_s $0
    local.tee $8
    i32.const 255
    local.get $8
    i32.sub
    i32.const 31
    i32.shr_s
    i32.or
    local.get $8
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|014
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 8224
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $6
  i32.load $0 offset=8
  local.tee $5
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|09
   local.get $1
   local.get $5
   i32.lt_s
   if
    local.get $6
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $0
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|09
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Int16Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 f32)
  (local $4 f64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $5
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $5
  i32.store $0 offset=4
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Int16Array#constructor
  local.tee $8
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $9
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $10
  i32.const 7476
  i32.load $0
  local.set $11
  loop $for-loop|0
   local.get $2
   local.get $9
   i32.lt_s
   if
    local.get $10
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $11
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store16 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8256
  call $~lib/rt/__newArray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $10
  local.get $9
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $2
   local.get $10
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.shl
    local.tee $11
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $11
    local.get $9
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $9
  i32.const 7556
  i32.load $0
  local.set $10
  loop $for-loop|01
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $9
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $10
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $3
    i32.trunc_sat_f32_s
    i32.const 0
    local.get $3
    local.get $3
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01
   end
  end
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8304
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $9
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|03
   local.get $2
   local.get $9
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.shl
    local.tee $10
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $10
    local.get $0
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|03
   end
  end
  i32.const 0
  local.set $2
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $0
  i32.const 6
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 12
  i32.add
  local.set $9
  local.get $7
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|04
   local.get $0
   local.get $2
   i32.gt_s
   if
    local.get $9
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $7
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store16 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|04
   end
  end
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8352
  call $~lib/rt/__newArray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|06
   local.get $0
   local.get $7
   i32.lt_s
   if
    local.get $0
    i32.const 1
    i32.shl
    local.tee $9
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $9
    local.get $2
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|06
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $2
  i32.const 7652
  i32.load $0
  local.set $7
  loop $for-loop|037
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $7
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $4
    i32.trunc_sat_f64_s
    i32.const 0
    local.get $4
    local.get $4
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|037
   end
  end
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8400
  call $~lib/rt/__newArray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  local.get $1
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|09
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 1
    i32.shl
    local.tee $7
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $7
    local.get $1
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|09
   end
  end
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  local.tee $1
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $2
  local.get $5
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|010
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $5
    i32.add
    i32.load8_u $0
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|010
   end
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $0
  i32.const 4
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.get $6
  i32.load $0 offset=4
  local.get $0
  i32.const 1
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 14
  i32.add
  local.set $2
  i32.const 7732
  i32.load $0
  local.set $5
  loop $for-loop|011
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    local.get $5
    i32.add
    i32.load8_s $0
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|011
   end
  end
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 8448
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|013
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.shl
    local.tee $5
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $5
    local.get $0
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|013
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint16Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 f32)
  (local $4 f64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $5
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $5
  i32.store $0 offset=4
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $8
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $9
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $10
  i32.const 7476
  i32.load $0
  local.set $11
  loop $for-loop|0
   local.get $2
   local.get $9
   i32.lt_s
   if
    local.get $10
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $11
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store16 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8496
  call $~lib/rt/__newArray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $10
  local.get $9
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $2
   local.get $10
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.shl
    local.tee $11
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $11
    local.get $9
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 6
  i32.add
  local.set $9
  i32.const 7556
  i32.load $0
  local.set $10
  loop $for-loop|01
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $9
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $10
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $3
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $3
    local.get $3
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01
   end
  end
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8544
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $9
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|03
   local.get $2
   local.get $9
   i32.lt_s
   if
    local.get $2
    i32.const 1
    i32.shl
    local.tee $10
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $10
    local.get $0
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|03
   end
  end
  i32.const 0
  local.set $2
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $0
  i32.const 6
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 12
  i32.add
  local.set $9
  local.get $7
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|04
   local.get $0
   local.get $2
   i32.gt_s
   if
    local.get $9
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    local.get $7
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store16 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|04
   end
  end
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8592
  call $~lib/rt/__newArray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|06
   local.get $0
   local.get $7
   i32.lt_s
   if
    local.get $0
    i32.const 1
    i32.shl
    local.tee $9
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $9
    local.get $2
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|06
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  i32.const 7660
  i32.load $0
  local.tee $0
  i32.const 2
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $2
  i32.const 7652
  i32.load $0
  local.set $7
  loop $for-loop|037
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $7
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $4
    i32.trunc_sat_f64_u
    i32.const 0
    local.get $4
    local.get $4
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|037
   end
  end
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8640
  call $~lib/rt/__newArray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  local.get $1
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|09
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 1
    i32.shl
    local.tee $7
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $7
    local.get $1
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|09
   end
  end
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  local.tee $1
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $2
  local.get $5
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|010
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $0
    local.get $5
    i32.add
    i32.load8_u $0
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|010
   end
  end
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $0
  i32.const 4
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.get $6
  i32.load $0 offset=4
  local.get $0
  i32.const 1
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 14
  i32.add
  local.set $2
  i32.const 7732
  i32.load $0
  local.set $5
  loop $for-loop|011
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    local.get $5
    i32.add
    i32.load8_s $0
    i32.store16 $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|011
   end
  end
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 8688
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|013
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.shl
    local.tee $5
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $5
    local.get $0
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|013
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Int32Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 f32)
  (local $4 f64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $5
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $5
  i32.store $0 offset=4
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Int32Array#constructor
  local.tee $8
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $9
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 7476
  i32.load $0
  local.get $9
  i32.const 2
  i32.shl
  memory.copy $0 $0
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8736
  call $~lib/rt/__newArray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=16
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $10
  local.get $9
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|0
   local.get $2
   local.get $10
   i32.lt_s
   if
    local.get $2
    i32.const 2
    i32.shl
    local.tee $11
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $11
    local.get $9
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 12
  i32.add
  local.set $9
  i32.const 7556
  i32.load $0
  local.set $10
  loop $for-loop|00
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $10
    local.get $1
    i32.const 2
    i32.shl
    local.tee $11
    i32.add
    f32.load $0
    local.set $3
    local.get $9
    local.get $11
    i32.add
    local.get $3
    i32.trunc_sat_f32_s
    i32.const 0
    local.get $3
    local.get $3
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|00
   end
  end
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8800
  call $~lib/rt/__newArray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $9
  local.get $1
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|02
   local.get $2
   local.get $9
   i32.lt_s
   if
    local.get $2
    i32.const 2
    i32.shl
    local.tee $10
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $10
    local.get $1
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|02
   end
  end
  i32.const 0
  local.set $2
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 6
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $9
  local.get $7
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|03
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $9
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    local.get $7
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store32 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|03
   end
  end
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8864
  call $~lib/rt/__newArray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|05
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $9
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $9
    local.get $2
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|05
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  i32.const 7660
  i32.load $0
  local.tee $1
  i32.const 2
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.set $2
  i32.const 7652
  i32.load $0
  local.set $7
  loop $for-loop|056
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $7
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $4
    i32.trunc_sat_f64_s
    i32.const 0
    local.get $4
    local.get $4
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|056
   end
  end
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8928
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|08
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $7
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $7
    local.get $0
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|08
   end
  end
  i32.const 0
  local.set $1
  local.get $5
  i32.load $0 offset=8
  local.tee $0
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $2
  local.get $5
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|09
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    local.get $5
    i32.add
    i32.load8_u $0
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|09
   end
  end
  i32.const 0
  local.set $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 4
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $2
  local.get $6
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|010
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|010
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  i32.const 7740
  i32.load $0
  local.tee $1
  i32.const 7
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 28
  i32.add
  local.set $2
  i32.const 7732
  i32.load $0
  local.set $5
  loop $for-loop|011
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $5
    i32.add
    i32.load8_s $0
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|011
   end
  end
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 8992
  call $~lib/rt/__newArray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  local.get $1
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|013
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 2
    i32.shl
    local.tee $5
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $5
    local.get $1
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|013
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint32Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 f32)
  (local $4 f64)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $5
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $5
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $7
  i32.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $5
  i32.store $0 offset=4
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $6
  i32.store $0 offset=8
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $8
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $9
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 7476
  i32.load $0
  local.get $9
  i32.const 2
  i32.shl
  memory.copy $0 $0
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9056
  call $~lib/rt/__newArray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=16
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $10
  local.get $9
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|0
   local.get $2
   local.get $10
   i32.lt_s
   if
    local.get $2
    i32.const 2
    i32.shl
    local.tee $11
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $11
    local.get $9
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 12
  i32.add
  local.set $9
  i32.const 7556
  i32.load $0
  local.set $10
  loop $for-loop|00
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $10
    local.get $1
    i32.const 2
    i32.shl
    local.tee $11
    i32.add
    f32.load $0
    local.set $3
    local.get $9
    local.get $11
    i32.add
    local.get $3
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $3
    local.get $3
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|00
   end
  end
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9120
  call $~lib/rt/__newArray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $9
  local.get $1
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|02
   local.get $2
   local.get $9
   i32.lt_s
   if
    local.get $2
    i32.const 2
    i32.shl
    local.tee $10
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $10
    local.get $1
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|02
   end
  end
  i32.const 0
  local.set $2
  local.get $7
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 6
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $9
  local.get $7
  i32.load $0 offset=4
  local.set $7
  loop $for-loop|03
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $9
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    local.get $7
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store32 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|03
   end
  end
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9184
  call $~lib/rt/__newArray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $7
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|05
   local.get $1
   local.get $7
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $9
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $9
    local.get $2
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|05
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  i32.const 7660
  i32.load $0
  local.tee $1
  i32.const 2
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.set $2
  i32.const 7652
  i32.load $0
  local.set $7
  loop $for-loop|056
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $7
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.tee $4
    i32.trunc_sat_f64_u
    i32.const 0
    local.get $4
    local.get $4
    f64.sub
    f64.const 0
    f64.eq
    select
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|056
   end
  end
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9248
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|08
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $7
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $7
    local.get $0
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|08
   end
  end
  i32.const 0
  local.set $1
  local.get $5
  i32.load $0 offset=8
  local.tee $0
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $2
  local.get $5
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|09
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    local.get $5
    i32.add
    i32.load8_u $0
    i32.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|09
   end
  end
  i32.const 0
  local.set $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 4
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $2
  local.get $6
  i32.load $0 offset=4
  local.set $5
  loop $for-loop|010
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $5
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|010
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  i32.const 7740
  i32.load $0
  local.tee $1
  i32.const 7
  i32.add
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 28
  i32.add
  local.set $2
  i32.const 7732
  i32.load $0
  local.set $5
  loop $for-loop|011
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $5
    i32.add
    i32.load8_s $0
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|011
   end
  end
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 9312
  call $~lib/rt/__newArray
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $2
  local.get $1
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|013
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    i32.const 2
    i32.shl
    local.tee $5
    local.get $8
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $5
    local.get $1
    i32.load $0 offset=4
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|013
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Int64Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 f64)
  (local $5 f32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $6
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $6
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $8
  i32.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $6
  i32.store $0 offset=4
  local.get $6
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Int64Array#constructor
  local.tee $9
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $10
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  local.set $11
  i32.const 7476
  i32.load $0
  local.set $12
  loop $for-loop|0
   local.get $2
   local.get $10
   i32.lt_s
   if
    local.get $11
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    local.get $12
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    i64.store $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9376
  call $~lib/rt/__newArray
  local.set $10
  global.get $~lib/memory/__stack_pointer
  local.get $10
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $11
  local.get $10
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $2
   local.get $11
   i32.lt_s
   if
    local.get $2
    i32.const 3
    i32.shl
    local.tee $12
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $12
    local.get $10
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $10
  i32.const 7556
  i32.load $0
  local.set $11
  loop $for-loop|01
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $10
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $11
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $5
    i64.trunc_sat_f32_s
    i64.const 0
    local.get $5
    local.get $5
    f32.sub
    f32.const 0
    f32.eq
    select
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01
   end
  end
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9488
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $10
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|03
   local.get $2
   local.get $10
   i32.lt_s
   if
    local.get $2
    i32.const 3
    i32.shl
    local.tee $11
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $11
    local.get $0
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|03
   end
  end
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $0
  i32.const 6
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 48
  i32.add
  local.get $8
  i32.load $0 offset=4
  local.get $0
  i32.const 3
  i32.shl
  memory.copy $0 $0
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9600
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|05
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $8
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $8
    local.get $0
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|05
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  i32.const 7660
  i32.load $0
  local.tee $1
  i32.const 2
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $2
  i32.const 7652
  i32.load $0
  local.set $8
  i32.const 0
  local.set $0
  loop $for-loop|056
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $8
    local.get $0
    i32.const 3
    i32.shl
    local.tee $10
    i32.add
    f64.load $0
    local.set $4
    local.get $2
    local.get $10
    i32.add
    local.get $4
    i64.trunc_sat_f64_s
    i64.const 0
    local.get $4
    local.get $4
    f64.sub
    f64.const 0
    f64.eq
    select
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|056
   end
  end
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9712
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|08
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $8
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $8
    local.get $0
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|08
   end
  end
  i32.const 0
  local.set $1
  local.get $6
  i32.load $0 offset=8
  local.tee $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  local.set $2
  local.get $6
  i32.load $0 offset=4
  local.set $6
  loop $for-loop|09
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    local.get $6
    i32.add
    i64.load8_u $0
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|09
   end
  end
  i32.const 0
  local.set $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 4
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 32
  i32.add
  local.set $2
  local.get $7
  i32.load $0 offset=4
  local.set $6
  loop $for-loop|010
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i64.load16_s $0
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|010
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 56
  i32.add
  local.set $1
  i32.const 7732
  i32.load $0
  local.set $2
  loop $for-loop|011
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $1
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $2
    local.get $3
    i32.add
    i64.load8_s $0
    i64.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|011
   end
  end
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 9824
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $3
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|013
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $2
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $2
    local.get $0
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|013
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint64Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 f64)
  (local $5 f32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $6
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $6
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $8
  i32.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $6
  i32.store $0 offset=4
  local.get $6
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $6
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $7
  i32.store $0 offset=8
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $7
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $9
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $10
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  local.set $11
  i32.const 7476
  i32.load $0
  local.set $12
  loop $for-loop|0
   local.get $2
   local.get $10
   i32.lt_s
   if
    local.get $11
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    local.get $12
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    i64.store $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 9936
  call $~lib/rt/__newArray
  local.set $10
  global.get $~lib/memory/__stack_pointer
  local.get $10
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $11
  local.get $10
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $2
   local.get $11
   i32.lt_s
   if
    local.get $2
    i32.const 3
    i32.shl
    local.tee $12
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $12
    local.get $10
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  i32.const 7564
  i32.load $0
  local.tee $2
  i32.const 3
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $10
  i32.const 7556
  i32.load $0
  local.set $11
  loop $for-loop|01
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $10
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $11
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $5
    i64.trunc_sat_f32_u
    i64.const 0
    local.get $5
    local.get $5
    f32.sub
    f32.const 0
    f32.eq
    select
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01
   end
  end
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 10048
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $2
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $10
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|03
   local.get $2
   local.get $10
   i32.lt_s
   if
    local.get $2
    i32.const 3
    i32.shl
    local.tee $11
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $11
    local.get $0
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|03
   end
  end
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $0
  i32.const 6
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 48
  i32.add
  local.get $8
  i32.load $0 offset=4
  local.get $0
  i32.const 3
  i32.shl
  memory.copy $0 $0
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 10160
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|05
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $8
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $8
    local.get $0
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|05
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7648
  i32.store $0 offset=16
  i32.const 7660
  i32.load $0
  local.tee $1
  i32.const 2
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $2
  i32.const 7652
  i32.load $0
  local.set $8
  i32.const 0
  local.set $0
  loop $for-loop|056
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $8
    local.get $0
    i32.const 3
    i32.shl
    local.tee $10
    i32.add
    f64.load $0
    local.set $4
    local.get $2
    local.get $10
    i32.add
    local.get $4
    i64.trunc_sat_f64_u
    i64.const 0
    local.get $4
    local.get $4
    f64.sub
    f64.const 0
    f64.eq
    select
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|056
   end
  end
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 10272
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|08
   local.get $1
   local.get $2
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $8
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $8
    local.get $0
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|08
   end
  end
  i32.const 0
  local.set $1
  local.get $6
  i32.load $0 offset=8
  local.tee $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  local.set $2
  local.get $6
  i32.load $0 offset=4
  local.set $6
  loop $for-loop|09
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $2
    local.get $1
    i32.const 3
    i32.shl
    i32.add
    local.get $1
    local.get $6
    i32.add
    i64.load8_u $0
    i64.store $0
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|09
   end
  end
  i32.const 0
  local.set $0
  local.get $7
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 4
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 32
  i32.add
  local.set $2
  local.get $7
  i32.load $0 offset=4
  local.set $6
  loop $for-loop|010
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i64.load16_s $0
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|010
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  i32.const 7740
  i32.load $0
  local.tee $0
  i32.const 7
  i32.add
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 56
  i32.add
  local.set $1
  i32.const 7732
  i32.load $0
  local.set $2
  loop $for-loop|011
   local.get $0
   local.get $3
   i32.gt_s
   if
    local.get $1
    local.get $3
    i32.const 3
    i32.shl
    i32.add
    local.get $2
    local.get $3
    i32.add
    i64.load8_s $0
    i64.store $0
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|011
   end
  end
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 10384
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $3
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|013
   local.get $1
   local.get $3
   i32.gt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $2
    local.get $9
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $2
    local.get $0
    i32.load $0 offset=4
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|013
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Float32Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $4
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $5
  i32.store $0 offset=8
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Float32Array#constructor
  local.tee $6
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $10
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  local.set $7
  i32.const 7476
  i32.load $0
  local.set $11
  loop $for-loop|0
   local.get $0
   local.get $10
   i32.lt_s
   if
    local.get $7
    local.get $0
    i32.const 2
    i32.shl
    local.tee $8
    i32.add
    local.get $8
    local.get $11
    i32.add
    i32.load $0
    f32.convert_i32_s
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 10496
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $7
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $3
   local.get $7
   i32.lt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $8
    local.get $6
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $8
    local.get $0
    i32.load $0 offset=4
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  i32.const 7564
  i32.load $0
  local.tee $0
  i32.const 3
  i32.add
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 12
  i32.add
  i32.const 7556
  i32.load $0
  local.get $0
  i32.const 2
  i32.shl
  memory.copy $0 $0
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 10560
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $3
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $7
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|02
   local.get $3
   local.get $7
   i32.lt_s
   if
    local.get $3
    i32.const 2
    i32.shl
    local.tee $8
    local.get $6
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $8
    local.get $0
    i32.load $0 offset=4
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|02
   end
  end
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  i32.const 6
  i32.add
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $7
  local.get $9
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  loop $for-loop|04
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $7
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $8
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    f32.convert_i64_s
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|04
   end
  end
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 10624
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $3
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|05
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 2
    i32.shl
    local.tee $7
    local.get $6
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $7
    local.get $0
    i32.load $0 offset=4
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|05
   end
  end
  local.get $4
  i32.load $0 offset=8
  local.tee $1
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  loop $for-loop|08
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $4
    i32.add
    i32.load8_u $0
    f32.convert_i32_u
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|08
   end
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 4
  i32.add
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 16
  i32.add
  local.set $3
  local.get $5
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  loop $for-loop|012
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    f32.convert_i32_s
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|012
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  i32.const 7740
  i32.load $0
  local.tee $1
  i32.const 7
  i32.add
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 28
  i32.add
  local.set $3
  i32.const 7732
  i32.load $0
  local.set $4
  i32.const 0
  local.set $0
  loop $for-loop|017
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $4
    i32.add
    i32.load8_s $0
    f32.convert_i32_s
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|017
   end
  end
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 10688
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|07
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $2
    i32.const 2
    i32.shl
    local.tee $3
    local.get $6
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $3
    local.get $0
    i32.load $0 offset=4
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|07
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Float64Array> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $4
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $8
  i32.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 7
  i64.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 8
  i64.store $0 offset=8
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 9
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 100
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 101
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 102
  i32.store8 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 103
  i32.store8 $0 offset=3
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $5
  i32.store $0 offset=8
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1000
  i32.store16 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1001
  i32.store16 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1002
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Float64Array#constructor
  local.tee $6
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 7472
  i32.store $0 offset=16
  i32.const 7484
  i32.load $0
  local.tee $9
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  local.set $10
  i32.const 7476
  i32.load $0
  local.set $7
  loop $for-loop|0
   local.get $0
   local.get $9
   i32.lt_s
   if
    local.get $10
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $7
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 10752
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $7
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|00
   local.get $3
   local.get $7
   i32.lt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $9
    local.get $6
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $9
    local.get $0
    i32.load $0 offset=4
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|00
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7552
  i32.store $0 offset=16
  i32.const 7564
  i32.load $0
  local.tee $3
  i32.const 3
  i32.add
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 24
  i32.add
  local.set $7
  i32.const 7556
  i32.load $0
  local.set $9
  i32.const 0
  local.set $0
  loop $for-loop|03
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $7
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $9
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    f64.promote_f32
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|03
   end
  end
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 10864
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  i32.const 0
  local.set $3
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $7
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|02
   local.get $3
   local.get $7
   i32.lt_s
   if
    local.get $3
    i32.const 3
    i32.shl
    local.tee $9
    local.get $6
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $9
    local.get $0
    i32.load $0 offset=4
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $3
    i32.const 1
    i32.add
    local.set $3
    br $for-loop|02
   end
  end
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  i32.const 6
  i32.add
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 48
  i32.add
  local.set $7
  local.get $8
  i32.load $0 offset=4
  local.set $8
  i32.const 0
  local.set $0
  loop $for-loop|07
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $7
    local.get $0
    i32.const 3
    i32.shl
    local.tee $9
    i32.add
    local.get $8
    local.get $9
    i32.add
    i64.load $0
    f64.convert_i64_s
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|07
   end
  end
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 10976
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $3
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|04
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $1
    i32.const 3
    i32.shl
    local.tee $7
    local.get $6
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $7
    local.get $0
    i32.load $0 offset=4
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|04
   end
  end
  local.get $4
  i32.load $0 offset=8
  local.tee $1
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  loop $for-loop|011
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $4
    i32.add
    i32.load8_u $0
    f64.convert_i32_u
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|011
   end
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 4
  i32.add
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 32
  i32.add
  local.set $3
  local.get $5
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  loop $for-loop|015
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    f64.convert_i32_s
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|015
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 7728
  i32.store $0 offset=16
  i32.const 7740
  i32.load $0
  local.tee $1
  i32.const 7
  i32.add
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.gt_s
  if
   unreachable
  end
  local.get $6
  i32.load $0 offset=4
  i32.const 56
  i32.add
  local.set $3
  i32.const 7732
  i32.load $0
  local.set $4
  i32.const 0
  local.set $0
  loop $for-loop|020
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $0
    local.get $4
    i32.add
    i32.load8_s $0
    f64.convert_i32_s
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|020
   end
  end
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 11088
  call $~lib/rt/__newArray
  local.set $0
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.store $0 offset=16
  local.get $6
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  local.get $0
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|06
   local.get $1
   local.get $2
   i32.gt_s
   if
    local.get $2
    i32.const 3
    i32.shl
    local.tee $3
    local.get $6
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $3
    local.get $0
    i32.load $0 offset=4
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|06
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 11456
   local.set $0
   global.get $~lib/memory/__stack_pointer
   i32.const 11456
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.get $0
  call $~lib/util/sort/SORT<i16>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11488
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 11488
  call $~lib/util/sort/SORT<i16>
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 11520
   local.set $0
   global.get $~lib/memory/__stack_pointer
   i32.const 11520
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.get $0
  call $~lib/util/sort/SORT<u16>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11552
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 11552
  call $~lib/util/sort/SORT<u16>
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 11584
   local.set $0
   global.get $~lib/memory/__stack_pointer
   i32.const 11584
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.get $0
  call $~lib/util/sort/SORT<i32>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11616
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 11616
  call $~lib/util/sort/SORT<i32>
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 11648
   local.set $0
   global.get $~lib/memory/__stack_pointer
   i32.const 11648
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.get $0
  call $~lib/util/sort/SORT<u32>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11680
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 11680
  call $~lib/util/sort/SORT<u32>
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 1
  i64.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 3
  i64.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 11712
   local.set $0
   global.get $~lib/memory/__stack_pointer
   i32.const 11712
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.get $0
  call $~lib/util/sort/SORT<i64>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 2
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 3
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11744
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 11744
  call $~lib/util/sort/SORT<i64>
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 2
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 1
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 1
  i64.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 3
  i64.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 11776
   local.set $0
   global.get $~lib/memory/__stack_pointer
   i32.const 11776
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.get $0
  call $~lib/util/sort/SORT<u64>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 2
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 3
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11808
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 11808
  call $~lib/util/sort/SORT<u64>
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 2
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 1
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i64.const 0
  i64.store $0
  local.get $1
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 1
  f32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 3
  f32.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 11840
   local.set $0
   global.get $~lib/memory/__stack_pointer
   i32.const 11840
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.get $0
  call $~lib/util/sort/SORT<f32>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.load $0
  f32.const 1
  f32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 2
  f32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 3
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11872
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 11872
  call $~lib/util/sort/SORT<f32>
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.load $0
  f32.const 3
  f32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 2
  f32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 1
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $start:std/typedarray (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i64)
  (local $7 f32)
  (local $8 i32)
  (local $9 i32)
  (local $10 f64)
  (local $11 i32)
  (local $12 i32)
  (local $13 i64)
  (local $14 f32)
  (local $15 f64)
  global.get $~lib/memory/__stack_pointer
  i32.const 120
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 120
  memory.fill $0
  memory.size $0
  i32.const 16
  i32.shl
  i32.const 45316
  i32.sub
  i32.const 1
  i32.shr_u
  global.set $~lib/rt/itcms/threshold
  i32.const 1140
  i32.const 1136
  i32.store $0
  i32.const 1144
  i32.const 1136
  i32.store $0
  i32.const 1136
  global.set $~lib/rt/itcms/pinSpace
  i32.const 1172
  i32.const 1168
  i32.store $0
  i32.const 1176
  i32.const 1168
  i32.store $0
  i32.const 1168
  global.set $~lib/rt/itcms/toSpace
  i32.const 1252
  i32.const 1248
  i32.store $0
  i32.const 1256
  i32.const 1248
  i32.store $0
  i32.const 1248
  global.set $~lib/rt/itcms/fromSpace
  i32.const 0
  call $std/typedarray/testInstantiate
  i32.const 5
  call $std/typedarray/testInstantiate
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $3
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 12
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#subarray
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $3
  i32.load $0
  i32.sub
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load $0
  i32.const 2
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 7
  f64.store $0 offset=16
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 6
  f64.store $0 offset=24
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 5
  f64.store $0 offset=32
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 4
  f64.store $0 offset=40
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 6
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=48
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 7
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 8
  f64.store $0 offset=56
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Float64Array#subarray
  local.tee $3
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $3
  i32.load $0
  i32.sub
  i32.const 16
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 32
  i32.ne
  if
   unreachable
  end
  i32.const 0
  global.set $~argumentsLength
  local.get $3
  call $~lib/typedarray/Float64Array#sort@varargs
  drop
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.load $0
  f64.const 4
  f64.eq
  if (result i32)
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   i32.const 1
   i32.le_u
   if
    unreachable
   end
   local.get $3
   i32.load $0 offset=4
   f64.load $0 offset=8
   f64.const 5
   f64.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   i32.const 2
   i32.le_u
   if
    unreachable
   end
   local.get $3
   i32.load $0 offset=4
   f64.load $0 offset=16
   f64.const 6
   f64.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   i32.const 3
   i32.le_u
   if
    unreachable
   end
   local.get $3
   i32.load $0 offset=4
   f64.load $0 offset=24
   f64.const 7
   f64.eq
  else
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 0
  i32.store8 $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 255
  i32.store8 $0 offset=2
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 255
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int8Array#constructor
  local.tee $8
  i32.store $0 offset=12
  local.get $8
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $8
  i32.load $0 offset=8
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=4
  local.get $8
  i32.load $0 offset=4
  local.set $5
  i32.const 1
  local.get $8
  i32.load $0 offset=8
  local.tee $3
  local.get $3
  i32.const 1
  i32.gt_s
  select
  local.tee $4
  i32.const 3
  local.get $3
  local.get $3
  i32.const 3
  i32.gt_s
  select
  local.tee $3
  i32.lt_s
  if
   local.get $4
   local.get $5
   i32.add
   i32.const 1
   local.get $3
   local.get $4
   i32.sub
   memory.fill $0
  end
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 1328
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt8ArrayEqual (result i32)
   i32.const 0
   local.get $8
   i32.load $0 offset=8
   local.get $4
   i32.load $0 offset=12
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt8ArrayEqual
   drop
   local.get $8
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|0
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $8
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $8
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt8ArrayEqual
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $4
  local.get $8
  i32.load $0 offset=8
  local.tee $3
  i32.const 0
  local.get $3
  i32.const 0
  i32.le_s
  select
  local.tee $0
  local.get $3
  i32.lt_s
  if
   local.get $0
   local.get $4
   i32.add
   i32.const 0
   local.get $3
   local.get $0
   i32.sub
   memory.fill $0
  end
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 1360
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt8ArrayEqual1 (result i32)
   i32.const 0
   local.set $0
   i32.const 0
   local.get $8
   i32.load $0 offset=8
   local.get $4
   i32.load $0 offset=12
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt8ArrayEqual1
   drop
   local.get $8
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|02
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $8
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $8
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt8ArrayEqual1
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|02
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $4
  local.get $8
  i32.load $0 offset=8
  local.tee $0
  i32.const 0
  local.get $0
  i32.const 0
  i32.le_s
  select
  local.tee $3
  local.get $0
  i32.const 3
  i32.sub
  local.tee $0
  i32.lt_s
  if
   local.get $3
   local.get $4
   i32.add
   i32.const 1
   local.get $0
   local.get $3
   i32.sub
   memory.fill $0
  end
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 1392
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt8ArrayEqual4 (result i32)
   i32.const 0
   local.set $0
   i32.const 0
   local.get $8
   i32.load $0 offset=8
   local.get $4
   i32.load $0 offset=12
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt8ArrayEqual4
   drop
   local.get $8
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|05
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $8
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $8
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt8ArrayEqual4
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|05
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $4
  local.get $8
  i32.load $0 offset=8
  local.tee $3
  i32.const 2
  i32.sub
  local.set $0
  local.get $0
  local.get $3
  i32.lt_s
  if
   local.get $0
   local.get $4
   i32.add
   i32.const 2
   local.get $3
   local.get $0
   i32.sub
   memory.fill $0
  end
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 1424
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt8ArrayEqual7 (result i32)
   i32.const 0
   local.set $0
   i32.const 0
   local.get $8
   i32.load $0 offset=8
   local.get $4
   i32.load $0 offset=12
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt8ArrayEqual7
   drop
   local.get $8
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|08
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $8
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $8
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt8ArrayEqual7
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|08
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  local.set $4
  i32.const 1
  local.get $8
  i32.load $0 offset=8
  local.tee $0
  local.get $0
  i32.const 1
  i32.gt_s
  select
  local.tee $3
  local.get $0
  i32.const 0
  local.get $0
  i32.const 0
  i32.le_s
  select
  local.tee $0
  i32.lt_s
  if
   local.get $3
   local.get $4
   i32.add
   i32.const 0
   local.get $0
   local.get $3
   i32.sub
   memory.fill $0
  end
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 1456
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt8ArrayEqual10 (result i32)
   i32.const 0
   local.set $0
   i32.const 0
   local.get $8
   i32.load $0 offset=8
   local.get $4
   i32.load $0 offset=12
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt8ArrayEqual10
   drop
   local.get $8
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|011
    local.get $0
    local.get $3
    i32.lt_s
    if
     local.get $0
     local.get $8
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $8
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt8ArrayEqual10
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|011
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $8
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int8Array#subarray
  local.tee $5
  i32.store $0 offset=20
  local.get $5
  i32.load $0 offset=4
  local.set $4
  local.get $5
  i32.load $0 offset=8
  local.tee $3
  i32.const 0
  local.get $3
  i32.const 0
  i32.le_s
  select
  local.tee $0
  local.get $3
  i32.lt_s
  if
   local.get $0
   local.get $4
   i32.add
   i32.const 0
   local.get $3
   local.get $0
   i32.sub
   memory.fill $0
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  local.get $5
  i32.load $0
  i32.sub
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  i32.const 3
  i32.const 0
  i32.const 15
  i32.const 1488
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt8ArrayEqual13 (result i32)
   i32.const 0
   local.get $5
   i32.load $0 offset=8
   local.get $4
   i32.load $0 offset=12
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt8ArrayEqual13
   drop
   local.get $5
   i32.load $0 offset=8
   local.set $3
   loop $for-loop|014
    local.get $2
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.tee $0
     local.get $5
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $0
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $5
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt8ArrayEqual13
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|014
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 1520
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt8ArrayEqual15 (result i32)
   i32.const 0
   local.set $2
   i32.const 0
   local.get $8
   i32.load $0 offset=8
   local.get $3
   i32.load $0 offset=12
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt8ArrayEqual15
   drop
   local.get $8
   i32.load $0 offset=8
   local.set $0
   loop $for-loop|016
    local.get $0
    local.get $2
    i32.gt_s
    if
     local.get $2
     local.get $8
     i32.load $0 offset=8
     i32.ge_u
     if
      unreachable
     end
     local.get $2
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $8
     i32.load $0 offset=4
     local.get $2
     i32.add
     i32.load8_s $0
     local.get $3
     i32.load $0 offset=4
     local.get $2
     i32.add
     i32.load8_s $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt8ArrayEqual15
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|016
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $5
  i32.store $0 offset=24
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=16
  local.get $5
  i32.const 1
  i32.const 1
  i32.const 3
  call $~lib/typedarray/Int32Array#fill
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1552
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual (result i32)
   i32.const 0
   local.set $2
   i32.const 0
   local.get $4
   i32.load $0 offset=12
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual
   drop
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|00
    local.get $2
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $5
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $2
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $2
     i32.const 2
     i32.shl
     local.tee $0
     local.get $5
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|00
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.const 0
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#fill
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1600
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual1 (result i32)
   i32.const 0
   local.set $2
   i32.const 0
   local.get $4
   i32.load $0 offset=12
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual1
   drop
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|03
    local.get $2
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $5
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $2
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $2
     i32.const 2
     i32.shl
     local.tee $0
     local.get $5
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual1
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|03
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.const 1
  i32.const 0
  i32.const -3
  call $~lib/typedarray/Int32Array#fill
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1648
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual4 (result i32)
   i32.const 0
   local.set $2
   i32.const 0
   local.get $4
   i32.load $0 offset=12
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual4
   drop
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|06
    local.get $2
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $5
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $2
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $2
     i32.const 2
     i32.shl
     local.tee $0
     local.get $5
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual4
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|06
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.const 2
  i32.const -2
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#fill
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1696
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual7 (result i32)
   i32.const 0
   local.set $2
   i32.const 0
   local.get $4
   i32.load $0 offset=12
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual7
   drop
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|09
    local.get $2
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $5
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $2
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $2
     i32.const 2
     i32.shl
     local.tee $0
     local.get $5
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual7
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|09
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.const 0
  i32.const 1
  i32.const 0
  call $~lib/typedarray/Int32Array#fill
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1744
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual10 (result i32)
   i32.const 0
   local.set $2
   i32.const 0
   local.get $4
   i32.load $0 offset=12
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual10
   drop
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|012
    local.get $2
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $5
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $2
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $2
     i32.const 2
     i32.shl
     local.tee $0
     local.get $5
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual10
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|012
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int32Array#subarray
  local.tee $4
  i32.store $0 offset=28
  local.get $4
  i32.const 0
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#fill
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 12
  i32.ne
  if
   unreachable
  end
  i32.const 3
  i32.const 2
  i32.const 16
  i32.const 1792
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual13 (result i32)
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual13
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|015
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual13
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|015
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1824
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual16 (result i32)
   i32.const 0
   local.set $2
   i32.const 0
   local.get $4
   i32.load $0 offset=12
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual16
   drop
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|017
    local.get $2
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $5
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $2
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $2
     i32.const 2
     i32.shl
     local.tee $0
     local.get $5
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual16
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|017
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 6
  call $~lib/typedarray/Int8Array#constructor
  local.tee $0
  i32.store $0 offset=32
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=3
  local.get $0
  i32.load $0 offset=8
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 5
  i32.store8 $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 5
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=5
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 6
  call $~lib/typedarray/Int8Array#subarray
  local.tee $0
  i32.store $0 offset=36
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 5
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 5
  call $~lib/typedarray/Int8Array#subarray
  local.tee $0
  i32.store $0 offset=40
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 4
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int8Array#subarray
  local.tee $0
  i32.store $0 offset=44
  local.get $0
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $5
  i32.store $0 offset=52
  local.get $0
  i32.const 0
  i32.const 3
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1872
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual18 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual18
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|019
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual18
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|019
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const 1
  i32.const 3
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1920
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual20 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual20
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|021
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual20
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|021
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const 1
  i32.const 2
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1968
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual22 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual22
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|023
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual22
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|023
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const 2
  i32.const 2
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2016
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual24 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual24
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|025
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual24
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|025
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const 0
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2064
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual26 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual26
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|027
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual26
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|027
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const 1
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2112
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual28 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual28
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|029
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual28
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|029
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const 1
  i32.const 2
  i32.const 4
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2160
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual30 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual30
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|031
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual30
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|031
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const 0
  i32.const -2
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2208
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual32 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual32
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|033
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual32
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|033
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const 0
  i32.const -2
  i32.const -1
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2256
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual34 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual34
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|035
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual34
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|035
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const -4
  i32.const -3
  i32.const -2
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2304
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual36 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual36
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|037
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual36
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|037
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const -4
  i32.const -3
  i32.const -1
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2352
  call $~lib/rt/__newArray
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual38 (result i32)
   i32.const 0
   local.set $11
   i32.const 0
   local.get $3
   i32.load $0 offset=12
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual38
   drop
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|039
    local.get $2
    local.get $11
    i32.gt_s
    if
     local.get $11
     local.get $4
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $11
     local.get $3
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $11
     i32.const 2
     i32.shl
     local.tee $0
     local.get $4
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $3
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual38
     drop
     local.get $11
     i32.const 1
     i32.add
     local.set $11
     br $for-loop|039
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=48
  local.get $0
  i32.const -4
  i32.const -3
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $5
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.store $0 offset=56
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 2400
  call $~lib/rt/__newArray
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0 offset=16
  block $__inlined_func$std/typedarray/isInt32ArrayEqual40 (result i32)
   i32.const 0
   local.set $2
   i32.const 0
   local.get $4
   i32.load $0 offset=12
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   i32.ne
   br_if $__inlined_func$std/typedarray/isInt32ArrayEqual40
   drop
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $3
   loop $for-loop|041
    local.get $2
    local.get $3
    i32.lt_s
    if
     local.get $2
     local.get $5
     i32.load $0 offset=8
     i32.const 2
     i32.shr_u
     i32.ge_u
     if
      unreachable
     end
     local.get $2
     local.get $4
     i32.load $0 offset=12
     i32.ge_u
     if
      unreachable
     end
     i32.const 0
     local.get $2
     i32.const 2
     i32.shl
     local.tee $0
     local.get $5
     i32.load $0 offset=4
     i32.add
     i32.load $0
     local.get $4
     i32.load $0 offset=4
     local.get $0
     i32.add
     i32.load $0
     i32.ne
     br_if $__inlined_func$std/typedarray/isInt32ArrayEqual40
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $for-loop|041
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $3
  i32.store $0 offset=60
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=12
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 4
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 5
  i32.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int32Array#subarray
  local.tee $2
  i32.store $0 offset=64
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 12
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 1
  i32.const 3
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=68
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 8
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=72
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 4
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 0
  i32.const 2147483647
  call $~lib/typedarray/Int32Array#slice
  local.tee $0
  i32.store $0 offset=76
  local.get $0
  local.get $3
  i32.eq
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0
  i32.sub
  local.get $3
  i32.load $0 offset=4
  local.get $3
  i32.load $0
  i32.sub
  i32.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $8
  i32.store $0
  local.get $8
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2448
  i32.store $0 offset=4
  i32.const 0
  local.set $0
  local.get $8
  i32.load $0 offset=4
  local.set $5
  i32.const 0
  local.set $2
  local.get $8
  i32.load $0 offset=8
  local.set $4
  loop $for-loop|01742
   local.get $2
   local.get $4
   i32.lt_s
   if
    local.get $2
    local.get $5
    i32.add
    i32.load8_s $0
    local.set $3
    i32.const 4
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $2
    local.get $8
    i32.const 2448
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|01742
   end
  end
  local.get $0
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $8
  i32.store $0
  local.get $8
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $8
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $8
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2480
  i32.store $0 offset=4
  i32.const 0
  local.set $0
  local.get $8
  i32.load $0 offset=4
  local.set $5
  i32.const 0
  local.set $2
  local.get $8
  i32.load $0 offset=8
  local.set $4
  loop $for-loop|010
   local.get $2
   local.get $4
   i32.lt_s
   if
    local.get $2
    local.get $5
    i32.add
    i32.load8_u $0
    local.set $3
    i32.const 4
    global.set $~argumentsLength
    local.get $0
    local.get $3
    local.get $2
    local.get $8
    i32.const 2480
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|010
   end
  end
  local.get $0
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $5
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2512
  i32.store $0 offset=4
  local.get $5
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  local.set $3
  loop $for-loop|018
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $2
    i32.const 4
    global.set $~argumentsLength
    local.get $1
    local.get $2
    local.get $0
    local.get $5
    i32.const 2512
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $1
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|018
   end
  end
  local.get $1
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $5
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 2544
  i32.store $0 offset=4
  i32.const 0
  local.set $1
  local.get $5
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  loop $for-loop|01943
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $2
    i32.const 4
    global.set $~argumentsLength
    local.get $1
    local.get $2
    local.get $0
    local.get $5
    i32.const 2544
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $1
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01943
   end
  end
  local.get $1
  i32.const 65535
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $5
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 2576
  i32.store $0 offset=4
  i32.const 0
  local.set $1
  local.get $5
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $3
  loop $for-loop|020
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $2
    i32.const 4
    global.set $~argumentsLength
    local.get $1
    local.get $2
    local.get $0
    local.get $5
    i32.const 2576
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $1
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|020
   end
  end
  local.get $1
  i32.const 65535
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $5
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2608
  i32.store $0 offset=4
  i32.const 0
  local.set $1
  local.get $5
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  loop $for-loop|02144
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $2
    i32.const 4
    global.set $~argumentsLength
    local.get $1
    local.get $2
    local.get $0
    local.get $5
    i32.const 2608
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $1
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|02144
   end
  end
  local.get $1
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $5
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2640
  i32.store $0 offset=4
  i32.const 0
  local.set $1
  local.get $5
  i32.load $0 offset=4
  local.set $4
  i32.const 0
  local.set $0
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  loop $for-loop|022
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $2
    i32.const 4
    global.set $~argumentsLength
    local.get $1
    local.get $2
    local.get $0
    local.get $5
    i32.const 2640
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $1
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|022
   end
  end
  local.get $1
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 2672
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  loop $for-loop|02345
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $13
    local.get $6
    local.get $0
    local.get $3
    i32.const 2672
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $13
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|02345
   end
  end
  local.get $13
  i64.const 6
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 2704
  i32.store $0 offset=4
  i64.const 0
  local.set $13
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  loop $for-loop|024
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $13
    local.get $6
    local.get $0
    local.get $3
    i32.const 2704
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $13
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|024
   end
  end
  local.get $13
  i64.const 6
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2736
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $1
  loop $for-loop|02546
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $7
    i32.const 4
    global.set $~argumentsLength
    local.get $14
    local.get $7
    local.get $0
    local.get $3
    i32.const 2736
    i32.load $0
    call_indirect $0 (type $f32_f32_i32_i32_=>_f32)
    local.set $14
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|02546
   end
  end
  local.get $14
  f32.const 6
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 2768
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  loop $for-loop|026
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $10
    i32.const 4
    global.set $~argumentsLength
    local.get $15
    local.get $10
    local.get $0
    local.get $3
    i32.const 2768
    i32.load $0
    call_indirect $0 (type $f64_f64_i32_i32_=>_f64)
    local.set $15
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|026
   end
  end
  local.get $15
  f64.const 6
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.add
  i32.load8_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.add
  i32.load8_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.add
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.add
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.add
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.add
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i64.const 3
  i64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.load $0
  f32.const 1
  f32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  f32.const 3
  f32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  f32.const 1
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.load $0
  f64.const 1
  f64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  f64.const 3
  f64.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $1
  i32.const 3
  i32.sub
  local.tee $0
  local.get $1
  i32.ge_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  local.get $0
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  f64.const 1
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2800
  i32.store $0 offset=4
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|01827
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $2
    local.get $3
    i32.add
    i32.load8_s $0
    local.set $1
    i32.const 4
    global.set $~argumentsLength
    local.get $0
    local.get $1
    local.get $2
    local.get $4
    i32.const 2800
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $0
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|01827
   end
  end
  local.get $0
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2832
  i32.store $0 offset=4
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|02628
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $2
    local.get $3
    i32.add
    i32.load8_u $0
    local.set $1
    i32.const 4
    global.set $~argumentsLength
    local.get $0
    local.get $1
    local.get $2
    local.get $4
    i32.const 2832
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $0
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|02628
   end
  end
  local.get $0
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 2864
  i32.store $0 offset=4
  i32.const 0
  local.set $1
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $0
  loop $for-loop|02947
   local.get $0
   i32.const 0
   i32.ge_s
   if
    local.get $0
    local.get $3
    i32.add
    i32.load8_u $0
    local.set $2
    i32.const 4
    global.set $~argumentsLength
    local.get $1
    local.get $2
    local.get $0
    local.get $4
    i32.const 2864
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $1
    local.get $0
    i32.const 1
    i32.sub
    local.set $0
    br $for-loop|02947
   end
  end
  local.get $1
  i32.const 255
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 2896
  i32.store $0 offset=4
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|030
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $3
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $1
    i32.const 4
    global.set $~argumentsLength
    local.get $0
    local.get $1
    local.get $2
    local.get $4
    i32.const 2896
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $0
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|030
   end
  end
  local.get $0
  i32.const 65535
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 2928
  i32.store $0 offset=4
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|038
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $3
    local.get $2
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $1
    i32.const 4
    global.set $~argumentsLength
    local.get $0
    local.get $1
    local.get $2
    local.get $4
    i32.const 2928
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $0
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|038
   end
  end
  local.get $0
  i32.const 65535
  i32.and
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2960
  i32.store $0 offset=4
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|046
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $3
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $1
    i32.const 4
    global.set $~argumentsLength
    local.get $0
    local.get $1
    local.get $2
    local.get $4
    i32.const 2960
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $0
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|046
   end
  end
  local.get $0
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 2992
  i32.store $0 offset=4
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=4
  local.set $3
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|063
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $3
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $1
    i32.const 4
    global.set $~argumentsLength
    local.get $0
    local.get $1
    local.get $2
    local.get $4
    i32.const 2992
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $0
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|063
   end
  end
  local.get $0
  i32.const 6
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $1
  i32.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 3024
  i32.store $0 offset=4
  i64.const 0
  local.set $13
  local.get $1
  i32.load $0 offset=4
  local.set $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|068
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $0
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $13
    local.get $6
    local.get $2
    local.get $1
    i32.const 3024
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $13
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|068
   end
  end
  local.get $13
  i64.const 6
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $1
  i32.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 3056
  i32.store $0 offset=4
  i64.const 0
  local.set $13
  local.get $1
  i32.load $0 offset=4
  local.set $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|076
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $0
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $6
    i32.const 4
    global.set $~argumentsLength
    local.get $13
    local.get $6
    local.get $2
    local.get $1
    i32.const 3056
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $13
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|076
   end
  end
  local.get $13
  i64.const 6
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $1
  i32.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 3088
  i32.store $0 offset=4
  f32.const 0
  local.set $14
  local.get $1
  i32.load $0 offset=4
  local.set $0
  local.get $1
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|081
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $0
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $7
    i32.const 4
    global.set $~argumentsLength
    local.get $14
    local.get $7
    local.get $2
    local.get $1
    i32.const 3088
    i32.load $0
    call_indirect $0 (type $f32_f32_i32_i32_=>_f32)
    local.set $14
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|081
   end
  end
  local.get $14
  f32.const 6
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $1
  i32.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 3120
  i32.store $0 offset=4
  f64.const 0
  local.set $15
  local.get $1
  i32.load $0 offset=4
  local.set $0
  local.get $1
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $2
  loop $for-loop|087
   local.get $2
   i32.const 0
   i32.ge_s
   if
    local.get $0
    local.get $2
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $10
    i32.const 4
    global.set $~argumentsLength
    local.get $15
    local.get $10
    local.get $2
    local.get $1
    i32.const 3120
    i32.load $0
    call_indirect $0 (type $f64_f64_i32_i32_=>_f64)
    local.set $15
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $for-loop|087
   end
  end
  local.get $15
  f64.const 6
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $9
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $9
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  local.tee $8
  i32.const 3152
  i32.store $0 offset=4
  local.get $8
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  local.set $5
  local.get $9
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0 offset=4
  loop $for-loop|048
   local.get $2
   local.get $5
   i32.lt_s
   if
    local.get $2
    local.get $4
    i32.add
    i32.load8_s $0
    local.set $0
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $2
    i32.add
    local.get $0
    local.get $2
    local.get $9
    i32.const 3152
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|048
   end
  end
  local.get $3
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $3
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $1
  i32.store $0 offset=4
  local.get $3
  local.get $5
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $8
  local.get $3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $9
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $9
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  local.tee $8
  i32.const 3184
  i32.store $0 offset=4
  local.get $8
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  local.set $5
  local.get $9
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0 offset=4
  loop $for-loop|049
   local.get $2
   local.get $5
   i32.lt_s
   if
    local.get $2
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $0
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $2
    i32.add
    local.get $0
    local.get $2
    local.get $9
    i32.const 3184
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|049
   end
  end
  local.get $3
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $3
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $1
  i32.store $0 offset=4
  local.get $3
  local.get $5
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $8
  local.get $3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $9
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $9
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  local.tee $8
  i32.const 3216
  i32.store $0 offset=4
  local.get $8
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  local.set $5
  local.get $9
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0 offset=4
  loop $for-loop|050
   local.get $2
   local.get $5
   i32.lt_s
   if
    local.get $2
    local.get $4
    i32.add
    i32.load8_u $0
    local.set $0
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $2
    i32.add
    local.get $0
    local.get $2
    local.get $9
    i32.const 3216
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|050
   end
  end
  local.get $3
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $3
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $1
  i32.store $0 offset=4
  local.get $3
  local.get $5
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $8
  local.get $3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $11
  i32.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $11
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $11
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.tee $9
  i32.const 3248
  i32.store $0 offset=4
  local.get $9
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $8
  local.get $11
  i32.load $0 offset=4
  local.set $5
  local.get $0
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $8
  i32.const 1
  i32.shl
  local.tee $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|01
   local.get $8
   local.get $12
   i32.gt_s
   if
    local.get $12
    i32.const 1
    i32.shl
    local.tee $1
    local.get $5
    i32.add
    i32.load16_s $0
    local.set $0
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $2
    i32.add
    local.get $0
    local.get $12
    local.get $11
    i32.const 3248
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store16 $0
    local.get $12
    i32.const 1
    i32.add
    local.set $12
    br $for-loop|01
   end
  end
  local.get $4
  local.get $2
  i32.store $0
  local.get $2
  if
   local.get $4
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $2
  i32.store $0 offset=4
  local.get $4
  local.get $3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
  local.get $4
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load16_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load16_s $0 offset=2
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load16_s $0 offset=4
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $12
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $11
  i32.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $11
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $11
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  local.tee $9
  i32.const 3280
  i32.store $0 offset=4
  local.get $9
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $8
  local.get $11
  i32.load $0 offset=4
  local.set $5
  local.get $0
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $8
  i32.const 1
  i32.shl
  local.tee $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|04
   local.get $8
   local.get $12
   i32.gt_s
   if
    local.get $12
    i32.const 1
    i32.shl
    local.tee $1
    local.get $5
    i32.add
    i32.load16_u $0
    local.set $0
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $2
    i32.add
    local.get $0
    local.get $12
    local.get $11
    i32.const 3280
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store16 $0
    local.get $12
    i32.const 1
    i32.add
    local.set $12
    br $for-loop|04
   end
  end
  local.get $4
  local.get $2
  i32.store $0
  local.get $2
  if
   local.get $4
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $2
  i32.store $0 offset=4
  local.get $4
  local.get $3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
  local.get $4
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load16_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load16_u $0 offset=2
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load16_u $0 offset=4
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $12
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $11
  i32.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $11
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  local.tee $9
  i32.const 3312
  i32.store $0 offset=4
  local.get $9
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $8
  local.get $11
  i32.load $0 offset=4
  local.set $5
  local.get $0
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $8
  i32.const 2
  i32.shl
  local.tee $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|07
   local.get $8
   local.get $12
   i32.gt_s
   if
    local.get $12
    i32.const 2
    i32.shl
    local.tee $1
    local.get $5
    i32.add
    i32.load $0
    local.set $0
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $2
    i32.add
    local.get $0
    local.get $12
    local.get $11
    i32.const 3312
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store $0
    local.get $12
    i32.const 1
    i32.add
    local.set $12
    br $for-loop|07
   end
  end
  local.get $4
  local.get $2
  i32.store $0
  local.get $2
  if
   local.get $4
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $2
  i32.store $0 offset=4
  local.get $4
  local.get $3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
  local.get $4
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $12
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $11
  i32.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $11
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $11
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  local.tee $9
  i32.const 3344
  i32.store $0 offset=4
  local.get $9
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $11
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $8
  local.get $11
  i32.load $0 offset=4
  local.set $5
  local.get $0
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $8
  i32.const 2
  i32.shl
  local.tee $3
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|013
   local.get $8
   local.get $12
   i32.gt_s
   if
    local.get $12
    i32.const 2
    i32.shl
    local.tee $1
    local.get $5
    i32.add
    i32.load $0
    local.set $0
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $2
    i32.add
    local.get $0
    local.get $12
    local.get $11
    i32.const 3344
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store $0
    local.get $12
    i32.const 1
    i32.add
    local.set $12
    br $for-loop|013
   end
  end
  local.get $4
  local.get $2
  i32.store $0
  local.get $2
  if
   local.get $4
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $2
  i32.store $0 offset=4
  local.get $4
  local.get $3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
  local.get $4
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0 offset=4
  i32.const 4
  i32.ne
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.load $0 offset=8
  i32.const 9
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.tee $8
  i32.const 3376
  i32.store $0 offset=4
  local.get $8
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $5
  local.get $9
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 3
  i32.shl
  local.tee $2
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0 offset=4
  loop $for-loop|028
   local.get $5
   local.get $11
   i32.gt_s
   if
    local.get $11
    i32.const 3
    i32.shl
    local.tee $0
    local.get $4
    i32.add
    i64.load $0
    local.set $6
    i32.const 3
    global.set $~argumentsLength
    local.get $0
    local.get $1
    i32.add
    local.get $6
    local.get $11
    local.get $9
    i32.const 3376
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i64)
    i64.store $0
    local.get $11
    i32.const 1
    i32.add
    local.set $11
    br $for-loop|028
   end
  end
  local.get $3
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $3
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $1
  i32.store $0 offset=4
  local.get $3
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $8
  local.get $3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 4
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 9
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.tee $8
  i32.const 3408
  i32.store $0 offset=4
  local.get $8
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $5
  local.get $9
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 3
  i32.shl
  local.tee $2
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0 offset=4
  loop $for-loop|032
   local.get $5
   local.get $11
   i32.gt_s
   if
    local.get $11
    i32.const 3
    i32.shl
    local.tee $0
    local.get $4
    i32.add
    i64.load $0
    local.set $6
    i32.const 3
    global.set $~argumentsLength
    local.get $0
    local.get $1
    i32.add
    local.get $6
    local.get $11
    local.get $9
    i32.const 3408
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i64)
    i64.store $0
    local.get $11
    i32.const 1
    i32.add
    local.set $11
    br $for-loop|032
   end
  end
  local.get $3
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $3
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $1
  i32.store $0 offset=4
  local.get $3
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $8
  local.get $3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0
  i64.const 1
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=8
  i64.const 4
  i64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.load $0 offset=16
  i64.const 9
  i64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $9
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  local.tee $8
  i32.const 3440
  i32.store $0 offset=4
  local.get $8
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $5
  local.get $9
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 2
  i32.shl
  local.tee $2
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0 offset=4
  loop $for-loop|034
   local.get $5
   local.get $11
   i32.gt_s
   if
    local.get $11
    i32.const 2
    i32.shl
    local.tee $0
    local.get $4
    i32.add
    f32.load $0
    local.set $7
    i32.const 3
    global.set $~argumentsLength
    local.get $0
    local.get $1
    i32.add
    local.get $7
    local.get $11
    local.get $9
    i32.const 3440
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_f32)
    f32.store $0
    local.get $11
    i32.const 1
    i32.add
    local.set $11
    br $for-loop|034
   end
  end
  local.get $3
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $3
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $1
  i32.store $0 offset=4
  local.get $3
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $8
  local.get $3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.load $0
  f32.const 1
  f32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.load $0 offset=4
  f32.const 4
  f32.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.load $0 offset=8
  f32.const 9
  f32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $9
  i32.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  local.tee $8
  i32.const 3472
  i32.store $0 offset=4
  local.get $8
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $9
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $5
  local.get $9
  i32.load $0 offset=4
  local.set $4
  local.get $0
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $5
  i32.const 3
  i32.shl
  local.tee $2
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0 offset=4
  loop $for-loop|036
   local.get $5
   local.get $11
   i32.gt_s
   if
    local.get $11
    i32.const 3
    i32.shl
    local.tee $0
    local.get $4
    i32.add
    f64.load $0
    local.set $10
    i32.const 3
    global.set $~argumentsLength
    local.get $0
    local.get $1
    i32.add
    local.get $10
    local.get $11
    local.get $9
    i32.const 3472
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_f64)
    f64.store $0
    local.get $11
    i32.const 1
    i32.add
    local.set $11
    br $for-loop|036
   end
  end
  local.get $3
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $3
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $3
  local.get $1
  i32.store $0 offset=4
  local.get $3
  local.get $2
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $8
  local.get $3
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.load $0
  f64.const 1
  f64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 4
  f64.ne
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 9
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  call $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64>
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3856
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|03151
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 3856
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|03151
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3888
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|0437
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 3888
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0437
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3920
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|03238
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 3920
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|03238
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3952
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|0433
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 3952
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0433
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.034 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 3984
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|03552
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 3984
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.034
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|03552
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0136 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4016
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|043739
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4016
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0136
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|043739
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store16 $0 offset=4
  block $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4048
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $2
   loop $for-loop|03953
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4048
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|03953
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4080
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $2
   loop $for-loop|0440
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4080
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0440
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store16 $0 offset=4
  block $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4112
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $2
   loop $for-loop|04154
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4112
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04154
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4144
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $2
   loop $for-loop|0442
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4144
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0442
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store $0 offset=8
  block $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4176
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|043
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4176
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|043
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4208
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|0444
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4208
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0444
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store $0 offset=8
  block $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4240
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|045
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4240
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|045
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4272
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|0446
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $1
     local.get $0
     local.get $4
     i32.const 4272
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0446
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 2
  i64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 6
  i64.store $0 offset=16
  block $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4304
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|047
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $6
     local.get $0
     local.get $3
     i32.const 4304
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|047
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4336
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|0448
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $6
     local.get $0
     local.get $3
     i32.const 4336
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0448
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 2
  i64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 6
  i64.store $0 offset=16
  block $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4368
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|04955
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $6
     local.get $0
     local.get $3
     i32.const 4368
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04955
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4400
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|0450
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $6
     local.get $0
     local.get $3
     i32.const 4400
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0450
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 2
  f32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 4
  f32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 6
  f32.store $0 offset=8
  block $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4432
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $1
   loop $for-loop|051
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $7
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $7
     local.get $0
     local.get $3
     i32.const 4432
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|051
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4464
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $1
   loop $for-loop|0452
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $7
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $7
     local.get $0
     local.get $3
     i32.const 4464
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0452
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 2
  f64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 4
  f64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 6
  f64.store $0 offset=16
  block $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4496
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|053
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $10
     local.get $0
     local.get $3
     i32.const 4496
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|053
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 4528
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|0454
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     i32.const 1
     local.get $10
     local.get $0
     local.get $3
     i32.const 4528
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0454
    end
   end
   i32.const 0
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 4560
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
   loop $for-loop|055
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4560
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|055
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4592
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.01
   loop $for-loop|0456
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4592
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0456
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 4624
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
   loop $for-loop|057
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4624
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|057
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4656
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.01
   loop $for-loop|0458
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4656
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0458
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 4688
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.059
   loop $for-loop|060
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4688
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.059
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|060
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4720
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0161
   loop $for-loop|0462
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4720
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0161
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0462
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4752
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
   loop $for-loop|064
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4752
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|064
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4784
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.01
   loop $for-loop|0465
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4784
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0465
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4816
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
   loop $for-loop|066
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4816
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|066
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4848
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.01
   loop $for-loop|0467
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4848
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0467
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4880
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
   loop $for-loop|069
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4880
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|069
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4912
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.01
   loop $for-loop|0470
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4912
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0470
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4944
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
   loop $for-loop|071
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4944
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|071
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4976
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.01
   loop $for-loop|0472
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $4
     i32.const 4976
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0472
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5008
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
   loop $for-loop|073
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     local.get $6
     local.get $0
     local.get $3
     i32.const 5008
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|073
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5040
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.01
   loop $for-loop|0474
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     local.get $6
     local.get $0
     local.get $3
     i32.const 5040
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0474
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5072
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
   loop $for-loop|075
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     local.get $6
     local.get $0
     local.get $3
     i32.const 5072
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|075
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5104
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.01
   loop $for-loop|0476
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     local.get $6
     local.get $0
     local.get $3
     i32.const 5104
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0476
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 5136
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $1
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
   loop $for-loop|077
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $7
     i32.const 3
     global.set $~argumentsLength
     local.get $7
     local.get $0
     local.get $3
     i32.const 5136
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|077
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5168
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $1
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.01
   loop $for-loop|0478
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $7
     i32.const 3
     global.set $~argumentsLength
     local.get $7
     local.get $0
     local.get $3
     i32.const 5168
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0478
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5200
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
   loop $for-loop|079
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     local.get $10
     local.get $0
     local.get $3
     i32.const 5200
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|079
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5232
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.01
   loop $for-loop|0480
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     local.get $10
     local.get $0
     local.get $3
     i32.const 5232
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.01
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0480
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 5264
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
   loop $for-loop|082
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5264
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|082
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5296
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.01
   loop $for-loop|0483
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5296
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0483
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 5328
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
   loop $for-loop|084
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5328
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|084
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5360
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.01
   loop $for-loop|0485
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5360
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0485
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 5392
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.086
   loop $for-loop|088
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5392
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.086
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|088
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5424
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0189
   loop $for-loop|0490
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $0
     local.get $2
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5424
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0189
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0490
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 5456
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
   loop $for-loop|091
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5456
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|091
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5488
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.01
   loop $for-loop|0492
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5488
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0492
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store16 $0
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0 offset=2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 5520
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
   loop $for-loop|093
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5520
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|093
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5552
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.01
   loop $for-loop|0494
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5552
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0494
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 5584
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
   loop $for-loop|095
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5584
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|095
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5616
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.01
   loop $for-loop|0496
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5616
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0496
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 2
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i32.const 3
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 5648
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
   loop $for-loop|097
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5648
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|097
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5680
  i32.store $0 offset=4
  local.get $3
  i32.load $0 offset=4
  local.set $2
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.01
   loop $for-loop|0498
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     local.get $1
     local.get $0
     local.get $3
     i32.const 5680
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0498
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5712
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
   loop $for-loop|099
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     local.get $6
     local.get $0
     local.get $2
     i32.const 5712
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|099
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5744
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.01
   loop $for-loop|04100
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     local.get $6
     local.get $0
     local.get $2
     i32.const 5744
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|04100
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 1
  i64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 2
  i64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i64.const 3
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5776
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
   loop $for-loop|0101
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     local.get $6
     local.get $0
     local.get $2
     i32.const 5776
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0101
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5808
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.01
   loop $for-loop|04102
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     local.get $6
     local.get $0
     local.get $2
     i32.const 5808
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|04102
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 1
  f32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 2
  f32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f32.const 3
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 5840
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
   loop $for-loop|0103
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $7
     i32.const 3
     global.set $~argumentsLength
     local.get $7
     local.get $0
     local.get $2
     i32.const 5840
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0103
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5872
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.01
   loop $for-loop|04104
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $7
     i32.const 3
     global.set $~argumentsLength
     local.get $7
     local.get $0
     local.get $2
     i32.const 5872
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|04104
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 1
  f64.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  f64.const 3
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 5904
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
   loop $for-loop|0105
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     local.get $10
     local.get $0
     local.get $2
     i32.const 5904
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|0105
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 5936
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=4
  local.set $1
  local.get $2
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.sub
  local.set $0
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.01
   loop $for-loop|04106
    local.get $0
    i32.const 0
    i32.ge_s
    if
     local.get $1
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     local.get $10
     local.get $0
     local.get $2
     i32.const 5936
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     br_if $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.01
     local.get $0
     i32.const 1
     i32.sub
     local.set $0
     br $for-loop|04106
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 5968
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|0107
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 5968
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0107
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6000
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|04108
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6000
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04108
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6032
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|0109
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6032
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0109
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6064
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|04110
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6064
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04110
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store8 $0 offset=1
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store8 $0 offset=2
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0111 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6096
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|0112
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6096
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0111
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0112
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.01113 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6128
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   local.set $2
   loop $for-loop|04114
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $0
     local.get $3
     i32.add
     i32.load8_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6128
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.01113
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04114
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store16 $0 offset=4
  block $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6160
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $2
   loop $for-loop|0115
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6160
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0115
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6192
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $2
   loop $for-loop|04116
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6192
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04116
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store16 $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store16 $0 offset=2
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store16 $0 offset=4
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6224
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $2
   loop $for-loop|0117
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6224
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0117
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6256
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 1
   i32.shr_u
   local.set $2
   loop $for-loop|04118
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6256
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04118
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store $0 offset=8
  block $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6288
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|0119
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6288
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0119
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6320
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|04120
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6320
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04120
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 2
  i32.store $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 4
  i32.store $0 offset=4
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 6
  i32.store $0 offset=8
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6352
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|0121
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6352
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0121
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6384
   i32.store $0 offset=4
   local.get $4
   i32.load $0 offset=4
   local.set $3
   i32.const 0
   local.set $0
   local.get $4
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $2
   loop $for-loop|04122
    local.get $0
    local.get $2
    i32.lt_s
    if
     local.get $3
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $1
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $1
     local.get $0
     local.get $4
     i32.const 6384
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04122
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 2
  i64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 6
  i64.store $0 offset=16
  block $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6416
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|0123
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $6
     local.get $0
     local.get $3
     i32.const 6416
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0123
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6448
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|04124
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $6
     local.get $0
     local.get $3
     i32.const 6448
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04124
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 2
  i64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 4
  i64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  i64.const 6
  i64.store $0 offset=16
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6480
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|0125
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $6
     local.get $0
     local.get $3
     i32.const 6480
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0125
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6512
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|04126
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $6
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $6
     local.get $0
     local.get $3
     i32.const 6512
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04126
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 2
  f32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 4
  f32.store $0 offset=4
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f32.const 6
  f32.store $0 offset=8
  block $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6544
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $1
   loop $for-loop|0127
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $7
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $7
     local.get $0
     local.get $3
     i32.const 6544
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0127
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6576
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.set $1
   loop $for-loop|04128
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $7
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $7
     local.get $0
     local.get $3
     i32.const 6576
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04128
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 2
  f64.store $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 4
  f64.store $0 offset=8
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  f64.const 6
  f64.store $0 offset=16
  block $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6608
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|0129
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $10
     local.get $0
     local.get $3
     i32.const 6608
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.0
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|0129
    end
   end
   i32.const 1
  end
  i32.eqz
  if
   unreachable
  end
  block $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.01 (result i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 6640
   i32.store $0 offset=4
   local.get $3
   i32.load $0 offset=4
   local.set $2
   i32.const 0
   local.set $0
   local.get $3
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.set $1
   loop $for-loop|04130
    local.get $0
    local.get $1
    i32.lt_s
    if
     local.get $2
     local.get $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $10
     i32.const 3
     global.set $~argumentsLength
     i32.const 0
     local.get $10
     local.get $0
     local.get $3
     i32.const 6640
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     i32.eqz
     br_if $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.01
     drop
     local.get $0
     i32.const 1
     i32.add
     local.set $0
     br $for-loop|04130
    end
   end
   i32.const 1
  end
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.extend8_s
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store8 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.extend8_s
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store8 $0 offset=1
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.extend8_s
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6752
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  loop $for-loop|0131
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.add
    i32.load8_s $0
    local.set $1
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $0
    local.get $4
    i32.const 6752
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0131
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.const 255
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store8 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.const 255
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store8 $0 offset=1
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.const 255
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6784
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  loop $for-loop|0132
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.add
    i32.load8_u $0
    local.set $1
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $0
    local.get $4
    i32.const 6784
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0132
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0
  local.get $4
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.const 255
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 255
  local.get $0
  i32.sub
  i32.const 31
  i32.shr_s
  local.get $0
  i32.or
  local.get $0
  i32.const 31
  i32.shr_u
  i32.const -1
  i32.xor
  i32.and
  i32.store8 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.const 255
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 255
  local.get $0
  i32.sub
  i32.const 31
  i32.shr_s
  local.get $0
  i32.or
  local.get $0
  i32.const 31
  i32.shr_u
  i32.const -1
  i32.xor
  i32.and
  i32.store8 $0 offset=1
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.const 255
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  i32.const 255
  local.get $0
  i32.sub
  i32.const 31
  i32.shr_s
  local.get $0
  i32.or
  local.get $0
  i32.const 31
  i32.shr_u
  i32.const -1
  i32.xor
  i32.and
  i32.store8 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6816
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  local.set $2
  loop $for-loop|0133
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.add
    i32.load8_u $0
    local.set $1
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $0
    local.get $4
    i32.const 6816
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0133
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.extend16_s
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store16 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.extend16_s
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store16 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.extend16_s
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6848
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  loop $for-loop|0134
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $1
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $0
    local.get $4
    i32.const 6848
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0134
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  i32.const 65535
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store16 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  i32.const 65535
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store16 $0 offset=2
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  i32.const 65535
  i32.and
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store16 $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6880
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  loop $for-loop|0135
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $1
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $0
    local.get $4
    i32.const 6880
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0135
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6912
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  loop $for-loop|0136
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $1
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $0
    local.get $4
    i32.const 6912
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0136
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0
  local.get $4
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $4
  i32.load $0 offset=4
  local.get $0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6944
  i32.store $0 offset=8
  local.get $4
  i32.load $0 offset=4
  local.set $3
  i32.const 0
  local.set $0
  local.get $4
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  loop $for-loop|0137
   local.get $0
   local.get $2
   i32.lt_s
   if
    local.get $3
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $1
    i32.const 3
    global.set $~argumentsLength
    local.get $1
    local.get $0
    local.get $4
    i32.const 6944
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0137
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0
  local.set $6
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $6
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0 offset=4
  local.set $6
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $6
  i64.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0 offset=8
  local.set $6
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $6
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 6976
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  loop $for-loop|0138
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $6
    i32.const 3
    global.set $~argumentsLength
    local.get $6
    local.get $0
    local.get $3
    i32.const 6976
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0138
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0
  local.set $6
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $6
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0 offset=4
  local.set $6
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $6
  i64.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i64.load32_s $0 offset=8
  local.set $6
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $6
  i64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 7008
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  loop $for-loop|0139
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $6
    i32.const 3
    global.set $~argumentsLength
    local.get $6
    local.get $0
    local.get $3
    i32.const 7008
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0139
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  f32.convert_i32_s
  local.set $7
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $7
  f32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  f32.convert_i32_s
  local.set $7
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $7
  f32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  f32.convert_i32_s
  local.set $7
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $7
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 7040
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $1
  loop $for-loop|0140
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $7
    i32.const 3
    global.set $~argumentsLength
    local.get $7
    local.get $0
    local.get $3
    i32.const 7040
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0140
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  global.set $std/typedarray/forEachSelf
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.eqz
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0
  f64.convert_i32_s
  local.set $10
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $10
  f64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=4
  f64.convert_i32_s
  local.set $10
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $10
  f64.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 6704
  i32.store $0 offset=4
  i32.const 6716
  i32.load $0
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  i32.const 6708
  i32.load $0
  i32.load $0 offset=8
  f64.convert_i32_s
  local.set $10
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $3
  i32.load $0 offset=4
  local.get $10
  f64.store $0 offset=16
  global.get $~lib/memory/__stack_pointer
  i32.const 7072
  i32.store $0 offset=8
  local.get $3
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  local.get $3
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $1
  loop $for-loop|0141
   local.get $0
   local.get $1
   i32.lt_s
   if
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $10
    i32.const 3
    global.set $~argumentsLength
    local.get $10
    local.get $0
    local.get $3
    i32.const 7072
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_none)
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0141
   end
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  call $std/typedarray/testArrayReverse<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Float64Array,f64>
  global.get $~lib/memory/__stack_pointer
  i32.const 1
  call $~lib/typedarray/Float64Array#constructor
  local.tee $5
  i32.store $0 offset=80
  i32.const 0
  local.set $2
  local.get $5
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  f64.const nan:0x8000000000000
  f64.store $0
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $5
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $4
   i32.eqz
   local.tee $3
   local.get $3
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   local.get $5
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.const nan:0x8000000000000
     f64.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  block $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   i32.const 0
   local.get $5
   i32.load $0 offset=8
   i32.const 3
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0
   drop
   local.get $5
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|0142
    local.get $1
    local.get $2
    i32.gt_s
    if
     i32.const 1
     local.get $0
     local.get $2
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.tee $10
     local.get $10
     f64.ne
     br_if $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $while-continue|0142
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 1
  call $~lib/typedarray/Float32Array#constructor
  local.tee $5
  i32.store $0 offset=84
  i32.const 0
  local.set $2
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  f32.const nan:0x400000
  f32.store $0
  i32.const 0
  local.set $1
  i32.const -1
  local.set $0
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $4
   i32.eqz
   local.tee $3
   local.get $3
   i32.or
   br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   local.get $5
   i32.load $0 offset=4
   local.set $3
   loop $while-continue|0143
    local.get $1
    local.get $4
    i32.lt_s
    if
     local.get $3
     local.get $1
     local.tee $0
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.const nan:0x400000
     f32.eq
     br_if $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
     local.get $0
     i32.const 1
     i32.add
     local.set $1
     br $while-continue|0143
    end
   end
   i32.const -1
   local.set $0
  end
  local.get $0
  i32.const -1
  i32.ne
  if
   unreachable
  end
  block $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   i32.const 0
   local.get $5
   i32.load $0 offset=8
   i32.const 2
   i32.shr_u
   local.tee $1
   i32.eqz
   br_if $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0
   drop
   local.get $5
   i32.load $0 offset=4
   local.set $0
   loop $while-continue|09
    local.get $1
    local.get $2
    i32.gt_s
    if
     i32.const 1
     local.get $0
     local.get $2
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.tee $7
     local.get $7
     f32.ne
     br_if $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0
     drop
     local.get $2
     i32.const 1
     i32.add
     local.set $2
     br $while-continue|09
    end
   end
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  i32.store $0 offset=88
  i32.const 2
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $0
  i32.store $0 offset=92
  local.get $0
  i32.load $0 offset=8
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 2
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $0
  i32.store $0 offset=88
  i32.const 2
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 2
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $0
  i32.store $0 offset=92
  local.get $0
  i32.load $0 offset=8
  if
   unreachable
  end
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Int8Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|056
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend8_s
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $1
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|056
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $2
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.set $0
  local.get $1
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  local.get $1
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $1
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $0
  i32.store $0 offset=8
  local.get $1
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_s $0
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_s $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0 offset=4
  loop $for-loop|0144
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $1
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.add
    local.get $1
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0144
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $2
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0
  i32.sub
  local.tee $0
  local.get $2
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $0
  i32.store $0 offset=12
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|157
   local.get $0
   local.get $3
   i32.lt_s
   if
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $2
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|157
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|058
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 255
    i32.and
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.const 255
    local.get $1
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $1
    i32.or
    local.get $1
    i32.const 31
    i32.shr_u
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|058
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $2
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.set $0
  local.get $1
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  local.get $1
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $1
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $1
  local.get $0
  i32.store $0 offset=8
  local.get $1
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
  local.get $1
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|159
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $1
    i32.load $0 offset=8
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    local.get $1
    i32.load $0 offset=4
    local.get $0
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|159
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Int16Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|061
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.extend16_s
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|061
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $1
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $0
  i32.const 1
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0
  local.get $2
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $2
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $0
  i32.store $0 offset=8
  local.get $2
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|162
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.shl
    local.tee $1
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load16_s $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load16_s $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|162
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|065
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.const 65535
    i32.and
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    local.get $1
    i32.store16 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|065
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $1
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $0
  i32.const 1
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0
  local.get $2
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $2
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $0
  i32.store $0 offset=8
  local.get $2
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|166
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 1
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.shl
    local.tee $1
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load16_u $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load16_u $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|166
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|067
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|067
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $1
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $0
  i32.const 3
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0
  local.get $2
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $2
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $0
  i32.store $0 offset=8
  local.get $2
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|168
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    i32.const 2
    i32.shl
    local.tee $1
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|168
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|070
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $1
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $1
    i32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|070
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $1
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $0
  i32.const 3
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0
  local.get $2
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $2
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $0
  i32.store $0 offset=8
  local.get $2
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|171
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    i32.const 2
    i32.shl
    local.tee $1
    local.get $4
    i32.load $0 offset=4
    i32.add
    i32.load $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load $0
    i32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|171
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Int64Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|072
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $6
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|072
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $1
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $0
  i32.const 7
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0
  local.get $2
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $2
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $0
  i32.store $0 offset=8
  local.get $2
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|173
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    i32.const 3
    i32.shl
    local.tee $1
    local.get $4
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|173
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|074
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i64.load32_s $0
    local.set $6
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $6
    i64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|074
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $1
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $0
  i32.const 7
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0
  local.get $2
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $2
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $0
  i32.store $0 offset=8
  local.get $2
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|175
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    i32.const 3
    i32.shl
    local.tee $1
    local.get $4
    i32.load $0 offset=4
    i32.add
    i64.load $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i64.load $0
    i64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|175
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Float32Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|078
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f32.convert_i32_s
    local.set $7
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    local.get $7
    f32.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|078
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $1
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $0
  i32.const 3
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0
  local.get $2
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $2
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $0
  i32.store $0 offset=8
  local.get $2
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|179
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 2
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    i32.const 2
    i32.shl
    local.tee $1
    local.get $4
    i32.load $0 offset=4
    i32.add
    f32.load $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    f32.load $0
    f32.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|179
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 0
  local.set $0
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.const 20
  memory.fill $0
  local.get $1
  i32.const 7392
  i32.store $0
  local.get $1
  i32.const 7404
  i32.load $0
  local.tee $5
  call $~lib/typedarray/Float64Array#constructor
  local.tee $4
  i32.store $0 offset=4
  loop $for-loop|080
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    i32.const 7404
    i32.load $0
    i32.ge_u
    if
     unreachable
    end
    i32.const 7396
    i32.load $0
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    f64.convert_i32_s
    local.set $10
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $4
    i32.load $0 offset=4
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    local.get $10
    f64.store $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|080
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  local.get $4
  i32.load $0
  local.tee $0
  i32.store $0 offset=8
  local.get $1
  local.get $0
  local.get $4
  i32.load $0 offset=4
  local.get $4
  i32.load $0
  i32.sub
  local.tee $0
  local.get $4
  i32.load $0 offset=8
  local.get $0
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $3
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  local.set $1
  i32.const 1
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $3
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.tee $0
  i32.const 7
  i32.and
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0
  local.get $2
  local.get $3
  i32.store $0
  local.get $3
  if
   local.get $2
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $0
  i32.store $0 offset=8
  local.get $2
  local.get $3
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $0
  loop $for-loop|181
   local.get $0
   local.get $5
   i32.lt_s
   if
    local.get $0
    local.get $4
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    local.get $2
    i32.load $0 offset=8
    i32.const 3
    i32.shr_u
    i32.ge_u
    if
     unreachable
    end
    local.get $0
    i32.const 3
    i32.shl
    local.tee $1
    local.get $4
    i32.load $0 offset=4
    i32.add
    f64.load $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    f64.load $0
    f64.ne
    if
     unreachable
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|181
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Int8Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint8Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint8ClampedArray>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Int16Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint16Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Int32Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint32Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Int64Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint64Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Float32Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Float64Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 10
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $9
  i32.store $0 offset=96
  global.get $~lib/memory/__stack_pointer
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $0
  i32.store $0 offset=100
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const 400
  f32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const nan:0x400000
  f32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f32.const inf
  f32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Int64Array#constructor
  local.tee $8
  i32.store $0 offset=104
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const -10
  i64.store $0
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 100
  i64.store $0 offset=8
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 10
  i64.store $0 offset=16
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $8
  i32.load $0 offset=4
  i64.const 300
  i64.store $0 offset=24
  global.get $~lib/memory/__stack_pointer
  i32.const 2
  call $~lib/typedarray/Int32Array#constructor
  local.tee $5
  i32.store $0 offset=108
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 300
  i32.store $0
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const -1
  i32.store $0 offset=4
  local.get $9
  i32.load $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $3
  i32.const 1
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 1
  i32.add
  local.set $1
  local.get $0
  i32.load $0 offset=4
  local.set $0
  i32.const 0
  local.set $2
  loop $for-loop|092
   local.get $2
   local.get $3
   i32.lt_s
   if
    local.get $1
    local.get $2
    i32.add
    local.get $0
    local.get $2
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.tee $7
    f32.const 255
    f32.min
    f32.const 0
    f32.max
    i32.trunc_sat_f32_u
    i32.const 0
    local.get $7
    local.get $7
    f32.sub
    f32.const 0
    f32.eq
    select
    i32.store8 $0
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|092
   end
  end
  i32.const 0
  local.set $0
  local.get $9
  i32.load $0 offset=8
  local.get $8
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.tee $4
  i32.const 4
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 4
  i32.add
  local.set $3
  local.get $8
  i32.load $0 offset=4
  local.set $2
  loop $for-loop|083
   local.get $0
   local.get $4
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.add
    local.get $2
    local.get $0
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.tee $6
    i32.wrap_i64
    local.tee $1
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i64.extend_i32_s
    i32.const 255
    local.get $1
    i32.sub
    i32.const 31
    i32.shr_s
    i64.extend_i32_s
    local.get $6
    i64.or
    i64.and
    i64.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|083
   end
  end
  local.get $9
  i32.load $0 offset=8
  local.get $5
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  i32.const 8
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 8
  i32.add
  local.set $3
  local.get $5
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  loop $for-loop|01584
   local.get $0
   local.get $4
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.add
    i32.const 255
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $1
    i32.or
    local.get $1
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|01584
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 11200
  call $~lib/rt/__newArray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $9
  i32.load $0 offset=8
  local.tee $0
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|0145
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $9
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0145
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $0
  i32.store $0 offset=112
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 1
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 300
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const 100
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  i32.const -1
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  call $~lib/typedarray/Int16Array#constructor
  local.tee $5
  i32.store $0 offset=116
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 65526
  i32.store16 $0
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 100
  i32.store16 $0 offset=2
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 10
  i32.store16 $0 offset=4
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.const 3
  i32.le_u
  if
   unreachable
  end
  local.get $5
  i32.load $0 offset=4
  i32.const 300
  i32.store16 $0 offset=6
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.tee $4
  local.get $9
  i32.load $0 offset=8
  i32.gt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  local.set $3
  local.get $0
  i32.load $0 offset=4
  local.set $2
  i32.const 0
  local.set $0
  loop $for-loop|020146
   local.get $0
   local.get $4
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.add
    i32.const 255
    local.get $2
    local.get $0
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.tee $1
    local.get $1
    i32.const 255
    i32.gt_u
    select
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|020146
   end
  end
  i32.const 0
  local.set $0
  local.get $9
  i32.load $0 offset=8
  local.get $5
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.tee $4
  i32.const 5
  i32.add
  i32.lt_s
  if
   unreachable
  end
  local.get $9
  i32.load $0 offset=4
  i32.const 5
  i32.add
  local.set $3
  local.get $5
  i32.load $0 offset=4
  local.set $2
  loop $for-loop|085
   local.get $0
   local.get $4
   i32.lt_s
   if
    local.get $0
    local.get $3
    i32.add
    local.get $2
    local.get $0
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.tee $1
    i32.const 255
    local.get $1
    i32.sub
    i32.const 31
    i32.shr_s
    i32.or
    local.get $1
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.and
    i32.store8 $0
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|085
   end
  end
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 11232
  call $~lib/rt/__newArray
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=16
  i32.const 0
  local.set $1
  local.get $9
  i32.load $0 offset=8
  local.tee $0
  local.get $2
  i32.load $0 offset=12
  i32.ne
  if
   unreachable
  end
  loop $for-loop|0148
   local.get $0
   local.get $1
   i32.gt_s
   if
    local.get $9
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    local.get $2
    i32.load $0 offset=4
    local.get $1
    i32.add
    i32.load8_u $0
    i32.ne
    if
     unreachable
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0148
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 11264
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11264
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  local.get $1
  call $~lib/util/sort/SORT<i8>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11296
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 11296
  call $~lib/util/sort/SORT<i8>
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_s $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_s $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_s $0 offset=2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1149
   block $0of1150
    block $outOfRange151
     global.get $~argumentsLength
     br_table $0of1150 $1of1149 $outOfRange151
    end
    unreachable
   end
   i32.const 11328
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11328
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  local.get $1
  call $~lib/util/sort/SORT<u8>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11360
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 11360
  call $~lib/util/sort/SORT<u8>
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $2
  i32.store $0
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 1
  i32.store8 $0 offset=2
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 2
  i32.store8 $0 offset=1
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.const 3
  i32.store8 $0
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1152
   block $0of1153
    block $outOfRange154
     global.get $~argumentsLength
     br_table $0of1153 $1of1152 $outOfRange154
    end
    unreachable
   end
   i32.const 11392
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 11392
   i32.store $0
  end
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  local.get $1
  call $~lib/util/sort/SORT<u8>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 1
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 3
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11424
  i32.store $0 offset=8
  local.get $2
  i32.load $0 offset=4
  local.get $2
  i32.load $0 offset=8
  i32.const 11424
  call $~lib/util/sort/SORT<u8>
  local.get $2
  i32.load $0 offset=8
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0
  i32.const 3
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0 offset=1
  i32.const 2
  i32.ne
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=8
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $2
  i32.load $0 offset=4
  i32.load8_u $0 offset=2
  i32.const 1
  i32.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  call $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32>
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $0
  i64.const 0
  i64.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 1
  f64.store $0 offset=16
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 2
  f64.store $0 offset=8
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.const 3
  f64.store $0
  i32.const 0
  global.set $~argumentsLength
  global.get $~lib/memory/__stack_pointer
  local.get $0
  call $~lib/typedarray/Float64Array#sort@varargs
  local.tee $0
  i32.store $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0
  f64.const 1
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 2
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 3
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 11904
  i32.store $0 offset=8
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 11904
  call $~lib/util/sort/SORT<f64>
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0
  f64.const 3
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 1
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0 offset=8
  f64.const 2
  f64.ne
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.const 2
  i32.le_u
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=4
  f64.load $0 offset=16
  f64.const 1
  f64.ne
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
  i32.const 45316
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/rt/itcms/state
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|023
    global.get $~lib/rt/itcms/state
    if
     call $~lib/rt/itcms/step
     drop
     br $while-continue|023
    end
   end
  end
  call $~lib/rt/itcms/step
  drop
  loop $while-continue|1
   global.get $~lib/rt/itcms/state
   if
    call $~lib/rt/itcms/step
    drop
    br $while-continue|1
   end
  end
  global.get $~lib/rt/itcms/total
  i64.extend_i32_u
  i64.const 200
  i64.mul
  i64.const 100
  i64.div_u
  i32.wrap_i64
  i32.const 1024
  i32.add
  global.set $~lib/rt/itcms/threshold
  global.get $~lib/memory/__stack_pointer
  i32.const 120
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/arraybuffer/ArrayBufferView#constructor (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $0
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 2
   call $~lib/rt/itcms/__new
   local.tee $0
   i32.store $0
  end
  local.get $0
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 0
  i32.store $0 offset=4
  local.get $0
  i32.const 0
  i32.store $0 offset=8
  local.get $1
  i32.const 1073741820
  local.get $2
  i32.shr_u
  i32.gt_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $2
  i32.shl
  local.tee $1
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $2
  i32.store $0 offset=4
  local.get $0
  local.get $2
  i32.store $0
  local.get $2
  if
   local.get $0
   local.get $2
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $0
  local.get $2
  i32.store $0 offset=4
  local.get $0
  local.get $1
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int8Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint8Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint8ClampedArray#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int16Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint16Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int32Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint32Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int64Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Uint64Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Float32Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Float64Array#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $1
  i32.const 0
  i32.store $0
  local.get $1
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $1
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $1
  local.get $0
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/typedarray/Int32Array#subarray (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  local.get $4
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $0
  i32.load $0
  local.tee $4
  i32.store $0
  local.get $4
  if
   local.get $5
   local.get $4
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.load $0 offset=4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.tee $0
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $5
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $5
 )
 (func $~lib/typedarray/Float64Array#subarray (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $3
  local.get $4
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $0
  i32.load $0
  local.tee $4
  i32.store $0
  local.get $4
  if
   local.get $5
   local.get $4
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $0
  i32.load $0 offset=4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.tee $0
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $5
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $5
 )
 (func $~lib/typedarray/Float64Array#sort@varargs (type $i32_=>_i32) (param $0 i32) (result i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 1296
   local.set $1
   global.get $~lib/memory/__stack_pointer
   i32.const 1296
   i32.store $0
  end
  local.get $0
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.get $1
  call $~lib/util/sort/SORT<f64>
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/rt/__newArray (type $i32_i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (result i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $0
  local.get $1
  i32.shl
  local.tee $5
  i32.const 0
  call $~lib/rt/itcms/__new
  local.set $1
  local.get $3
  if
   local.get $1
   local.get $3
   local.get $5
   memory.copy $0 $0
  end
  local.get $4
  local.get $1
  i32.store $0
  i32.const 16
  local.get $2
  call $~lib/rt/itcms/__new
  local.tee $2
  local.get $1
  i32.store $0
  local.get $1
  if
   local.get $2
   local.get $1
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $2
  local.get $1
  i32.store $0 offset=4
  local.get $2
  local.get $5
  i32.store $0 offset=8
  local.get $2
  local.get $0
  i32.store $0 offset=12
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int8Array#subarray (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $4
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $3
  local.get $4
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $5
  i32.store $0
  local.get $5
  local.get $0
  i32.load $0
  local.tee $4
  i32.store $0
  local.get $4
  if
   local.get $5
   local.get $4
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $5
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  i32.load $0 offset=4
  i32.add
  i32.store $0 offset=4
  local.get $5
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $0
   i32.const 0
   local.get $0
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.tee $0
  local.get $1
  local.get $0
  local.get $1
  i32.gt_s
  select
  local.get $1
  i32.sub
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $5
 )
 (func $~lib/typedarray/Int32Array#slice (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $3
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $2
   i32.const 0
   local.get $2
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.get $1
  i32.sub
  local.tee $2
  i32.const 0
  local.get $2
  i32.const 0
  i32.gt_s
  select
  local.tee $2
  call $~lib/typedarray/Int32Array#constructor
  local.tee $3
  i32.store $0
  local.get $3
  i32.load $0 offset=4
  local.get $0
  i32.load $0 offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  local.get $2
  i32.const 2
  i32.shl
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
 )
 (func $~lib/typedarray/Uint8Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $2
  local.get $3
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_s
  select
  local.tee $0
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Uint8ClampedArray#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  local.set $2
  local.get $3
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_s
  select
  local.tee $0
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Int16Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 1
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 1
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Uint16Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 1
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 1
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Uint32Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Int64Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Uint64Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Float32Array#subarray (type $i32_i32_=>_i32) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.tee $3
  i32.const 0
  i32.store $0
  local.get $0
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $4
  i32.store $0
  local.get $4
  local.get $0
  i32.load $0
  local.tee $3
  i32.store $0
  local.get $3
  if
   local.get $4
   local.get $3
   call $byn-split-outlined-A$~lib/rt/itcms/__link
  end
  local.get $4
  local.get $0
  i32.load $0 offset=4
  i32.const 4
  local.get $2
  local.get $2
  i32.const 4
  i32.gt_u
  select
  local.tee $0
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $4
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $2
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $2
   local.get $1
   local.get $2
   i32.lt_s
   select
  end
  local.tee $1
  local.get $0
  local.get $0
  local.get $1
  i32.lt_s
  select
  local.get $0
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/arraybuffer/ArrayBuffer#constructor (type $i32_=>_i32) (param $0 i32) (result i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 1073741820
  i32.gt_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $0
 )
 (func $~lib/arraybuffer/ArrayBuffer#slice (type $i32_i32_i32_=>_i32) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  global.get $~lib/memory/__stack_pointer
  i32.const 12548
  i32.lt_s
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $0
  i32.const 20
  i32.sub
  i32.load $0 offset=16
  local.set $3
  local.get $1
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $1
   local.get $3
   i32.add
   local.tee $1
   i32.const 0
   local.get $1
   i32.const 0
   i32.gt_s
   select
  else
   local.get $1
   local.get $3
   local.get $1
   local.get $3
   i32.lt_s
   select
  end
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $2
   local.get $3
   i32.add
   local.tee $2
   i32.const 0
   local.get $2
   i32.const 0
   i32.gt_s
   select
  else
   local.get $2
   local.get $3
   local.get $2
   local.get $3
   i32.lt_s
   select
  end
  local.get $1
  i32.sub
  local.tee $2
  i32.const 0
  local.get $2
  i32.const 0
  i32.gt_s
  select
  local.tee $2
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $3
  i32.store $0
  local.get $3
  local.get $0
  local.get $1
  i32.add
  local.get $2
  memory.copy $0 $0
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
 )
 (func $byn-split-outlined-A$~lib/rt/itcms/__visit (type $i32_=>_none) (param $0 i32)
  global.get $~lib/rt/itcms/white
  local.get $0
  i32.const 20
  i32.sub
  local.tee $0
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.eq
  if
   local.get $0
   call $~lib/rt/itcms/Object#makeGray
   global.get $~lib/rt/itcms/visitCount
   i32.const 1
   i32.add
   global.set $~lib/rt/itcms/visitCount
  end
 )
 (func $byn-split-outlined-A$~lib/rt/itcms/__link (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/rt/itcms/white
  local.get $1
  i32.const 20
  i32.sub
  local.tee $1
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.eq
  if
   local.get $0
   i32.const 20
   i32.sub
   i32.load $0 offset=4
   i32.const 3
   i32.and
   local.tee $0
   global.get $~lib/rt/itcms/white
   i32.eqz
   i32.eq
   if
    local.get $1
    call $~lib/rt/itcms/Object#makeGray
   else
    global.get $~lib/rt/itcms/state
    i32.const 1
    i32.eq
    local.get $0
    i32.const 3
    i32.eq
    i32.and
    if
     local.get $1
     call $~lib/rt/itcms/Object#makeGray
    end
   end
  end
 )
)
