(module
 (type $i32_i32_=>_i32 (func_subtype (param i32 i32) (result i32) func))
 (type $i32_i32_=>_none (func_subtype (param i32 i32) func))
 (type $i32_i32_i32_=>_i32 (func_subtype (param i32 i32 i32) (result i32) func))
 (type $none_=>_none (func_subtype func))
 (type $i32_i32_i32_=>_none (func_subtype (param i32 i32 i32) func))
 (type $i32_=>_i32 (func_subtype (param i32) (result i32) func))
 (type $i32_i32_i32_i32_=>_i32 (func_subtype (param i32 i32 i32 i32) (result i32) func))
 (type $i64_i32_i32_=>_i32 (func_subtype (param i64 i32 i32) (result i32) func))
 (type $i64_i64_=>_i32 (func_subtype (param i64 i64) (result i32) func))
 (type $f32_i32_i32_=>_i32 (func_subtype (param f32 i32 i32) (result i32) func))
 (type $f64_i32_i32_=>_i32 (func_subtype (param f64 i32 i32) (result i32) func))
 (type $i32_i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32 i32) func))
 (type $f64_f64_=>_i32 (func_subtype (param f64 f64) (result i32) func))
 (type $f32_f32_=>_i32 (func_subtype (param f32 f32) (result i32) func))
 (type $i32_i32_i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32 i32 i32) func))
 (type $i32_=>_none (func_subtype (param i32) func))
 (type $i64_i64_i32_i32_=>_i64 (func_subtype (param i64 i64 i32 i32) (result i64) func))
 (type $i32_i32_=>_i64 (func_subtype (param i32 i32) (result i64) func))
 (type $i32_i64_i32_=>_i32 (func_subtype (param i32 i64 i32) (result i32) func))
 (type $i32_i32_=>_f64 (func_subtype (param i32 i32) (result f64) func))
 (type $i32_i32_i64_=>_i64 (func_subtype (param i32 i32 i64) (result i64) func))
 (type $f32_f32_i32_i32_=>_f32 (func_subtype (param f32 f32 i32 i32) (result f32) func))
 (type $f64_f64_i32_i32_=>_f64 (func_subtype (param f64 f64 i32 i32) (result f64) func))
 (type $i32_i32_=>_f32 (func_subtype (param i32 i32) (result f32) func))
 (type $i64_i32_i32_=>_i64 (func_subtype (param i64 i32 i32) (result i64) func))
 (type $i64_i32_i32_=>_none (func_subtype (param i64 i32 i32) func))
 (type $i32_f32_i32_=>_i32 (func_subtype (param i32 f32 i32) (result i32) func))
 (type $i32_f64_i32_=>_i32 (func_subtype (param i32 f64 i32) (result i32) func))
 (type $i32_i32_i64_=>_none (func_subtype (param i32 i32 i64) func))
 (type $i32_i32_f32_=>_f32 (func_subtype (param i32 i32 f32) (result f32) func))
 (type $i32_i32_f64_=>_f64 (func_subtype (param i32 i32 f64) (result f64) func))
 (type $f32_i32_i32_=>_f32 (func_subtype (param f32 i32 i32) (result f32) func))
 (type $f64_i32_i32_=>_f64 (func_subtype (param f64 i32 i32) (result f64) func))
 (type $f32_i32_i32_=>_none (func_subtype (param f32 i32 i32) func))
 (type $f64_i32_i32_=>_none (func_subtype (param f64 i32 i32) func))
 (type $i32_i32_i32_i32_=>_none (func_subtype (param i32 i32 i32 i32) func))
 (type $none_=>_i32 (func_subtype (result i32) func))
 (type $i32_i32_f64_=>_none (func_subtype (param i32 i32 f64) func))
 (type $i32_i32_i32_i32_i32_=>_i32 (func_subtype (param i32 i32 i32 i32 i32) (result i32) func))
 (type $i32_i32_f32_=>_none (func_subtype (param i32 i32 f32) func))
 (type $f32_f32_=>_f32 (func_subtype (param f32 f32) (result f32) func))
 (type $f64_f64_=>_f64 (func_subtype (param f64 f64) (result f64) func))
 (import "env" "abort" (func $~lib/builtins/abort (param i32 i32 i32 i32)))
 (import "env" "_g" (func $~lib/builtins/_g (param i32 i32) (result i32)))
 (global $~lib/typedarray/Int8Array.BYTES_PER_ELEMENT i32 (i32.const 1))
 (global $~lib/typedarray/Uint8Array.BYTES_PER_ELEMENT i32 (i32.const 1))
 (global $~lib/typedarray/Uint8ClampedArray.BYTES_PER_ELEMENT i32 (i32.const 1))
 (global $~lib/typedarray/Int16Array.BYTES_PER_ELEMENT i32 (i32.const 2))
 (global $~lib/typedarray/Uint16Array.BYTES_PER_ELEMENT i32 (i32.const 2))
 (global $~lib/typedarray/Int32Array.BYTES_PER_ELEMENT i32 (i32.const 4))
 (global $~lib/typedarray/Uint32Array.BYTES_PER_ELEMENT i32 (i32.const 4))
 (global $~lib/typedarray/Int64Array.BYTES_PER_ELEMENT i32 (i32.const 8))
 (global $~lib/typedarray/Uint64Array.BYTES_PER_ELEMENT i32 (i32.const 8))
 (global $~lib/typedarray/Float32Array.BYTES_PER_ELEMENT i32 (i32.const 4))
 (global $~lib/typedarray/Float64Array.BYTES_PER_ELEMENT i32 (i32.const 8))
 (global $~lib/shared/runtime/Runtime.Stub i32 (i32.const 0))
 (global $~lib/shared/runtime/Runtime.Minimal i32 (i32.const 1))
 (global $~lib/shared/runtime/Runtime.Incremental i32 (i32.const 2))
 (global $~lib/rt/itcms/total (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/threshold (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/state (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/visitCount (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/pinSpace (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/iter (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/toSpace (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/white (mut i32) (i32.const 0))
 (global $~lib/rt/itcms/fromSpace (mut i32) (i32.const 0))
 (global $~lib/rt/tlsf/ROOT (mut i32) (i32.const 0))
 (global $~lib/native/ASC_LOW_MEMORY_LIMIT i32 (i32.const 0))
 (global $~lib/native/ASC_RUNTIME i32 (i32.const 2))
 (global $~lib/native/ASC_SHRINK_LEVEL i32 (i32.const 0))
 (global $~argumentsLength (mut i32) (i32.const 0))
 (global $~lib/builtins/u32.MAX_VALUE i32 (i32.const -1))
 (global $~lib/builtins/i32.MAX_VALUE i32 (i32.const 2147483647))
 (global $std/typedarray/forEachCallCount (mut i32) (i32.const 0))
 (global $std/typedarray/forEachSelf (mut i32) (i32.const 0))
 (global $std/typedarray/forEachValues i32 (i32.const 5680))
 (global $std/typedarray/testArrayReverseValues i32 (i32.const 6144))
 (global $std/typedarray/testArrayIndexOfAndLastIndexOfValues i32 (i32.const 6256))
 (global $std/typedarray/testArrayWrapValues i32 (i32.const 6368))
 (global $std/typedarray/setSource1 (mut i32) (i32.const 6448))
 (global $std/typedarray/setSource2 (mut i32) (i32.const 6528))
 (global $std/typedarray/setSource3 (mut i32) (i32.const 6624))
 (global $std/typedarray/setSource7 (mut i32) (i32.const 6704))
 (global $~lib/rt/__rtti_base i32 (i32.const 10896))
 (global $~lib/memory/__data_end i32 (i32.const 11524))
 (global $~lib/memory/__stack_pointer (mut i32) (i32.const 44292))
 (global $~lib/memory/__heap_base i32 (i32.const 44292))
 (memory $0 1)
 (data (i32.const 12) ",\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\0e\00\00\00Invalid length\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 60) ",\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\14\00\00\00Allocation too large\00\00\00\00\00\00\00\00")
 (data (i32.const 112) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 144) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 172) ",\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\12\00\00\00Index out of range\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 224) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 252) "\1c\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\08\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 284) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\01\01\01\04\05\00\00\00\00\00\00\00")
 (data (i32.const 316) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 348) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\01\01\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 380) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\01\01\00\02\02\00\00\00\00\00\00\00")
 (data (i32.const 412) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\01\01\00\02\02\00\00\00\00\00\00\00")
 (data (i32.const 444) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 476) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\01\00\00\00\02\00\00\00\00\00\00\00")
 (data (i32.const 508) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 556) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 604) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 652) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 700) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 748) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 780) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 828) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\04\00\00\00\05\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 876) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\04\00\00\00\05\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 924) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 972) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1020) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\04\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1068) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\04\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1116) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1164) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\04\00\00\00\05\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1212) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\04\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1260) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\03\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1308) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\04\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1356) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1404) "\1c\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\08\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1436) "\1c\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\08\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1468) "\1c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\08\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1500) "\1c\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\08\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1532) "\1c\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\08\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1564) "\1c\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\08\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1596) "\1c\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\08\00\00\00\08\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1628) "\1c\00\00\00\00\00\00\00\00\00\00\00\18\00\00\00\08\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1660) "\1c\00\00\00\00\00\00\00\00\00\00\00\19\00\00\00\08\00\00\00\n\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1692) "\1c\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\08\00\00\00\0b\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1724) "\1c\00\00\00\00\00\00\00\00\00\00\00\1b\00\00\00\08\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1756) "\1c\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\08\00\00\00\r\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1788) "\1c\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\08\00\00\00\0e\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1820) "\1c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\08\00\00\00\0f\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1852) "\1c\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\08\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1884) "\1c\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\08\00\00\00\11\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1916) "\1c\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\08\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1948) "\1c\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\08\00\00\00\13\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 1980) "\1c\00\00\00\00\00\00\00\00\00\00\00\18\00\00\00\08\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2012) "\1c\00\00\00\00\00\00\00\00\00\00\00\19\00\00\00\08\00\00\00\15\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2044) "\1c\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\08\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2076) "\1c\00\00\00\00\00\00\00\00\00\00\00\1b\00\00\00\08\00\00\00\17\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2108) "\1c\00\00\00\00\00\00\00\00\00\00\00\1c\00\00\00\08\00\00\00\18\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2140) "\1c\00\00\00\00\00\00\00\00\00\00\00\1d\00\00\00\08\00\00\00\19\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2172) "\1c\00\00\00\00\00\00\00\00\00\00\00\1e\00\00\00\08\00\00\00\1a\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2204) "\1c\00\00\00\00\00\00\00\00\00\00\00\1f\00\00\00\08\00\00\00\1b\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2236) "\1c\00\00\00\00\00\00\00\00\00\00\00 \00\00\00\08\00\00\00\1c\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2268) "\1c\00\00\00\00\00\00\00\00\00\00\00!\00\00\00\08\00\00\00\1d\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2300) "\1c\00\00\00\00\00\00\00\00\00\00\00\"\00\00\00\08\00\00\00\1e\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2332) "\1c\00\00\00\00\00\00\00\00\00\00\00#\00\00\00\08\00\00\00\1f\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2364) "\1c\00\00\00\00\00\00\00\00\00\00\00$\00\00\00\08\00\00\00 \00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2396) "\1c\00\00\00\00\00\00\00\00\00\00\00%\00\00\00\08\00\00\00!\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2428) "\1c\00\00\00\00\00\00\00\00\00\00\00&\00\00\00\08\00\00\00\"\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2460) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00#\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2492) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\00$\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2524) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\00%\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2556) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\00&\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2588) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\00\'\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2620) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\00(\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2652) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00)\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2684) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00*\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2716) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00+\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2748) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00,\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2780) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00-\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2812) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00.\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2844) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00/\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2876) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\000\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2908) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\001\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2940) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\002\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 2972) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\003\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3004) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\004\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3036) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\005\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3068) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\006\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3100) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\007\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3132) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\008\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3164) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\009\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3196) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00:\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3228) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00;\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3260) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00<\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3292) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00=\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3324) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00>\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3356) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00?\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3388) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00@\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3420) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00A\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3452) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00B\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3484) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00C\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3516) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00D\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3548) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00E\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3580) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\00F\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3612) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\00G\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3644) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\00H\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3676) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\00I\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3708) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\00J\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3740) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\00K\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3772) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\00L\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3804) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\00M\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3836) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\00N\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3868) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\00O\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3900) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00P\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3932) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00Q\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3964) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00R\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 3996) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00S\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4028) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00T\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4060) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00U\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4092) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00V\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4124) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00W\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4156) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00X\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4188) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00Y\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4220) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00Z\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4252) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00[\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4284) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\00\\\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4316) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\00]\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4348) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\00^\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4380) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\00_\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4412) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\00`\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4444) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\00a\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4476) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\00b\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4508) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\00c\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4540) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\00d\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4572) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\00e\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4604) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00f\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4636) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00g\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4668) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00h\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4700) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00i\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4732) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00j\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4764) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00k\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4796) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00l\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4828) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00m\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4860) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00n\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4892) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00o\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4924) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00p\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4956) "\1c\00\00\00\00\00\00\00\00\00\00\00\'\00\00\00\08\00\00\00q\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 4988) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\00r\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5020) "\1c\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\08\00\00\00s\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5052) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\00t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5084) "\1c\00\00\00\00\00\00\00\00\00\00\00)\00\00\00\08\00\00\00u\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5116) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\00v\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5148) "\1c\00\00\00\00\00\00\00\00\00\00\00*\00\00\00\08\00\00\00w\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5180) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\00x\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5212) "\1c\00\00\00\00\00\00\00\00\00\00\00+\00\00\00\08\00\00\00y\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5244) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\00z\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5276) "\1c\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\08\00\00\00{\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5308) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00|\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5340) "\1c\00\00\00\00\00\00\00\00\00\00\00-\00\00\00\08\00\00\00}\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5372) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00~\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5404) "\1c\00\00\00\00\00\00\00\00\00\00\00.\00\00\00\08\00\00\00\7f\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5436) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00\80\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5468) "\1c\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\08\00\00\00\81\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5500) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00\82\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5532) "\1c\00\00\00\00\00\00\00\00\00\00\000\00\00\00\08\00\00\00\83\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5564) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00\84\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5596) "\1c\00\00\00\00\00\00\00\00\00\00\001\00\00\00\08\00\00\00\85\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5628) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\n\00\00\00\0c\00\00\00\0e\00\00\00")
 (data (i32.const 5660) ",\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\10\00\00\00\10\16\00\00\10\16\00\00\0c\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5708) "\1c\00\00\00\00\00\00\00\00\00\00\002\00\00\00\08\00\00\00\86\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5740) "\1c\00\00\00\00\00\00\00\00\00\00\003\00\00\00\08\00\00\00\87\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5772) "\1c\00\00\00\00\00\00\00\00\00\00\004\00\00\00\08\00\00\00\88\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5804) "\1c\00\00\00\00\00\00\00\00\00\00\005\00\00\00\08\00\00\00\89\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5836) "\1c\00\00\00\00\00\00\00\00\00\00\006\00\00\00\08\00\00\00\8a\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5868) "\1c\00\00\00\00\00\00\00\00\00\00\007\00\00\00\08\00\00\00\8b\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5900) "\1c\00\00\00\00\00\00\00\00\00\00\008\00\00\00\08\00\00\00\8c\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5932) "\1c\00\00\00\00\00\00\00\00\00\00\009\00\00\00\08\00\00\00\8d\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5964) "\1c\00\00\00\00\00\00\00\00\00\00\00:\00\00\00\08\00\00\00\8e\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 5996) "\1c\00\00\00\00\00\00\00\00\00\00\00;\00\00\00\08\00\00\00\8f\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6028) "\1c\00\00\00\00\00\00\00\00\00\00\00<\00\00\00\08\00\00\00\90\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6060) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00$\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6124) ",\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\10\00\00\00\c0\17\00\00\c0\17\00\00$\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6172) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\n\00\00\00")
 (data (i32.const 6236) ",\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\10\00\00\000\18\00\000\18\00\00,\00\00\00\0b\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6284) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00,\00\00\00\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\n\00\00\00")
 (data (i32.const 6348) ",\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\10\00\00\00\a0\18\00\00\a0\18\00\00,\00\00\00\0b\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6396) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00")
 (data (i32.const 6428) ",\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\10\00\00\00\10\19\00\00\10\19\00\00\0c\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6476) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\80@\00\00\a0@\00\00\c0@")
 (data (i32.const 6508) ",\00\00\00\00\00\00\00\00\00\00\00=\00\00\00\10\00\00\00`\19\00\00`\19\00\00\0c\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6556) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\18\00\00\00\00\00\00\00\00\00\f0\7f\00\00\00\00\00\00\f8\7f\00\00\00\00\00\00\f0\ff\00\00\00\00")
 (data (i32.const 6604) ",\00\00\00\00\00\00\00\00\00\00\00>\00\00\00\10\00\00\00\b0\19\00\00\b0\19\00\00\18\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6652) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\92\91\90\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6684) ",\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\10\00\00\00\10\1a\00\00\10\1a\00\00\03\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6732) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6764) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\04\05\06\00\00\00\00\00\00")
 (data (i32.const 6796) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\04\05\06\07\08\t\00\00\00")
 (data (i32.const 6828) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\00\00\00\06\07\08\t\00\00\00")
 (data (i32.const 6860) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00defg\e8\e9\ea\92\91\90\00\00")
 (data (i32.const 6892) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\00\00\00\00\00\00\00\00\00")
 (data (i32.const 6924) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\04\05\06\00\00\00\00\00\00")
 (data (i32.const 6956) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\04\05\06\07\08\t\00\00\00")
 (data (i32.const 6988) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\00\00\00\06\07\08\t\00\00\00")
 (data (i32.const 7020) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00defg\e8\e9\ea\92\91\90\00\00")
 (data (i32.const 7052) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7084) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\04\05\06\00\00\00\00\00\00")
 (data (i32.const 7116) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\03\04\05\06\07\08\t\00\00\00")
 (data (i32.const 7148) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\02\00\00\00\06\07\08\t\00\00\00")
 (data (i32.const 7180) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00defg\ff\ff\ff\00\00\00\00\00")
 (data (i32.const 7212) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\02\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7260) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7308) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06\00\07\00\08\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7356) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\02\00\00\00\00\00\00\00\06\00\07\00\08\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7404) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00d\00e\00f\00g\00\e8\03\e9\03\ea\03\92\ff\91\ff\90\ff\00\00\00\00\00\00\00\00")
 (data (i32.const 7452) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\02\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7500) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7548) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\02\00\03\00\04\00\05\00\06\00\07\00\08\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7596) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\01\00\02\00\00\00\00\00\00\00\06\00\07\00\08\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7644) ",\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00d\00e\00f\00g\00\e8\03\e9\03\ea\03\92\ff\91\ff\90\ff\00\00\00\00\00\00\00\00")
 (data (i32.const 7692) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7756) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7820) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7884) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\01\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 7948) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00d\00\00\00e\00\00\00f\00\00\00g\00\00\00\e8\03\00\00\e9\03\00\00\ea\03\00\00\92\ff\ff\ff\91\ff\ff\ff\90\ff\ff\ff\00\00\00\00")
 (data (i32.const 8012) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8076) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8140) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8204) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\01\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8268) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00d\00\00\00e\00\00\00f\00\00\00g\00\00\00\e8\03\00\00\e9\03\00\00\ea\03\00\00\92\ff\ff\ff\91\ff\ff\ff\90\ff\ff\ff\00\00\00\00")
 (data (i32.const 8332) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8444) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8556) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8668) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8780) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00d\00\00\00\00\00\00\00e\00\00\00\00\00\00\00f\00\00\00\00\00\00\00g\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\e9\03\00\00\00\00\00\00\ea\03\00\00\00\00\00\00\92\ff\ff\ff\ff\ff\ff\ff\91\ff\ff\ff\ff\ff\ff\ff\90\ff\ff\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 8892) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9004) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9116) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9228) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9340) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00d\00\00\00\00\00\00\00e\00\00\00\00\00\00\00f\00\00\00\00\00\00\00g\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\e9\03\00\00\00\00\00\00\ea\03\00\00\00\00\00\00\92\ff\ff\ff\ff\ff\ff\ff\91\ff\ff\ff\ff\ff\ff\ff\90\ff\ff\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9452) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\00\00\80?\00\00\00@\00\00@@\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9516) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\00\00\80?\00\00\00@\00\00@@\00\00\80@\00\00\a0@\00\00\c0@\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9580) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\00\00\80?\00\00\00@\00\00@@\00\00\80@\00\00\a0@\00\00\c0@\00\00\e0@\00\00\00A\00\00\10A\00\00\00\00\00\00\00\00")
 (data (i32.const 9644) "<\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\00\00\c8B\00\00\caB\00\00\ccB\00\00\ceB\00\00zD\00@zD\00\80zD\00\00\dc\c2\00\00\de\c2\00\00\e0\c2\00\00\00\00")
 (data (i32.const 9708) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\00\00\00\00\00\00\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9820) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\00\00\00\00\00\00\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\00\00\10@\00\00\00\00\00\00\14@\00\00\00\00\00\00\18@\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 9932) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\00\00\00\00\00\00\f0?\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\00\00\10@\00\00\00\00\00\00\14@\00\00\00\00\00\00\18@\00\00\00\00\00\00\1c@\00\00\00\00\00\00 @\00\00\00\00\00\00\"@\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10044) "l\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00P\00\00\00\00\00\00\00\00\00Y@\00\00\00\00\00@Y@\00\00\00\00\00\80Y@\00\00\00\00\00\c0Y@\00\00\00\00\00@\8f@\00\00\00\00\00H\8f@\00\00\00\00\00P\8f@\00\00\00\00\00\80[\c0\00\00\00\00\00\c0[\c0\00\00\00\00\00\00\\\c0\00\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10156) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\00\ff\00\00\00d\n\ff\ff\00\00\00")
 (data (i32.const 10188) "\1c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\01\ffd\ff\00\00d\n\ff\00\00\00")
 (data (i32.const 10220) "\1c\00\00\00\00\00\00\00\00\00\00\00E\00\00\00\08\00\00\00\91\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10252) "\1c\00\00\00\00\00\00\00\00\00\00\00E\00\00\00\08\00\00\00\92\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10284) "\1c\00\00\00\00\00\00\00\00\00\00\00F\00\00\00\08\00\00\00\93\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10316) "\1c\00\00\00\00\00\00\00\00\00\00\00F\00\00\00\08\00\00\00\94\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10348) "\1c\00\00\00\00\00\00\00\00\00\00\00F\00\00\00\08\00\00\00\95\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10380) "\1c\00\00\00\00\00\00\00\00\00\00\00F\00\00\00\08\00\00\00\96\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10412) "\1c\00\00\00\00\00\00\00\00\00\00\00G\00\00\00\08\00\00\00\97\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10444) "\1c\00\00\00\00\00\00\00\00\00\00\00G\00\00\00\08\00\00\00\98\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10476) "\1c\00\00\00\00\00\00\00\00\00\00\00H\00\00\00\08\00\00\00\99\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10508) "\1c\00\00\00\00\00\00\00\00\00\00\00H\00\00\00\08\00\00\00\9a\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10540) "\1c\00\00\00\00\00\00\00\00\00\00\00I\00\00\00\08\00\00\00\9b\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10572) "\1c\00\00\00\00\00\00\00\00\00\00\00I\00\00\00\08\00\00\00\9c\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10604) "\1c\00\00\00\00\00\00\00\00\00\00\00J\00\00\00\08\00\00\00\9d\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10636) "\1c\00\00\00\00\00\00\00\00\00\00\00J\00\00\00\08\00\00\00\9e\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10668) "\1c\00\00\00\00\00\00\00\00\00\00\00K\00\00\00\08\00\00\00\9f\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10700) "\1c\00\00\00\00\00\00\00\00\00\00\00K\00\00\00\08\00\00\00\a0\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10732) "\1c\00\00\00\00\00\00\00\00\00\00\00L\00\00\00\08\00\00\00\a1\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10764) "\1c\00\00\00\00\00\00\00\00\00\00\00L\00\00\00\08\00\00\00\a2\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10796) "\1c\00\00\00\00\00\00\00\00\00\00\00M\00\00\00\08\00\00\00\a3\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10828) "\1c\00\00\00\00\00\00\00\00\00\00\00M\00\00\00\08\00\00\00\a4\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10860) "\1c\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\08\00\00\00\a5\00\00\00\00\00\00\00\00\00\00\00")
 (data (i32.const 10896) "N\00\00\00 \00\00\00\00\00\00\00 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\00A\08\00\00\02\00\00\00A\00\00\00\02\00\00\00A\00\00\00\02\00\00\00\81\08\00\00\02\00\00\00\81\00\00\00\02\00\00\00\01\t\00\00\02\00\00\00\01\01\00\00\02\00\00\00\01\n\00\00\02\00\00\00\01\02\00\00\02\00\00\00\01\19\00\00\02\00\00\00\01\1a\00\00\02\00\00\00\00\00\00\00\00\00\00\00B\08\00\00\00\00\00\00\02\ta\00\00\00\00\00\00B\00\00\00\00\00\00\00\82\08\00\00\00\00\00\00\82\00\00\00\00\00\00\00\02\01\00\00\00\00\00\00\02\n\00\00\00\00\00\00\02\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (table $0 166 166 funcref)
 (elem $0 (i32.const 1) $~lib/util/sort/COMPARATOR<f64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testReduceRight<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayMap<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Uint8Array,u8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Uint16Array,u16>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Uint32Array,u32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Uint64Array,u64>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8Array,u8>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint16Array,u16>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint32Array,u32>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint64Array,u64>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8Array,u8>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint16Array,u16>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint32Array,u32>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint64Array,u64>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint16Array,u16>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int32Array,i32>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint32Array,u32>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Uint64Array,u64>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>~anonymous|1 $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>~anonymous|0 $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>~anonymous|1 $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Uint8Array,u8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Uint16Array,u16>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Uint32Array,u32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Uint64Array,u64>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArrayForEach<~lib/typedarray/Float64Array,f64>~anonymous|0 $~lib/util/sort/COMPARATOR<i8>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int8Array,i8>~anonymous|0 $~lib/util/sort/COMPARATOR<u8>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>~anonymous|0 $~lib/util/sort/COMPARATOR<u8>~anonymous|1 $std/typedarray/testArraySort<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 $~lib/util/sort/COMPARATOR<i16>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16>~anonymous|0 $~lib/util/sort/COMPARATOR<u16>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16>~anonymous|0 $~lib/util/sort/COMPARATOR<i32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32>~anonymous|0 $~lib/util/sort/COMPARATOR<u32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32>~anonymous|0 $~lib/util/sort/COMPARATOR<i64>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64>~anonymous|0 $~lib/util/sort/COMPARATOR<u64>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64>~anonymous|0 $~lib/util/sort/COMPARATOR<f32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32>~anonymous|0 $std/typedarray/testArraySort<~lib/typedarray/Float64Array,f64>~anonymous|0)
 (export "_g" (func $~lib/builtins/_g))
 (export "memory" (memory $0))
 (start $~start)
 (func $~lib/rt/itcms/Object#set:nextWithColor (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0 offset=4
 )
 (func $~lib/rt/itcms/Object#set:prev (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0 offset=8
 )
 (func $~lib/rt/itcms/initLazy (type $i32_=>_i32) (param $space i32) (result i32)
  local.get $space
  local.get $space
  call $~lib/rt/itcms/Object#set:nextWithColor
  local.get $space
  local.get $space
  call $~lib/rt/itcms/Object#set:prev
  local.get $space
 )
 (func $~lib/rt/itcms/Object#get:next (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
 )
 (func $~lib/rt/itcms/Object#get:color (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  i32.const 3
  i32.and
 )
 (func $~lib/rt/itcms/visitRoots (type $i32_=>_none) (param $cookie i32)
  (local $pn i32)
  (local $iter i32)
  (local $3 i32)
  local.get $cookie
  call $~lib/rt/__visit_globals
  global.get $~lib/rt/itcms/pinSpace
  local.set $pn
  local.get $pn
  call $~lib/rt/itcms/Object#get:next
  local.set $iter
  loop $while-continue|0
   local.get $iter
   local.get $pn
   i32.ne
   local.set $3
   local.get $3
   if
    i32.const 1
    drop
    local.get $iter
    call $~lib/rt/itcms/Object#get:color
    i32.const 3
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $iter
    i32.const 20
    i32.add
    local.get $cookie
    call $~lib/rt/__visit_members
    local.get $iter
    call $~lib/rt/itcms/Object#get:next
    local.set $iter
    br $while-continue|0
   end
  end
 )
 (func $~lib/rt/itcms/Object#set:color (type $i32_i32_=>_none) (param $this i32) (param $color i32)
  local.get $this
  local.get $this
  i32.load $0 offset=4
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.get $color
  i32.or
  call $~lib/rt/itcms/Object#set:nextWithColor
 )
 (func $~lib/rt/itcms/Object#set:next (type $i32_i32_=>_none) (param $this i32) (param $obj i32)
  local.get $this
  local.get $obj
  local.get $this
  i32.load $0 offset=4
  i32.const 3
  i32.and
  i32.or
  call $~lib/rt/itcms/Object#set:nextWithColor
 )
 (func $~lib/rt/itcms/Object#unlink (type $i32_=>_none) (param $this i32)
  (local $next i32)
  (local $prev i32)
  local.get $this
  call $~lib/rt/itcms/Object#get:next
  local.set $next
  local.get $next
  i32.const 0
  i32.eq
  if
   i32.const 1
   drop
   local.get $this
   i32.load $0 offset=8
   i32.const 0
   i32.eq
   if (result i32)
    local.get $this
    global.get $~lib/memory/__heap_base
    i32.lt_u
   else
    i32.const 0
   end
   i32.eqz
   if
    unreachable
   end
   return
  end
  local.get $this
  i32.load $0 offset=8
  local.set $prev
  i32.const 1
  drop
  local.get $prev
  i32.eqz
  if
   unreachable
  end
  local.get $next
  local.get $prev
  call $~lib/rt/itcms/Object#set:prev
  local.get $prev
  local.get $next
  call $~lib/rt/itcms/Object#set:next
 )
 (func $~lib/rt/__typeinfo (type $i32_=>_i32) (param $id i32) (result i32)
  (local $ptr i32)
  global.get $~lib/rt/__rtti_base
  local.set $ptr
  local.get $id
  local.get $ptr
  i32.load $0
  i32.gt_u
  if
   unreachable
  end
  local.get $ptr
  i32.const 4
  i32.add
  local.get $id
  i32.const 8
  i32.mul
  i32.add
  i32.load $0
 )
 (func $~lib/rt/itcms/Object#get:isPointerfree (type $i32_=>_i32) (param $this i32) (result i32)
  (local $rtId i32)
  local.get $this
  i32.load $0 offset=12
  local.set $rtId
  local.get $rtId
  i32.const 1
  i32.le_u
  if (result i32)
   i32.const 1
  else
   local.get $rtId
   call $~lib/rt/__typeinfo
   i32.const 32
   i32.and
   i32.const 0
   i32.ne
  end
 )
 (func $~lib/rt/itcms/Object#linkTo (type $i32_i32_i32_=>_none) (param $this i32) (param $list i32) (param $withColor i32)
  (local $prev i32)
  local.get $list
  i32.load $0 offset=8
  local.set $prev
  local.get $this
  local.get $list
  local.get $withColor
  i32.or
  call $~lib/rt/itcms/Object#set:nextWithColor
  local.get $this
  local.get $prev
  call $~lib/rt/itcms/Object#set:prev
  local.get $prev
  local.get $this
  call $~lib/rt/itcms/Object#set:next
  local.get $list
  local.get $this
  call $~lib/rt/itcms/Object#set:prev
 )
 (func $~lib/rt/itcms/Object#makeGray (type $i32_=>_none) (param $this i32)
  (local $1 i32)
  local.get $this
  global.get $~lib/rt/itcms/iter
  i32.eq
  if
   local.get $this
   i32.load $0 offset=8
   local.tee $1
   i32.eqz
   if (result i32)
    unreachable
   else
    local.get $1
   end
   global.set $~lib/rt/itcms/iter
  end
  local.get $this
  call $~lib/rt/itcms/Object#unlink
  local.get $this
  global.get $~lib/rt/itcms/toSpace
  local.get $this
  call $~lib/rt/itcms/Object#get:isPointerfree
  if (result i32)
   global.get $~lib/rt/itcms/white
   i32.eqz
  else
   i32.const 2
  end
  call $~lib/rt/itcms/Object#linkTo
 )
 (func $~lib/rt/itcms/__visit (type $i32_i32_=>_none) (param $ptr i32) (param $cookie i32)
  (local $obj i32)
  local.get $ptr
  i32.eqz
  if
   return
  end
  local.get $ptr
  i32.const 20
  i32.sub
  local.set $obj
  i32.const 0
  drop
  local.get $obj
  call $~lib/rt/itcms/Object#get:color
  global.get $~lib/rt/itcms/white
  i32.eq
  if
   local.get $obj
   call $~lib/rt/itcms/Object#makeGray
   global.get $~lib/rt/itcms/visitCount
   i32.const 1
   i32.add
   global.set $~lib/rt/itcms/visitCount
  end
 )
 (func $~lib/rt/itcms/visitStack (type $i32_=>_none) (param $cookie i32)
  (local $ptr i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  local.set $ptr
  loop $while-continue|0
   local.get $ptr
   global.get $~lib/memory/__heap_base
   i32.lt_u
   local.set $2
   local.get $2
   if
    local.get $ptr
    i32.load $0
    local.get $cookie
    call $~lib/rt/itcms/__visit
    local.get $ptr
    i32.const 4
    i32.add
    local.set $ptr
    br $while-continue|0
   end
  end
 )
 (func $~lib/rt/itcms/Object#get:size (type $i32_=>_i32) (param $this i32) (result i32)
  i32.const 4
  local.get $this
  i32.load $0
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  i32.add
 )
 (func $~lib/rt/tlsf/Root#set:flMap (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0
 )
 (func $~lib/rt/common/BLOCK#set:mmInfo (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0
 )
 (func $~lib/rt/tlsf/Block#set:prev (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0 offset=4
 )
 (func $~lib/rt/tlsf/Block#set:next (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0 offset=8
 )
 (func $~lib/rt/tlsf/removeBlock (type $i32_i32_=>_none) (param $root i32) (param $block i32)
  (local $blockInfo i32)
  (local $size i32)
  (local $fl i32)
  (local $sl i32)
  (local $6 i32)
  (local $7 i32)
  (local $boundedSize i32)
  (local $prev i32)
  (local $next i32)
  (local $root|11 i32)
  (local $fl|12 i32)
  (local $sl|13 i32)
  (local $root|14 i32)
  (local $fl|15 i32)
  (local $sl|16 i32)
  (local $head i32)
  (local $root|18 i32)
  (local $fl|19 i32)
  (local $slMap i32)
  (local $root|21 i32)
  (local $fl|22 i32)
  (local $slMap|23 i32)
  local.get $block
  i32.load $0
  local.set $blockInfo
  i32.const 1
  drop
  local.get $blockInfo
  i32.const 1
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $blockInfo
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.set $size
  i32.const 1
  drop
  local.get $size
  i32.const 12
  i32.ge_u
  i32.eqz
  if
   unreachable
  end
  local.get $size
  i32.const 256
  i32.lt_u
  if
   i32.const 0
   local.set $fl
   local.get $size
   i32.const 4
   i32.shr_u
   local.set $sl
  else
   local.get $size
   local.tee $6
   i32.const 1073741820
   local.tee $7
   local.get $6
   local.get $7
   i32.lt_u
   select
   local.set $boundedSize
   i32.const 31
   local.get $boundedSize
   i32.clz
   i32.sub
   local.set $fl
   local.get $boundedSize
   local.get $fl
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 1
   i32.const 4
   i32.shl
   i32.xor
   local.set $sl
   local.get $fl
   i32.const 8
   i32.const 1
   i32.sub
   i32.sub
   local.set $fl
  end
  i32.const 1
  drop
  local.get $fl
  i32.const 23
  i32.lt_u
  if (result i32)
   local.get $sl
   i32.const 16
   i32.lt_u
  else
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  local.get $block
  i32.load $0 offset=4
  local.set $prev
  local.get $block
  i32.load $0 offset=8
  local.set $next
  local.get $prev
  if
   local.get $prev
   local.get $next
   call $~lib/rt/tlsf/Block#set:next
  end
  local.get $next
  if
   local.get $next
   local.get $prev
   call $~lib/rt/tlsf/Block#set:prev
  end
  local.get $block
  local.get $root
  local.set $root|11
  local.get $fl
  local.set $fl|12
  local.get $sl
  local.set $sl|13
  local.get $root|11
  local.get $fl|12
  i32.const 4
  i32.shl
  local.get $sl|13
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=96
  i32.eq
  if
   local.get $root
   local.set $root|14
   local.get $fl
   local.set $fl|15
   local.get $sl
   local.set $sl|16
   local.get $next
   local.set $head
   local.get $root|14
   local.get $fl|15
   i32.const 4
   i32.shl
   local.get $sl|16
   i32.add
   i32.const 2
   i32.shl
   i32.add
   local.get $head
   i32.store $0 offset=96
   local.get $next
   i32.eqz
   if
    local.get $root
    local.set $root|18
    local.get $fl
    local.set $fl|19
    local.get $root|18
    local.get $fl|19
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    local.set $slMap
    local.get $root
    local.set $root|21
    local.get $fl
    local.set $fl|22
    local.get $slMap
    i32.const 1
    local.get $sl
    i32.shl
    i32.const -1
    i32.xor
    i32.and
    local.tee $slMap
    local.set $slMap|23
    local.get $root|21
    local.get $fl|22
    i32.const 2
    i32.shl
    i32.add
    local.get $slMap|23
    i32.store $0 offset=4
    local.get $slMap
    i32.eqz
    if
     local.get $root
     local.get $root
     i32.load $0
     i32.const 1
     local.get $fl
     i32.shl
     i32.const -1
     i32.xor
     i32.and
     call $~lib/rt/tlsf/Root#set:flMap
    end
   end
  end
 )
 (func $~lib/rt/tlsf/insertBlock (type $i32_i32_=>_none) (param $root i32) (param $block i32)
  (local $blockInfo i32)
  (local $block|3 i32)
  (local $right i32)
  (local $rightInfo i32)
  (local $block|6 i32)
  (local $block|7 i32)
  (local $left i32)
  (local $leftInfo i32)
  (local $size i32)
  (local $fl i32)
  (local $sl i32)
  (local $13 i32)
  (local $14 i32)
  (local $boundedSize i32)
  (local $root|16 i32)
  (local $fl|17 i32)
  (local $sl|18 i32)
  (local $head i32)
  (local $root|20 i32)
  (local $fl|21 i32)
  (local $sl|22 i32)
  (local $head|23 i32)
  (local $root|24 i32)
  (local $fl|25 i32)
  (local $root|26 i32)
  (local $fl|27 i32)
  (local $slMap i32)
  i32.const 1
  drop
  local.get $block
  i32.eqz
  if
   unreachable
  end
  local.get $block
  i32.load $0
  local.set $blockInfo
  i32.const 1
  drop
  local.get $blockInfo
  i32.const 1
  i32.and
  i32.eqz
  if
   unreachable
  end
  local.get $block
  local.set $block|3
  local.get $block|3
  i32.const 4
  i32.add
  local.get $block|3
  i32.load $0
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  i32.add
  local.set $right
  local.get $right
  i32.load $0
  local.set $rightInfo
  local.get $rightInfo
  i32.const 1
  i32.and
  if
   local.get $root
   local.get $right
   call $~lib/rt/tlsf/removeBlock
   local.get $block
   local.get $blockInfo
   i32.const 4
   i32.add
   local.get $rightInfo
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   local.tee $blockInfo
   call $~lib/rt/common/BLOCK#set:mmInfo
   local.get $block
   local.set $block|6
   local.get $block|6
   i32.const 4
   i32.add
   local.get $block|6
   i32.load $0
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   local.set $right
   local.get $right
   i32.load $0
   local.set $rightInfo
  end
  local.get $blockInfo
  i32.const 2
  i32.and
  if
   local.get $block
   local.set $block|7
   local.get $block|7
   i32.const 4
   i32.sub
   i32.load $0
   local.set $left
   local.get $left
   i32.load $0
   local.set $leftInfo
   i32.const 1
   drop
   local.get $leftInfo
   i32.const 1
   i32.and
   i32.eqz
   if
    unreachable
   end
   local.get $root
   local.get $left
   call $~lib/rt/tlsf/removeBlock
   local.get $left
   local.set $block
   local.get $block
   local.get $leftInfo
   i32.const 4
   i32.add
   local.get $blockInfo
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   local.tee $blockInfo
   call $~lib/rt/common/BLOCK#set:mmInfo
  end
  local.get $right
  local.get $rightInfo
  i32.const 2
  i32.or
  call $~lib/rt/common/BLOCK#set:mmInfo
  local.get $blockInfo
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.set $size
  i32.const 1
  drop
  local.get $size
  i32.const 12
  i32.ge_u
  i32.eqz
  if
   unreachable
  end
  i32.const 1
  drop
  local.get $block
  i32.const 4
  i32.add
  local.get $size
  i32.add
  local.get $right
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $right
  i32.const 4
  i32.sub
  local.get $block
  i32.store $0
  local.get $size
  i32.const 256
  i32.lt_u
  if
   i32.const 0
   local.set $fl
   local.get $size
   i32.const 4
   i32.shr_u
   local.set $sl
  else
   local.get $size
   local.tee $13
   i32.const 1073741820
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_u
   select
   local.set $boundedSize
   i32.const 31
   local.get $boundedSize
   i32.clz
   i32.sub
   local.set $fl
   local.get $boundedSize
   local.get $fl
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 1
   i32.const 4
   i32.shl
   i32.xor
   local.set $sl
   local.get $fl
   i32.const 8
   i32.const 1
   i32.sub
   i32.sub
   local.set $fl
  end
  i32.const 1
  drop
  local.get $fl
  i32.const 23
  i32.lt_u
  if (result i32)
   local.get $sl
   i32.const 16
   i32.lt_u
  else
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  local.get $root
  local.set $root|16
  local.get $fl
  local.set $fl|17
  local.get $sl
  local.set $sl|18
  local.get $root|16
  local.get $fl|17
  i32.const 4
  i32.shl
  local.get $sl|18
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=96
  local.set $head
  local.get $block
  i32.const 0
  call $~lib/rt/tlsf/Block#set:prev
  local.get $block
  local.get $head
  call $~lib/rt/tlsf/Block#set:next
  local.get $head
  if
   local.get $head
   local.get $block
   call $~lib/rt/tlsf/Block#set:prev
  end
  local.get $root
  local.set $root|20
  local.get $fl
  local.set $fl|21
  local.get $sl
  local.set $sl|22
  local.get $block
  local.set $head|23
  local.get $root|20
  local.get $fl|21
  i32.const 4
  i32.shl
  local.get $sl|22
  i32.add
  i32.const 2
  i32.shl
  i32.add
  local.get $head|23
  i32.store $0 offset=96
  local.get $root
  local.get $root
  i32.load $0
  i32.const 1
  local.get $fl
  i32.shl
  i32.or
  call $~lib/rt/tlsf/Root#set:flMap
  local.get $root
  local.set $root|26
  local.get $fl
  local.set $fl|27
  local.get $root
  local.set $root|24
  local.get $fl
  local.set $fl|25
  local.get $root|24
  local.get $fl|25
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=4
  i32.const 1
  local.get $sl
  i32.shl
  i32.or
  local.set $slMap
  local.get $root|26
  local.get $fl|27
  i32.const 2
  i32.shl
  i32.add
  local.get $slMap
  i32.store $0 offset=4
 )
 (func $~lib/rt/tlsf/addMemory (type $i32_i32_i32_=>_i32) (param $root i32) (param $start i32) (param $end i32) (result i32)
  (local $root|3 i32)
  (local $tail i32)
  (local $tailInfo i32)
  (local $size i32)
  (local $leftSize i32)
  (local $left i32)
  (local $root|9 i32)
  (local $tail|10 i32)
  i32.const 1
  drop
  local.get $start
  local.get $end
  i32.le_u
  i32.eqz
  if
   unreachable
  end
  local.get $start
  i32.const 4
  i32.add
  i32.const 15
  i32.add
  i32.const 15
  i32.const -1
  i32.xor
  i32.and
  i32.const 4
  i32.sub
  local.set $start
  local.get $end
  i32.const 15
  i32.const -1
  i32.xor
  i32.and
  local.set $end
  local.get $root
  local.set $root|3
  local.get $root|3
  i32.load $0 offset=1568
  local.set $tail
  i32.const 0
  local.set $tailInfo
  local.get $tail
  if
   i32.const 1
   drop
   local.get $start
   local.get $tail
   i32.const 4
   i32.add
   i32.ge_u
   i32.eqz
   if
    unreachable
   end
   local.get $start
   i32.const 16
   i32.sub
   local.get $tail
   i32.eq
   if
    local.get $start
    i32.const 16
    i32.sub
    local.set $start
    local.get $tail
    i32.load $0
    local.set $tailInfo
   else
    nop
   end
  else
   i32.const 1
   drop
   local.get $start
   local.get $root
   i32.const 1572
   i32.add
   i32.ge_u
   i32.eqz
   if
    unreachable
   end
  end
  local.get $end
  local.get $start
  i32.sub
  local.set $size
  local.get $size
  i32.const 4
  i32.const 12
  i32.add
  i32.const 4
  i32.add
  i32.lt_u
  if
   i32.const 0
   return
  end
  local.get $size
  i32.const 2
  i32.const 4
  i32.mul
  i32.sub
  local.set $leftSize
  local.get $start
  local.set $left
  local.get $left
  local.get $leftSize
  i32.const 1
  i32.or
  local.get $tailInfo
  i32.const 2
  i32.and
  i32.or
  call $~lib/rt/common/BLOCK#set:mmInfo
  local.get $left
  i32.const 0
  call $~lib/rt/tlsf/Block#set:prev
  local.get $left
  i32.const 0
  call $~lib/rt/tlsf/Block#set:next
  local.get $start
  i32.const 4
  i32.add
  local.get $leftSize
  i32.add
  local.set $tail
  local.get $tail
  i32.const 0
  i32.const 2
  i32.or
  call $~lib/rt/common/BLOCK#set:mmInfo
  local.get $root
  local.set $root|9
  local.get $tail
  local.set $tail|10
  local.get $root|9
  local.get $tail|10
  i32.store $0 offset=1568
  local.get $root
  local.get $left
  call $~lib/rt/tlsf/insertBlock
  i32.const 1
 )
 (func $~lib/rt/tlsf/initialize (type $none_=>_none)
  (local $rootOffset i32)
  (local $pagesBefore i32)
  (local $pagesNeeded i32)
  (local $root i32)
  (local $root|4 i32)
  (local $tail i32)
  (local $fl i32)
  (local $7 i32)
  (local $root|8 i32)
  (local $fl|9 i32)
  (local $slMap i32)
  (local $sl i32)
  (local $12 i32)
  (local $root|13 i32)
  (local $fl|14 i32)
  (local $sl|15 i32)
  (local $head i32)
  (local $memStart i32)
  i32.const 0
  drop
  global.get $~lib/memory/__heap_base
  i32.const 15
  i32.add
  i32.const 15
  i32.const -1
  i32.xor
  i32.and
  local.set $rootOffset
  memory.size $0
  local.set $pagesBefore
  local.get $rootOffset
  i32.const 1572
  i32.add
  i32.const 65535
  i32.add
  i32.const 65535
  i32.const -1
  i32.xor
  i32.and
  i32.const 16
  i32.shr_u
  local.set $pagesNeeded
  local.get $pagesNeeded
  local.get $pagesBefore
  i32.gt_s
  if (result i32)
   local.get $pagesNeeded
   local.get $pagesBefore
   i32.sub
   memory.grow $0
   i32.const 0
   i32.lt_s
  else
   i32.const 0
  end
  if
   unreachable
  end
  local.get $rootOffset
  local.set $root
  local.get $root
  i32.const 0
  call $~lib/rt/tlsf/Root#set:flMap
  local.get $root
  local.set $root|4
  i32.const 0
  local.set $tail
  local.get $root|4
  local.get $tail
  i32.store $0 offset=1568
  i32.const 0
  local.set $fl
  loop $for-loop|0
   local.get $fl
   i32.const 23
   i32.lt_u
   local.set $7
   local.get $7
   if
    local.get $root
    local.set $root|8
    local.get $fl
    local.set $fl|9
    i32.const 0
    local.set $slMap
    local.get $root|8
    local.get $fl|9
    i32.const 2
    i32.shl
    i32.add
    local.get $slMap
    i32.store $0 offset=4
    i32.const 0
    local.set $sl
    loop $for-loop|1
     local.get $sl
     i32.const 16
     i32.lt_u
     local.set $12
     local.get $12
     if
      local.get $root
      local.set $root|13
      local.get $fl
      local.set $fl|14
      local.get $sl
      local.set $sl|15
      i32.const 0
      local.set $head
      local.get $root|13
      local.get $fl|14
      i32.const 4
      i32.shl
      local.get $sl|15
      i32.add
      i32.const 2
      i32.shl
      i32.add
      local.get $head
      i32.store $0 offset=96
      local.get $sl
      i32.const 1
      i32.add
      local.set $sl
      br $for-loop|1
     end
    end
    local.get $fl
    i32.const 1
    i32.add
    local.set $fl
    br $for-loop|0
   end
  end
  local.get $rootOffset
  i32.const 1572
  i32.add
  local.set $memStart
  i32.const 0
  drop
  local.get $root
  local.get $memStart
  memory.size $0
  i32.const 16
  i32.shl
  call $~lib/rt/tlsf/addMemory
  drop
  local.get $root
  global.set $~lib/rt/tlsf/ROOT
 )
 (func $~lib/rt/tlsf/checkUsedBlock (type $i32_=>_i32) (param $ptr i32) (result i32)
  (local $block i32)
  local.get $ptr
  i32.const 4
  i32.sub
  local.set $block
  local.get $ptr
  i32.const 0
  i32.ne
  if (result i32)
   local.get $ptr
   i32.const 15
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  if (result i32)
   local.get $block
   i32.load $0
   i32.const 1
   i32.and
   i32.eqz
  else
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  local.get $block
 )
 (func $~lib/rt/tlsf/freeBlock (type $i32_i32_=>_none) (param $root i32) (param $block i32)
  i32.const 0
  drop
  local.get $block
  local.get $block
  i32.load $0
  i32.const 1
  i32.or
  call $~lib/rt/common/BLOCK#set:mmInfo
  local.get $root
  local.get $block
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/tlsf/__free (type $i32_=>_none) (param $ptr i32)
  local.get $ptr
  global.get $~lib/memory/__heap_base
  i32.lt_u
  if
   return
  end
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $ptr
  call $~lib/rt/tlsf/checkUsedBlock
  call $~lib/rt/tlsf/freeBlock
 )
 (func $~lib/rt/itcms/free (type $i32_=>_none) (param $obj i32)
  local.get $obj
  global.get $~lib/memory/__heap_base
  i32.lt_u
  if
   local.get $obj
   i32.const 0
   call $~lib/rt/itcms/Object#set:nextWithColor
   local.get $obj
   i32.const 0
   call $~lib/rt/itcms/Object#set:prev
  else
   global.get $~lib/rt/itcms/total
   local.get $obj
   call $~lib/rt/itcms/Object#get:size
   i32.sub
   global.set $~lib/rt/itcms/total
   i32.const 0
   drop
   local.get $obj
   i32.const 4
   i32.add
   call $~lib/rt/tlsf/__free
  end
 )
 (func $~lib/rt/itcms/step (type $none_=>_i32) (result i32)
  (local $obj i32)
  (local $1 i32)
  (local $black i32)
  (local $3 i32)
  (local $4 i32)
  (local $from i32)
  block $break|0
   block $case2|0
    block $case1|0
     block $case0|0
      global.get $~lib/rt/itcms/state
      local.set $1
      local.get $1
      i32.const 0
      i32.eq
      br_if $case0|0
      local.get $1
      i32.const 1
      i32.eq
      br_if $case1|0
      local.get $1
      i32.const 2
      i32.eq
      br_if $case2|0
      br $break|0
     end
     i32.const 1
     global.set $~lib/rt/itcms/state
     i32.const 0
     global.set $~lib/rt/itcms/visitCount
     i32.const 0
     call $~lib/rt/itcms/visitRoots
     global.get $~lib/rt/itcms/toSpace
     global.set $~lib/rt/itcms/iter
     global.get $~lib/rt/itcms/visitCount
     i32.const 1
     i32.mul
     return
    end
    global.get $~lib/rt/itcms/white
    i32.eqz
    local.set $black
    global.get $~lib/rt/itcms/iter
    call $~lib/rt/itcms/Object#get:next
    local.set $obj
    loop $while-continue|1
     local.get $obj
     global.get $~lib/rt/itcms/toSpace
     i32.ne
     local.set $3
     local.get $3
     if
      local.get $obj
      global.set $~lib/rt/itcms/iter
      local.get $obj
      call $~lib/rt/itcms/Object#get:color
      local.get $black
      i32.ne
      if
       local.get $obj
       local.get $black
       call $~lib/rt/itcms/Object#set:color
       i32.const 0
       global.set $~lib/rt/itcms/visitCount
       local.get $obj
       i32.const 20
       i32.add
       i32.const 0
       call $~lib/rt/__visit_members
       global.get $~lib/rt/itcms/visitCount
       i32.const 1
       i32.mul
       return
      end
      local.get $obj
      call $~lib/rt/itcms/Object#get:next
      local.set $obj
      br $while-continue|1
     end
    end
    i32.const 0
    global.set $~lib/rt/itcms/visitCount
    i32.const 0
    call $~lib/rt/itcms/visitRoots
    global.get $~lib/rt/itcms/iter
    call $~lib/rt/itcms/Object#get:next
    local.set $obj
    local.get $obj
    global.get $~lib/rt/itcms/toSpace
    i32.eq
    if
     i32.const 0
     call $~lib/rt/itcms/visitStack
     global.get $~lib/rt/itcms/iter
     call $~lib/rt/itcms/Object#get:next
     local.set $obj
     loop $while-continue|2
      local.get $obj
      global.get $~lib/rt/itcms/toSpace
      i32.ne
      local.set $4
      local.get $4
      if
       local.get $obj
       call $~lib/rt/itcms/Object#get:color
       local.get $black
       i32.ne
       if
        local.get $obj
        local.get $black
        call $~lib/rt/itcms/Object#set:color
        local.get $obj
        i32.const 20
        i32.add
        i32.const 0
        call $~lib/rt/__visit_members
       end
       local.get $obj
       call $~lib/rt/itcms/Object#get:next
       local.set $obj
       br $while-continue|2
      end
     end
     global.get $~lib/rt/itcms/fromSpace
     local.set $from
     global.get $~lib/rt/itcms/toSpace
     global.set $~lib/rt/itcms/fromSpace
     local.get $from
     global.set $~lib/rt/itcms/toSpace
     local.get $black
     global.set $~lib/rt/itcms/white
     local.get $from
     call $~lib/rt/itcms/Object#get:next
     global.set $~lib/rt/itcms/iter
     i32.const 2
     global.set $~lib/rt/itcms/state
    end
    global.get $~lib/rt/itcms/visitCount
    i32.const 1
    i32.mul
    return
   end
   global.get $~lib/rt/itcms/iter
   local.set $obj
   local.get $obj
   global.get $~lib/rt/itcms/toSpace
   i32.ne
   if
    local.get $obj
    call $~lib/rt/itcms/Object#get:next
    global.set $~lib/rt/itcms/iter
    i32.const 1
    drop
    local.get $obj
    call $~lib/rt/itcms/Object#get:color
    global.get $~lib/rt/itcms/white
    i32.eqz
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $obj
    call $~lib/rt/itcms/free
    i32.const 10
    return
   end
   global.get $~lib/rt/itcms/toSpace
   global.get $~lib/rt/itcms/toSpace
   call $~lib/rt/itcms/Object#set:nextWithColor
   global.get $~lib/rt/itcms/toSpace
   global.get $~lib/rt/itcms/toSpace
   call $~lib/rt/itcms/Object#set:prev
   i32.const 0
   global.set $~lib/rt/itcms/state
   br $break|0
  end
  i32.const 0
 )
 (func $~lib/rt/itcms/interrupt (type $none_=>_none)
  (local $budget i32)
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1024
  i32.const 200
  i32.mul
  i32.const 100
  i32.div_u
  local.set $budget
  loop $do-loop|0
   local.get $budget
   call $~lib/rt/itcms/step
   i32.sub
   local.set $budget
   global.get $~lib/rt/itcms/state
   i32.const 0
   i32.eq
   if
    i32.const 0
    drop
    global.get $~lib/rt/itcms/total
    i64.extend_i32_u
    i32.const 200
    i64.extend_i32_u
    i64.mul
    i64.const 100
    i64.div_u
    i32.wrap_i64
    i32.const 1024
    i32.add
    global.set $~lib/rt/itcms/threshold
    i32.const 0
    drop
    return
   end
   local.get $budget
   i32.const 0
   i32.gt_s
   br_if $do-loop|0
  end
  i32.const 0
  drop
  global.get $~lib/rt/itcms/total
  i32.const 1024
  global.get $~lib/rt/itcms/total
  global.get $~lib/rt/itcms/threshold
  i32.sub
  i32.const 1024
  i32.lt_u
  i32.mul
  i32.add
  global.set $~lib/rt/itcms/threshold
  i32.const 0
  drop
 )
 (func $~lib/rt/tlsf/computeSize (type $i32_=>_i32) (param $size i32) (result i32)
  local.get $size
  i32.const 12
  i32.le_u
  if (result i32)
   i32.const 12
  else
   local.get $size
   i32.const 4
   i32.add
   i32.const 15
   i32.add
   i32.const 15
   i32.const -1
   i32.xor
   i32.and
   i32.const 4
   i32.sub
  end
 )
 (func $~lib/rt/tlsf/prepareSize (type $i32_=>_i32) (param $size i32) (result i32)
  local.get $size
  i32.const 1073741820
  i32.gt_u
  if
   unreachable
  end
  local.get $size
  call $~lib/rt/tlsf/computeSize
 )
 (func $~lib/rt/tlsf/searchBlock (type $i32_i32_=>_i32) (param $root i32) (param $size i32) (result i32)
  (local $fl i32)
  (local $sl i32)
  (local $requestSize i32)
  (local $root|5 i32)
  (local $fl|6 i32)
  (local $slMap i32)
  (local $head i32)
  (local $flMap i32)
  (local $root|10 i32)
  (local $fl|11 i32)
  (local $root|12 i32)
  (local $fl|13 i32)
  (local $sl|14 i32)
  (local $root|15 i32)
  (local $fl|16 i32)
  (local $sl|17 i32)
  local.get $size
  i32.const 256
  i32.lt_u
  if
   i32.const 0
   local.set $fl
   local.get $size
   i32.const 4
   i32.shr_u
   local.set $sl
  else
   local.get $size
   i32.const 536870910
   i32.lt_u
   if (result i32)
    local.get $size
    i32.const 1
    i32.const 27
    local.get $size
    i32.clz
    i32.sub
    i32.shl
    i32.add
    i32.const 1
    i32.sub
   else
    local.get $size
   end
   local.set $requestSize
   i32.const 31
   local.get $requestSize
   i32.clz
   i32.sub
   local.set $fl
   local.get $requestSize
   local.get $fl
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 1
   i32.const 4
   i32.shl
   i32.xor
   local.set $sl
   local.get $fl
   i32.const 8
   i32.const 1
   i32.sub
   i32.sub
   local.set $fl
  end
  i32.const 1
  drop
  local.get $fl
  i32.const 23
  i32.lt_u
  if (result i32)
   local.get $sl
   i32.const 16
   i32.lt_u
  else
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  local.get $root
  local.set $root|5
  local.get $fl
  local.set $fl|6
  local.get $root|5
  local.get $fl|6
  i32.const 2
  i32.shl
  i32.add
  i32.load $0 offset=4
  i32.const 0
  i32.const -1
  i32.xor
  local.get $sl
  i32.shl
  i32.and
  local.set $slMap
  i32.const 0
  local.set $head
  local.get $slMap
  i32.eqz
  if
   local.get $root
   i32.load $0
   i32.const 0
   i32.const -1
   i32.xor
   local.get $fl
   i32.const 1
   i32.add
   i32.shl
   i32.and
   local.set $flMap
   local.get $flMap
   i32.eqz
   if
    i32.const 0
    local.set $head
   else
    local.get $flMap
    i32.ctz
    local.set $fl
    local.get $root
    local.set $root|10
    local.get $fl
    local.set $fl|11
    local.get $root|10
    local.get $fl|11
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    local.set $slMap
    i32.const 1
    drop
    local.get $slMap
    i32.eqz
    if
     unreachable
    end
    local.get $root
    local.set $root|12
    local.get $fl
    local.set $fl|13
    local.get $slMap
    i32.ctz
    local.set $sl|14
    local.get $root|12
    local.get $fl|13
    i32.const 4
    i32.shl
    local.get $sl|14
    i32.add
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=96
    local.set $head
   end
  else
   local.get $root
   local.set $root|15
   local.get $fl
   local.set $fl|16
   local.get $slMap
   i32.ctz
   local.set $sl|17
   local.get $root|15
   local.get $fl|16
   i32.const 4
   i32.shl
   local.get $sl|17
   i32.add
   i32.const 2
   i32.shl
   i32.add
   i32.load $0 offset=96
   local.set $head
  end
  local.get $head
 )
 (func $~lib/rt/tlsf/growMemory (type $i32_i32_=>_none) (param $root i32) (param $size i32)
  (local $pagesBefore i32)
  (local $root|3 i32)
  (local $pagesNeeded i32)
  (local $5 i32)
  (local $6 i32)
  (local $pagesWanted i32)
  (local $pagesAfter i32)
  i32.const 0
  drop
  local.get $size
  i32.const 536870910
  i32.lt_u
  if
   local.get $size
   i32.const 1
   i32.const 27
   local.get $size
   i32.clz
   i32.sub
   i32.shl
   i32.const 1
   i32.sub
   i32.add
   local.set $size
  end
  memory.size $0
  local.set $pagesBefore
  local.get $size
  i32.const 4
  local.get $pagesBefore
  i32.const 16
  i32.shl
  i32.const 4
  i32.sub
  local.get $root
  local.set $root|3
  local.get $root|3
  i32.load $0 offset=1568
  i32.ne
  i32.shl
  i32.add
  local.set $size
  local.get $size
  i32.const 65535
  i32.add
  i32.const 65535
  i32.const -1
  i32.xor
  i32.and
  i32.const 16
  i32.shr_u
  local.set $pagesNeeded
  local.get $pagesBefore
  local.tee $5
  local.get $pagesNeeded
  local.tee $6
  local.get $5
  local.get $6
  i32.gt_s
  select
  local.set $pagesWanted
  local.get $pagesWanted
  memory.grow $0
  i32.const 0
  i32.lt_s
  if
   local.get $pagesNeeded
   memory.grow $0
   i32.const 0
   i32.lt_s
   if
    unreachable
   end
  end
  memory.size $0
  local.set $pagesAfter
  local.get $root
  local.get $pagesBefore
  i32.const 16
  i32.shl
  local.get $pagesAfter
  i32.const 16
  i32.shl
  call $~lib/rt/tlsf/addMemory
  drop
 )
 (func $~lib/rt/tlsf/prepareBlock (type $i32_i32_i32_=>_none) (param $root i32) (param $block i32) (param $size i32)
  (local $blockInfo i32)
  (local $remaining i32)
  (local $spare i32)
  (local $block|6 i32)
  (local $block|7 i32)
  local.get $block
  i32.load $0
  local.set $blockInfo
  i32.const 1
  drop
  local.get $size
  i32.const 4
  i32.add
  i32.const 15
  i32.and
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  local.get $blockInfo
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.get $size
  i32.sub
  local.set $remaining
  local.get $remaining
  i32.const 4
  i32.const 12
  i32.add
  i32.ge_u
  if
   local.get $block
   local.get $size
   local.get $blockInfo
   i32.const 2
   i32.and
   i32.or
   call $~lib/rt/common/BLOCK#set:mmInfo
   local.get $block
   i32.const 4
   i32.add
   local.get $size
   i32.add
   local.set $spare
   local.get $spare
   local.get $remaining
   i32.const 4
   i32.sub
   i32.const 1
   i32.or
   call $~lib/rt/common/BLOCK#set:mmInfo
   local.get $root
   local.get $spare
   call $~lib/rt/tlsf/insertBlock
  else
   local.get $block
   local.get $blockInfo
   i32.const 1
   i32.const -1
   i32.xor
   i32.and
   call $~lib/rt/common/BLOCK#set:mmInfo
   local.get $block
   local.set $block|7
   local.get $block|7
   i32.const 4
   i32.add
   local.get $block|7
   i32.load $0
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   local.get $block
   local.set $block|6
   local.get $block|6
   i32.const 4
   i32.add
   local.get $block|6
   i32.load $0
   i32.const 3
   i32.const -1
   i32.xor
   i32.and
   i32.add
   i32.load $0
   i32.const 2
   i32.const -1
   i32.xor
   i32.and
   call $~lib/rt/common/BLOCK#set:mmInfo
  end
 )
 (func $~lib/rt/tlsf/allocateBlock (type $i32_i32_=>_i32) (param $root i32) (param $size i32) (result i32)
  (local $payloadSize i32)
  (local $block i32)
  local.get $size
  call $~lib/rt/tlsf/prepareSize
  local.set $payloadSize
  local.get $root
  local.get $payloadSize
  call $~lib/rt/tlsf/searchBlock
  local.set $block
  local.get $block
  i32.eqz
  if
   local.get $root
   local.get $payloadSize
   call $~lib/rt/tlsf/growMemory
   local.get $root
   local.get $payloadSize
   call $~lib/rt/tlsf/searchBlock
   local.set $block
   i32.const 1
   drop
   local.get $block
   i32.eqz
   if
    unreachable
   end
  end
  i32.const 1
  drop
  local.get $block
  i32.load $0
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  local.get $payloadSize
  i32.ge_u
  i32.eqz
  if
   unreachable
  end
  local.get $root
  local.get $block
  call $~lib/rt/tlsf/removeBlock
  local.get $root
  local.get $block
  local.get $payloadSize
  call $~lib/rt/tlsf/prepareBlock
  i32.const 0
  drop
  local.get $block
 )
 (func $~lib/rt/tlsf/__alloc (type $i32_=>_i32) (param $size i32) (result i32)
  global.get $~lib/rt/tlsf/ROOT
  i32.eqz
  if
   call $~lib/rt/tlsf/initialize
  end
  global.get $~lib/rt/tlsf/ROOT
  local.get $size
  call $~lib/rt/tlsf/allocateBlock
  i32.const 4
  i32.add
 )
 (func $~lib/rt/itcms/Object#set:rtId (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0 offset=12
 )
 (func $~lib/rt/itcms/Object#set:rtSize (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0 offset=16
 )
 (func $~lib/rt/itcms/__new (type $i32_i32_=>_i32) (param $size i32) (param $id i32) (result i32)
  (local $obj i32)
  (local $ptr i32)
  local.get $size
  i32.const 1073741804
  i32.ge_u
  if
   unreachable
  end
  global.get $~lib/rt/itcms/total
  global.get $~lib/rt/itcms/threshold
  i32.ge_u
  if
   call $~lib/rt/itcms/interrupt
  end
  i32.const 16
  local.get $size
  i32.add
  call $~lib/rt/tlsf/__alloc
  i32.const 4
  i32.sub
  local.set $obj
  local.get $obj
  local.get $id
  call $~lib/rt/itcms/Object#set:rtId
  local.get $obj
  local.get $size
  call $~lib/rt/itcms/Object#set:rtSize
  local.get $obj
  global.get $~lib/rt/itcms/fromSpace
  global.get $~lib/rt/itcms/white
  call $~lib/rt/itcms/Object#linkTo
  global.get $~lib/rt/itcms/total
  local.get $obj
  call $~lib/rt/itcms/Object#get:size
  i32.add
  global.set $~lib/rt/itcms/total
  local.get $obj
  i32.const 20
  i32.add
  local.set $ptr
  local.get $ptr
  i32.const 0
  local.get $size
  memory.fill $0
  local.get $ptr
 )
 (func $~lib/rt/itcms/__link (type $i32_i32_i32_=>_none) (param $parentPtr i32) (param $childPtr i32) (param $expectMultiple i32)
  (local $child i32)
  (local $parent i32)
  (local $parentColor i32)
  local.get $childPtr
  i32.eqz
  if
   return
  end
  i32.const 1
  drop
  local.get $parentPtr
  i32.eqz
  if
   unreachable
  end
  local.get $childPtr
  i32.const 20
  i32.sub
  local.set $child
  local.get $child
  call $~lib/rt/itcms/Object#get:color
  global.get $~lib/rt/itcms/white
  i32.eq
  if
   local.get $parentPtr
   i32.const 20
   i32.sub
   local.set $parent
   local.get $parent
   call $~lib/rt/itcms/Object#get:color
   local.set $parentColor
   local.get $parentColor
   global.get $~lib/rt/itcms/white
   i32.eqz
   i32.eq
   if
    local.get $expectMultiple
    if
     local.get $parent
     call $~lib/rt/itcms/Object#makeGray
    else
     local.get $child
     call $~lib/rt/itcms/Object#makeGray
    end
   else
    local.get $parentColor
    i32.const 3
    i32.eq
    if (result i32)
     global.get $~lib/rt/itcms/state
     i32.const 1
     i32.eq
    else
     i32.const 0
    end
    if
     local.get $child
     call $~lib/rt/itcms/Object#makeGray
    end
   end
  end
 )
 (func $~lib/arraybuffer/ArrayBufferView#set:buffer (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0
  local.get $0
  local.get $1
  i32.const 0
  call $~lib/rt/itcms/__link
 )
 (func $~lib/arraybuffer/ArrayBufferView#set:dataStart (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0 offset=4
 )
 (func $~lib/arraybuffer/ArrayBufferView#set:byteLength (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store $0 offset=8
 )
 (func $~lib/arraybuffer/ArrayBufferView#get:byteOffset (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  i32.load $0
  i32.sub
 )
 (func $~lib/typedarray/Int8Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
 )
 (func $~lib/typedarray/Uint8Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
 )
 (func $~lib/typedarray/Uint8ClampedArray#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
 )
 (func $~lib/typedarray/Int16Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
 )
 (func $~lib/typedarray/Uint16Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
 )
 (func $~lib/typedarray/Int32Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
 )
 (func $~lib/typedarray/Uint32Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
 )
 (func $~lib/typedarray/Int64Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
 )
 (func $~lib/typedarray/Uint64Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
 )
 (func $~lib/typedarray/Float32Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
 )
 (func $~lib/typedarray/Float64Array#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
 )
 (func $std/typedarray/testInstantiate (type $i32_=>_none) (param $len i32)
  (local $i8a i32)
  (local $u8a i32)
  (local $c8a i32)
  (local $i16a i32)
  (local $u16a i32)
  (local $i32a i32)
  (local $u32a i32)
  (local $i64a i32)
  (local $u64a i32)
  (local $f32a i32)
  (local $f64a i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 44
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 44
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Int8Array#constructor
  local.tee $i8a
  i32.store $0
  local.get $i8a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $i8a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Int8Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $i8a
  call $~lib/typedarray/Int8Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $u8a
  i32.store $0 offset=4
  local.get $u8a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $u8a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Uint8Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $u8a
  call $~lib/typedarray/Uint8Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $c8a
  i32.store $0 offset=8
  local.get $c8a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $c8a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Uint8Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $c8a
  call $~lib/typedarray/Uint8ClampedArray#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Int16Array#constructor
  local.tee $i16a
  i32.store $0 offset=12
  local.get $i16a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $i16a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Int16Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $i16a
  call $~lib/typedarray/Int16Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $u16a
  i32.store $0 offset=16
  local.get $u16a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $u16a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Uint16Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $u16a
  call $~lib/typedarray/Uint16Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Int32Array#constructor
  local.tee $i32a
  i32.store $0 offset=20
  local.get $i32a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $i32a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Int32Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $i32a
  call $~lib/typedarray/Int32Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $u32a
  i32.store $0 offset=24
  local.get $u32a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $u32a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Uint32Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $u32a
  call $~lib/typedarray/Uint32Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Int64Array#constructor
  local.tee $i64a
  i32.store $0 offset=28
  local.get $i64a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $i64a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Int64Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $i64a
  call $~lib/typedarray/Int64Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $u64a
  i32.store $0 offset=32
  local.get $u64a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $u64a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Uint64Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $u64a
  call $~lib/typedarray/Uint64Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Float32Array#constructor
  local.tee $f32a
  i32.store $0 offset=36
  local.get $f32a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $f32a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Float32Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $f32a
  call $~lib/typedarray/Float32Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Float64Array#constructor
  local.tee $f64a
  i32.store $0 offset=40
  local.get $f64a
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $f64a
  i32.load $0 offset=8
  local.get $len
  global.get $~lib/typedarray/Float64Array.BYTES_PER_ELEMENT
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $f64a
  call $~lib/typedarray/Float64Array#get:length
  local.get $len
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 44
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Int32Array#__set (type $i32_i32_i32_=>_none) (param $this i32) (param $index i32) (param $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  local.get $value
  i32.store $0
 )
 (func $~lib/typedarray/Int32Array#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
 )
 (func $~lib/typedarray/Float64Array#__set (type $i32_i32_f64_=>_none) (param $this i32) (param $index i32) (param $value f64)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  local.get $value
  f64.store $0
 )
 (func $~lib/util/sort/insertionSort<f64> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a f64)
  (local $b f64)
  (local $min f64)
  (local $max f64)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0 offset=8
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 3
       i32.shl
       i32.add
       f64.load $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $f64_f64_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 3
        i32.shl
        i32.add
        local.get $a
        f64.store $0 offset=16
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    local.get $max
    f64.store $0 offset=16
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 3
       i32.shl
       i32.add
       f64.load $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $f64_f64_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 3
        i32.shl
        i32.add
        local.get $a
        f64.store $0 offset=8
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    local.get $min
    f64.store $0 offset=8
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<f64> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp f64)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $f64_f64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     f64.load $0 offset=8
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     f64.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $tmp
     f64.store $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     f64.load $0 offset=8
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/nodePower (type $i32_i32_i32_i32_i32_=>_i32) (param $left i32) (param $right i32) (param $startA i32) (param $startB i32) (param $endB i32) (result i32)
  (local $n i64)
  (local $s i32)
  (local $l i32)
  (local $r i32)
  (local $a i64)
  (local $b i64)
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  i64.extend_i32_u
  local.set $n
  local.get $startB
  local.get $left
  i32.const 1
  i32.shl
  i32.sub
  local.set $s
  local.get $startA
  local.get $s
  i32.add
  local.set $l
  local.get $endB
  local.get $s
  i32.add
  i32.const 1
  i32.add
  local.set $r
  local.get $l
  i64.extend_i32_u
  i64.const 30
  i64.shl
  local.get $n
  i64.div_u
  local.set $a
  local.get $r
  i64.extend_i32_u
  i64.const 30
  i64.shl
  local.get $n
  i64.div_u
  local.set $b
  local.get $a
  local.get $b
  i64.xor
  i32.wrap_i64
  i32.clz
 )
 (func $~lib/util/sort/mergeRuns<f64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a f64)
  (local $b f64)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    f64.store $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    f64.load $0 offset=8
    f64.store $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $a
     f64.store $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $b
     f64.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<f64> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a f64)
  (local $b f64)
  (local $c i32)
  (local $a|7 f64)
  (local $b|8 f64)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     f64.load $0
     local.set $a
     local.get $ptr
     f64.load $0 offset=8
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     f64.store $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     f64.load $0 offset=16
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $f64_f64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     f64.store $0 offset=8
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     f64.store $0 offset=16
    end
    local.get $ptr
    f64.load $0
    local.set $a|7
    local.get $ptr
    f64.load $0 offset=8
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $f64_f64_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    f64.store $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    f64.store $0 offset=8
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<f64>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<f64>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<f64>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<f64>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<f64>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<f64>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<f64>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Float64Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Float64Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<f64>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<f64>~anonymous|0 (type $f64_f64_=>_i32) (param $a f64) (param $b f64) (result i32)
  (local $ia i64)
  (local $ib i64)
  local.get $a
  i64.reinterpret_f64
  local.set $ia
  local.get $b
  i64.reinterpret_f64
  local.set $ib
  local.get $ia
  local.get $ia
  i64.const 63
  i64.shr_s
  i64.const 1
  i64.shr_u
  i64.xor
  local.set $ia
  local.get $ib
  local.get $ib
  i64.const 63
  i64.shr_s
  i64.const 1
  i64.shr_u
  i64.xor
  local.set $ib
  local.get $ia
  local.get $ib
  i64.gt_s
  local.get $ia
  local.get $ib
  i64.lt_s
  i32.sub
 )
 (func $~lib/typedarray/Float64Array#__get (type $i32_i32_=>_f64) (param $this i32) (param $index i32) (result f64)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
 )
 (func $~lib/typedarray/Uint8ClampedArray#__set (type $i32_i32_i32_=>_none) (param $this i32) (param $index i32) (param $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  local.get $value
  i32.const 31
  i32.shr_s
  i32.const -1
  i32.xor
  i32.const 255
  local.get $value
  i32.sub
  i32.const 31
  i32.shr_s
  local.get $value
  i32.or
  i32.and
  i32.store8 $0
 )
 (func $~lib/typedarray/Uint8ClampedArray#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_u $0
 )
 (func $~lib/typedarray/Int8Array#__set (type $i32_i32_i32_=>_none) (param $this i32) (param $index i32) (param $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  local.get $value
  i32.store8 $0
 )
 (func $~lib/util/bytes/FILL<u8> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $value i32) (param $start i32) (param $end i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  local.get $start
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $start
   i32.add
   local.tee $5
   i32.const 0
   local.tee $6
   local.get $5
   local.get $6
   i32.gt_u
   select
  else
   local.get $start
   local.tee $7
   local.get $len
   local.tee $8
   local.get $7
   local.get $8
   i32.lt_s
   select
  end
  local.set $start
  local.get $end
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end
   i32.add
   local.tee $9
   i32.const 0
   local.tee $10
   local.get $9
   local.get $10
   i32.gt_u
   select
  else
   local.get $end
   local.tee $11
   local.get $len
   local.tee $12
   local.get $11
   local.get $12
   i32.lt_s
   select
  end
  local.set $end
  i32.const 1
  i32.const 1
  i32.eq
  drop
  local.get $start
  local.get $end
  i32.lt_s
  if
   local.get $ptr
   local.get $start
   i32.add
   local.get $value
   local.get $end
   local.get $start
   i32.sub
   memory.fill $0
  end
 )
 (func $~lib/typedarray/Int8Array#fill (type $i32_i32_i32_i32_=>_i32) (param $this i32) (param $value i32) (param $start i32) (param $end i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int8Array#get:length
  local.get $value
  local.get $start
  local.get $end
  call $~lib/util/bytes/FILL<u8>
  local.get $this
 )
 (func $~lib/rt/__newBuffer (type $i32_i32_i32_=>_i32) (param $size i32) (param $id i32) (param $data i32) (result i32)
  (local $buffer i32)
  local.get $size
  local.get $id
  call $~lib/rt/itcms/__new
  local.set $buffer
  local.get $data
  if
   local.get $buffer
   local.get $data
   local.get $size
   memory.copy $0 $0
  end
  local.get $buffer
 )
 (func $~lib/array/Array<i8>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Int8Array#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_s $0
 )
 (func $~lib/array/Array<i8>#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=12
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 0
  i32.shl
  i32.add
  i32.load8_s $0
  local.set $value
  i32.const 0
  drop
  local.get $value
 )
 (func $std/typedarray/isInt8ArrayEqual (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  (local $i i32)
  (local $len i32)
  (local $4 i32)
  local.get $a
  call $~lib/typedarray/Int8Array#get:length
  local.get $b
  call $~lib/array/Array<i8>#get:length
  i32.ne
  if
   i32.const 0
   return
  end
  i32.const 0
  local.set $i
  local.get $a
  call $~lib/typedarray/Int8Array#get:length
  local.set $len
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $a
    local.get $i
    call $~lib/typedarray/Int8Array#__get
    local.get $b
    local.get $i
    call $~lib/array/Array<i8>#__get
    i32.ne
    if
     i32.const 0
     return
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  i32.const 1
 )
 (func $~lib/util/bytes/FILL<u32> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $value i32) (param $start i32) (param $end i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  local.get $start
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $start
   i32.add
   local.tee $5
   i32.const 0
   local.tee $6
   local.get $5
   local.get $6
   i32.gt_u
   select
  else
   local.get $start
   local.tee $7
   local.get $len
   local.tee $8
   local.get $7
   local.get $8
   i32.lt_s
   select
  end
  local.set $start
  local.get $end
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end
   i32.add
   local.tee $9
   i32.const 0
   local.tee $10
   local.get $9
   local.get $10
   i32.gt_u
   select
  else
   local.get $end
   local.tee $11
   local.get $len
   local.tee $12
   local.get $11
   local.get $12
   i32.lt_s
   select
  end
  local.set $end
  i32.const 4
  i32.const 1
  i32.eq
  drop
  i32.const 0
  i32.const 1
  i32.le_s
  drop
  i32.const 1
  drop
  local.get $value
  i32.const 0
  i32.eq
  local.get $value
  i32.const -1
  i32.eq
  i32.or
  if
   local.get $start
   local.get $end
   i32.lt_s
   if
    local.get $ptr
    local.get $start
    i32.const 2
    i32.shl
    i32.add
    local.get $value
    local.get $end
    local.get $start
    i32.sub
    i32.const 2
    i32.shl
    memory.fill $0
   end
   return
  end
  loop $for-loop|0
   local.get $start
   local.get $end
   i32.lt_s
   local.set $13
   local.get $13
   if
    local.get $ptr
    local.get $start
    i32.const 2
    i32.shl
    i32.add
    local.get $value
    i32.store $0
    local.get $start
    i32.const 1
    i32.add
    local.set $start
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#fill (type $i32_i32_i32_i32_=>_i32) (param $this i32) (param $value i32) (param $start i32) (param $end i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int32Array#get:length
  local.get $value
  local.get $start
  local.get $end
  call $~lib/util/bytes/FILL<u32>
  local.get $this
 )
 (func $~lib/array/Array<i32>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/array/Array<i32>#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=12
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.set $value
  i32.const 0
  drop
  local.get $value
 )
 (func $std/typedarray/isInt32ArrayEqual (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  (local $i i32)
  (local $len i32)
  (local $4 i32)
  local.get $a
  call $~lib/typedarray/Int32Array#get:length
  local.get $b
  call $~lib/array/Array<i32>#get:length
  i32.ne
  if
   i32.const 0
   return
  end
  i32.const 0
  local.set $i
  local.get $a
  call $~lib/typedarray/Int32Array#get:length
  local.set $len
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $a
    local.get $i
    call $~lib/typedarray/Int32Array#__get
    local.get $b
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.ne
    if
     i32.const 0
     return
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  i32.const 1
 )
 (func $~lib/typedarray/Int32Array#copyWithin (type $i32_i32_i32_i32_=>_i32) (param $this i32) (param $target i32) (param $start i32) (param $end i32) (result i32)
  (local $array i32)
  (local $target|5 i32)
  (local $start|6 i32)
  (local $end|7 i32)
  (local $len i32)
  (local $ptr i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $to i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $from i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $last i32)
  (local $27 i32)
  (local $28 i32)
  (local $count i32)
  local.get $this
  local.set $array
  local.get $target
  local.set $target|5
  local.get $start
  local.set $start|6
  local.get $end
  local.set $end|7
  local.get $array
  call $~lib/typedarray/Int32Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $end|7
  local.tee $10
  local.get $len
  local.tee $11
  local.get $10
  local.get $11
  i32.lt_s
  select
  local.set $end|7
  local.get $target|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $target|5
   i32.add
   local.tee $12
   i32.const 0
   local.tee $13
   local.get $12
   local.get $13
   i32.gt_s
   select
  else
   local.get $target|5
   local.tee $14
   local.get $len
   local.tee $15
   local.get $14
   local.get $15
   i32.lt_s
   select
  end
  local.set $to
  local.get $start|6
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $start|6
   i32.add
   local.tee $17
   i32.const 0
   local.tee $18
   local.get $17
   local.get $18
   i32.gt_s
   select
  else
   local.get $start|6
   local.tee $19
   local.get $len
   local.tee $20
   local.get $19
   local.get $20
   i32.lt_s
   select
  end
  local.set $from
  local.get $end|7
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|7
   i32.add
   local.tee $22
   i32.const 0
   local.tee $23
   local.get $22
   local.get $23
   i32.gt_s
   select
  else
   local.get $end|7
   local.tee $24
   local.get $len
   local.tee $25
   local.get $24
   local.get $25
   i32.lt_s
   select
  end
  local.set $last
  local.get $last
  local.get $from
  i32.sub
  local.tee $27
  local.get $len
  local.get $to
  i32.sub
  local.tee $28
  local.get $27
  local.get $28
  i32.lt_s
  select
  local.set $count
  local.get $ptr
  local.get $to
  i32.const 2
  i32.shl
  i32.add
  local.get $ptr
  local.get $from
  i32.const 2
  i32.shl
  i32.add
  local.get $count
  i32.const 2
  i32.shl
  memory.copy $0 $0
  local.get $array
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Int8Array#reduce<i8> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Int8Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $~lib/typedarray/Uint8Array#__set (type $i32_i32_i32_=>_none) (param $this i32) (param $index i32) (param $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  local.get $value
  i32.store8 $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Uint8Array#reduce<u8> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint8Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Uint8ClampedArray#reduce<u8> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint8ClampedArray#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $~lib/typedarray/Int16Array#__set (type $i32_i32_i32_=>_none) (param $this i32) (param $index i32) (param $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  local.get $value
  i32.store16 $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Int16Array#reduce<i16> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Int16Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $~lib/typedarray/Uint16Array#__set (type $i32_i32_i32_=>_none) (param $this i32) (param $index i32) (param $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  local.get $value
  i32.store16 $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Uint16Array#reduce<u16> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint16Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Int32Array#reduce<i32> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Int32Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $~lib/typedarray/Uint32Array#__set (type $i32_i32_i32_=>_none) (param $this i32) (param $index i32) (param $value i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  local.get $value
  i32.store $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Uint32Array#reduce<u32> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint32Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $~lib/typedarray/Int64Array#__set (type $i32_i32_i64_=>_none) (param $this i32) (param $index i32) (param $value i64)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  local.get $value
  i64.store $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i64_i32_i32_=>_i64) (param $acc i64) (param $val i64) (param $$2 i32) (param $$3 i32) (result i64)
  local.get $acc
  local.get $val
  i64.add
 )
 (func $~lib/typedarray/Int64Array#reduce<i64> (type $i32_i32_i64_=>_i64) (param $this i32) (param $fn i32) (param $initialValue i64) (result i64)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i64)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Int64Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $~lib/typedarray/Uint64Array#__set (type $i32_i32_i64_=>_none) (param $this i32) (param $index i32) (param $value i64)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  local.get $value
  i64.store $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i64_i32_i32_=>_i64) (param $acc i64) (param $val i64) (param $$2 i32) (param $$3 i32) (result i64)
  local.get $acc
  local.get $val
  i64.add
 )
 (func $~lib/typedarray/Uint64Array#reduce<u64> (type $i32_i32_i64_=>_i64) (param $this i32) (param $fn i32) (param $initialValue i64) (result i64)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i64)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint64Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $~lib/typedarray/Float32Array#__set (type $i32_i32_f32_=>_none) (param $this i32) (param $index i32) (param $value f32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  local.get $value
  f32.store $0
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_f32_i32_i32_=>_f32) (param $acc f32) (param $val f32) (param $$2 i32) (param $$3 i32) (result f32)
  local.get $acc
  local.get $val
  f32.add
 )
 (func $~lib/typedarray/Float32Array#reduce<f32> (type $i32_i32_f32_=>_f32) (param $this i32) (param $fn i32) (param $initialValue f32) (result f32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 f32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Float32Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $f32_f32_i32_i32_=>_f32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_f64_i32_i32_=>_f64) (param $acc f64) (param $val f64) (param $$2 i32) (param $$3 i32) (result f64)
  local.get $acc
  local.get $val
  f64.add
 )
 (func $~lib/typedarray/Float64Array#reduce<f64> (type $i32_i32_f64_=>_f64) (param $this i32) (param $fn i32) (param $initialValue f64) (result f64)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 f64)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $9 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Float64Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $9
   local.get $9
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $f64_f64_i32_i32_=>_f64)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $~lib/typedarray/Int8Array#at (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_s $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Int8Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Int8Array#at
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Int8Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint8Array#at (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_u $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Uint8Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Uint8Array#at
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Uint8Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint8ClampedArray#at (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_u $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Uint8ClampedArray#at
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Uint8ClampedArray#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Int16Array#at (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Int16Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Int16Array#at
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Int16Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint16Array#at (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Uint16Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Uint16Array#at
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Uint16Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Int32Array#at (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Int32Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Int32Array#at
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Int32Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint32Array#at (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Uint32Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Uint32Array#at
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Uint32Array#at
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Int64Array#at (type $i32_i32_=>_i64) (param $this i32) (param $index i32) (result i64)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Int64Array#at
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Int64Array#at
  i64.const 3
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Int64Array#at
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint64Array#at (type $i32_i32_=>_i64) (param $this i32) (param $index i32) (result i64)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Uint64Array#at
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Uint64Array#at
  i64.const 3
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Uint64Array#at
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Float32Array#at (type $i32_i32_=>_f32) (param $this i32) (param $index i32) (result f32)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  f32.const 1
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 1
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 2
  f32.const 3
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Float32Array#at
  f32.const 1
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Float32Array#at
  f32.const 3
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Float32Array#at
  f32.const 1
  f32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Float64Array#at (type $i32_i32_=>_f64) (param $this i32) (param $index i32) (result f64)
  (local $len i32)
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  local.set $len
  local.get $index
  i32.const 0
  local.get $len
  local.get $index
  i32.const 0
  i32.ge_s
  select
  i32.add
  local.set $index
  local.get $index
  local.get $len
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
 )
 (func $std/typedarray/testAt<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $array i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 2
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 0
  call $~lib/typedarray/Float64Array#at
  f64.const 1
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  call $~lib/typedarray/Float64Array#at
  f64.const 3
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -3
  call $~lib/typedarray/Float64Array#at
  f64.const 1
  f64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Int8Array#reduceRight<i8> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Int8Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Uint8Array#reduceRight<u8> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Uint8Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Uint8ClampedArray#reduceRight<u8> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Uint8ClampedArray#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Int16Array#reduceRight<i16> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Int16Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Uint16Array#reduceRight<u16> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Uint16Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Int32Array#reduceRight<i32> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Int32Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_i32_=>_i32) (param $acc i32) (param $val i32) (param $$2 i32) (param $$3 i32) (result i32)
  local.get $acc
  local.get $val
  i32.add
 )
 (func $~lib/typedarray/Uint32Array#reduceRight<u32> (type $i32_i32_i32_=>_i32) (param $this i32) (param $fn i32) (param $initialValue i32) (result i32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i32)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Uint32Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_i32_=>_i32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i64_i32_i32_=>_i64) (param $acc i64) (param $val i64) (param $$2 i32) (param $$3 i32) (result i64)
  local.get $acc
  local.get $val
  i64.add
 )
 (func $~lib/typedarray/Int64Array#reduceRight<i64> (type $i32_i32_i64_=>_i64) (param $this i32) (param $fn i32) (param $initialValue i64) (result i64)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i64)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Int64Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i64_i32_i32_=>_i64) (param $acc i64) (param $val i64) (param $$2 i32) (param $$3 i32) (result i64)
  local.get $acc
  local.get $val
  i64.add
 )
 (func $~lib/typedarray/Uint64Array#reduceRight<u64> (type $i32_i32_i64_=>_i64) (param $this i32) (param $fn i32) (param $initialValue i64) (result i64)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 i64)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Uint64Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $i64_i64_i32_i32_=>_i64)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_f32_i32_i32_=>_f32) (param $acc f32) (param $val f32) (param $$2 i32) (param $$3 i32) (result f32)
  local.get $acc
  local.get $val
  f32.add
 )
 (func $~lib/typedarray/Float32Array#reduceRight<f32> (type $i32_i32_f32_=>_f32) (param $this i32) (param $fn i32) (param $initialValue f32) (result f32)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 f32)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Float32Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $f32_f32_i32_i32_=>_f32)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_f64_i32_i32_=>_f64) (param $acc f64) (param $val f64) (param $$2 i32) (param $$3 i32) (result f64)
  local.get $acc
  local.get $val
  f64.add
 )
 (func $~lib/typedarray/Float64Array#reduceRight<f64> (type $i32_i32_f64_=>_f64) (param $this i32) (param $fn i32) (param $initialValue f64) (result f64)
  (local $array i32)
  (local $fn|4 i32)
  (local $initialValue|5 f64)
  (local $ptr i32)
  (local $i i32)
  (local $8 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|4
  local.get $initialValue
  local.set $initialValue|5
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $array
  call $~lib/typedarray/Float64Array#get:length
  i32.const 1
  i32.sub
  local.set $i
  loop $for-loop|0
   local.get $i
   i32.const 0
   i32.ge_s
   local.set $8
   local.get $8
   if
    local.get $initialValue|5
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.get $i
    local.get $array
    i32.const 4
    global.set $~argumentsLength
    local.get $fn|4
    i32.load $0
    call_indirect $0 (type $f64_f64_i32_i32_=>_f64)
    local.set $initialValue|5
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $initialValue|5
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  local.get $value
  i32.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  local.get $value
  i32.mul
 )
 (func $~lib/typedarray/Uint8Array#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_u $0
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  local.get $value
  i32.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  local.get $value
  i32.mul
 )
 (func $~lib/typedarray/Int16Array#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  local.get $value
  i32.mul
 )
 (func $~lib/typedarray/Uint16Array#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  local.get $value
  i32.mul
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  local.get $value
  i32.mul
 )
 (func $~lib/typedarray/Uint32Array#__get (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i64) (param $value i64) (param $$1 i32) (param $$2 i32) (result i64)
  local.get $value
  local.get $value
  i64.mul
 )
 (func $~lib/typedarray/Int64Array#__get (type $i32_i32_=>_i64) (param $this i32) (param $index i32) (result i64)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_i64) (param $value i64) (param $$1 i32) (param $$2 i32) (result i64)
  local.get $value
  local.get $value
  i64.mul
 )
 (func $~lib/typedarray/Uint64Array#__get (type $i32_i32_=>_i64) (param $this i32) (param $index i32) (result i64)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 3
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_f32) (param $value f32) (param $$1 i32) (param $$2 i32) (result f32)
  local.get $value
  local.get $value
  f32.mul
 )
 (func $~lib/typedarray/Float32Array#__get (type $i32_i32_=>_f32) (param $this i32) (param $index i32) (result f32)
  local.get $index
  local.get $this
  i32.load $0 offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   unreachable
  end
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_f64) (param $value f64) (param $$1 i32) (param $$2 i32) (result f64)
  local.get $value
  local.get $value
  f64.mul
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 2
  i32.gt_s
 )
 (func $~lib/rt/itcms/__renew (type $i32_i32_=>_i32) (param $oldPtr i32) (param $size i32) (result i32)
  (local $oldObj i32)
  (local $newPtr i32)
  (local $4 i32)
  (local $5 i32)
  local.get $oldPtr
  i32.const 20
  i32.sub
  local.set $oldObj
  local.get $size
  local.get $oldObj
  i32.load $0
  i32.const 3
  i32.const -1
  i32.xor
  i32.and
  i32.const 16
  i32.sub
  i32.le_u
  if
   local.get $oldObj
   local.get $size
   call $~lib/rt/itcms/Object#set:rtSize
   local.get $oldPtr
   return
  end
  local.get $size
  local.get $oldObj
  i32.load $0 offset=12
  call $~lib/rt/itcms/__new
  local.set $newPtr
  local.get $newPtr
  local.get $oldPtr
  local.get $size
  local.tee $4
  local.get $oldObj
  i32.load $0 offset=16
  local.tee $5
  local.get $4
  local.get $5
  i32.lt_u
  select
  memory.copy $0 $0
  local.get $newPtr
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 2
  i32.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.gt_s
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.gt_u
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 2
  f32.gt
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 2
  f64.gt
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int8Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int8Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Int8Array,i8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 0
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint8Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint8Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Uint8Array,u8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint8Array,u8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 0
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint8ClampedArray#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint8ClampedArray#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 0
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int16Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int16Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Int16Array,i16>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 0
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint16Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint16Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Uint16Array,u16>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint16Array,u16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 0
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int32Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Int32Array,i32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 0
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint32Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Uint32Array,u32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint32Array,u32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 0
  i32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.eq
 )
 (func $~lib/typedarray/Int64Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Int64Array,i64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 0
  i64.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.eq
 )
 (func $~lib/typedarray/Uint64Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Uint64Array,u64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint64Array,u64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 0
  i64.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 2
  f32.eq
 )
 (func $~lib/typedarray/Float32Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Float32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Float32Array,f32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>~anonymous|1 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 0
  f32.eq
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 2
  f64.eq
 )
 (func $~lib/typedarray/Float64Array#some (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Float64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     if
      i32.const 1
      br $~lib/typedarray/SOME<~lib/typedarray/Float64Array,f64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 0
  end
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>~anonymous|1 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 0
  f64.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int8Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int8Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint8Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint8Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8Array,u8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint8ClampedArray#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint8ClampedArray#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int16Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int16Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint16Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint16Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint16Array,u16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int32Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint32Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint32Array,u32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.eq
 )
 (func $~lib/typedarray/Int64Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 4
  i64.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.eq
 )
 (func $~lib/typedarray/Uint64Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint64Array,u64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 4
  i64.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 2
  f32.eq
 )
 (func $~lib/typedarray/Float32Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Float32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 4
  f32.eq
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 2
  f64.eq
 )
 (func $~lib/typedarray/Float64Array#findIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Float64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 4
  f64.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int8Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Int8Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int8Array,i8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int8Array,i8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint8Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Uint8Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8Array,u8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8Array,u8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint8ClampedArray#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int16Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Int16Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int16Array,i16>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int16Array,i16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint16Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Uint16Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint16Array,u16>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint16Array,u16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Int32Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Int32Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int32Array,i32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int32Array,i32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.eq
 )
 (func $~lib/typedarray/Uint32Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Uint32Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint32Array,u32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint32Array,u32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 4
  i32.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.eq
 )
 (func $~lib/typedarray/Int64Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Int64Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Int64Array,i64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int64Array,i64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 4
  i64.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.eq
 )
 (func $~lib/typedarray/Uint64Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Uint64Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $i64_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Uint64Array,u64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint64Array,u64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 4
  i64.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 2
  f32.eq
 )
 (func $~lib/typedarray/Float32Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Float32Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $f32_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float32Array,f32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float32Array,f32>~anonymous|1 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 4
  f32.eq
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 2
  f64.eq
 )
 (func $~lib/typedarray/Float64Array#findLastIndex (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $6 i32)
  block $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   local.get $array
   call $~lib/typedarray/Float64Array#get:length
   i32.const 1
   i32.sub
   local.set $i
   loop $for-loop|0
    local.get $i
    i32.const 0
    i32.ge_s
    local.set $6
    local.get $6
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.get $i
     local.get $array
     i32.const 3
     global.set $~argumentsLength
     local.get $fn|3
     i32.load $0
     call_indirect $0 (type $f64_i32_i32_=>_i32)
     if
      local.get $i
      br $~lib/typedarray/FIND_LAST_INDEX<~lib/typedarray/Float64Array,f64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.sub
     local.set $i
     br $for-loop|0
    end
   end
   i32.const -1
  end
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float64Array,f64>~anonymous|1 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 4
  f64.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 2
  i32.rem_s
  i32.const 0
  i32.eq
 )
 (func $~lib/typedarray/Int8Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int8Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 0
      i32.shl
      i32.add
      i32.load8_s $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i32_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Int8Array,i8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend8_s
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.rem_u
  i32.const 0
  i32.eq
 )
 (func $~lib/typedarray/Uint8Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint8Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 0
      i32.shl
      i32.add
      i32.load8_u $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i32_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Uint8Array,u8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.rem_u
  i32.const 0
  i32.eq
 )
 (func $~lib/typedarray/Uint8ClampedArray#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint8ClampedArray#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 0
      i32.shl
      i32.add
      i32.load8_u $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i32_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 255
  i32.and
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 2
  i32.rem_s
  i32.const 0
  i32.eq
 )
 (func $~lib/typedarray/Int16Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int16Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 1
      i32.shl
      i32.add
      i32.load16_s $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i32_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Int16Array,i16>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.extend16_s
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 2
  i32.rem_u
  i32.const 0
  i32.eq
 )
 (func $~lib/typedarray/Uint16Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint16Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 1
      i32.shl
      i32.add
      i32.load16_u $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i32_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Uint16Array,u16>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint16Array,u16>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 65535
  i32.and
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.rem_s
  i32.const 0
  i32.eq
 )
 (func $~lib/typedarray/Int32Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i32_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Int32Array,i32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int32Array,i32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.rem_u
  i32.const 0
  i32.eq
 )
 (func $~lib/typedarray/Uint32Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i32_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Uint32Array,u32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint32Array,u32>~anonymous|1 (type $i32_i32_i32_=>_i32) (param $value i32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i32.const 2
  i32.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.rem_s
  i64.const 0
  i64.eq
 )
 (func $~lib/typedarray/Int64Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Int64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 3
      i32.shl
      i32.add
      i64.load $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i64_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Int64Array,i64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.eq
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.rem_u
  i64.const 0
  i64.eq
 )
 (func $~lib/typedarray/Uint64Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Uint64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 3
      i32.shl
      i32.add
      i64.load $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $i64_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Uint64Array,u64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint64Array,u64>~anonymous|1 (type $i64_i32_i32_=>_i32) (param $value i64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  i64.const 2
  i64.eq
 )
 (func $~lib/math/NativeMathf.mod (type $f32_f32_=>_f32) (param $x f32) (param $y f32) (result f32)
  (local $ux i32)
  (local $uy i32)
  (local $ex i32)
  (local $ey i32)
  (local $sm i32)
  (local $uy1 i32)
  (local $m f32)
  (local $ux1 i32)
  (local $10 i32)
  (local $shift i32)
  local.get $y
  f32.abs
  f32.const 1
  f32.eq
  if
   local.get $x
   local.get $x
   f32.trunc
   f32.sub
   local.get $x
   f32.copysign
   return
  end
  local.get $x
  i32.reinterpret_f32
  local.set $ux
  local.get $y
  i32.reinterpret_f32
  local.set $uy
  local.get $ux
  i32.const 23
  i32.shr_u
  i32.const 255
  i32.and
  local.set $ex
  local.get $uy
  i32.const 23
  i32.shr_u
  i32.const 255
  i32.and
  local.set $ey
  local.get $ux
  i32.const -2147483648
  i32.and
  local.set $sm
  local.get $uy
  i32.const 1
  i32.shl
  local.set $uy1
  local.get $uy1
  i32.const 0
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $ex
   i32.const 255
   i32.eq
  end
  if (result i32)
   i32.const 1
  else
   local.get $y
   local.get $y
   f32.ne
  end
  if
   local.get $x
   local.get $y
   f32.mul
   local.set $m
   local.get $m
   local.get $m
   f32.div
   return
  end
  local.get $ux
  i32.const 1
  i32.shl
  local.set $ux1
  local.get $ux1
  local.get $uy1
  i32.le_u
  if
   local.get $x
   local.get $ux1
   local.get $uy1
   i32.ne
   f32.convert_i32_u
   f32.mul
   return
  end
  local.get $ex
  i32.eqz
  if
   local.get $ex
   local.get $ux
   i32.const 9
   i32.shl
   i32.clz
   i32.sub
   local.set $ex
   local.get $ux
   i32.const 1
   local.get $ex
   i32.sub
   i32.shl
   local.set $ux
  else
   local.get $ux
   i32.const -1
   i32.const 9
   i32.shr_u
   i32.and
   local.set $ux
   local.get $ux
   i32.const 1
   i32.const 23
   i32.shl
   i32.or
   local.set $ux
  end
  local.get $ey
  i32.eqz
  if
   local.get $ey
   local.get $uy
   i32.const 9
   i32.shl
   i32.clz
   i32.sub
   local.set $ey
   local.get $uy
   i32.const 1
   local.get $ey
   i32.sub
   i32.shl
   local.set $uy
  else
   local.get $uy
   i32.const -1
   i32.const 9
   i32.shr_u
   i32.and
   local.set $uy
   local.get $uy
   i32.const 1
   i32.const 23
   i32.shl
   i32.or
   local.set $uy
  end
  loop $while-continue|0
   local.get $ex
   local.get $ey
   i32.gt_s
   local.set $10
   local.get $10
   if
    local.get $ux
    local.get $uy
    i32.ge_u
    if
     local.get $ux
     local.get $uy
     i32.eq
     if
      f32.const 0
      local.get $x
      f32.mul
      return
     end
     local.get $ux
     local.get $uy
     i32.sub
     local.set $ux
    end
    local.get $ux
    i32.const 1
    i32.shl
    local.set $ux
    local.get $ex
    i32.const 1
    i32.sub
    local.set $ex
    br $while-continue|0
   end
  end
  local.get $ux
  local.get $uy
  i32.ge_u
  if
   local.get $ux
   local.get $uy
   i32.eq
   if
    f32.const 0
    local.get $x
    f32.mul
    return
   end
   local.get $ux
   local.get $uy
   i32.sub
   local.set $ux
  end
  local.get $ux
  i32.const 8
  i32.shl
  i32.clz
  local.set $shift
  local.get $ex
  local.get $shift
  i32.sub
  local.set $ex
  local.get $ux
  local.get $shift
  i32.shl
  local.set $ux
  local.get $ex
  i32.const 0
  i32.gt_s
  if
   local.get $ux
   i32.const 1
   i32.const 23
   i32.shl
   i32.sub
   local.set $ux
   local.get $ux
   local.get $ex
   i32.const 23
   i32.shl
   i32.or
   local.set $ux
  else
   local.get $ux
   i32.const 0
   local.get $ex
   i32.sub
   i32.const 1
   i32.add
   i32.shr_u
   local.set $ux
  end
  local.get $ux
  local.get $sm
  i32.or
  f32.reinterpret_i32
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 2
  call $~lib/math/NativeMathf.mod
  f32.const 0
  f32.eq
 )
 (func $~lib/typedarray/Float32Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Float32Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 2
      i32.shl
      i32.add
      f32.load $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $f32_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Float32Array,f32>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>~anonymous|1 (type $f32_i32_i32_=>_i32) (param $value f32) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f32.const 2
  f32.eq
 )
 (func $~lib/math/NativeMath.mod (type $f64_f64_=>_f64) (param $x f64) (param $y f64) (result f64)
  (local $ux i64)
  (local $uy i64)
  (local $ex i64)
  (local $ey i64)
  (local $sx i64)
  (local $uy1 i64)
  (local $m f64)
  (local $ux1 i64)
  (local $10 i32)
  (local $shift i64)
  local.get $y
  f64.abs
  f64.const 1
  f64.eq
  if
   local.get $x
   local.get $x
   f64.trunc
   f64.sub
   local.get $x
   f64.copysign
   return
  end
  local.get $x
  i64.reinterpret_f64
  local.set $ux
  local.get $y
  i64.reinterpret_f64
  local.set $uy
  local.get $ux
  i64.const 52
  i64.shr_u
  i64.const 2047
  i64.and
  local.set $ex
  local.get $uy
  i64.const 52
  i64.shr_u
  i64.const 2047
  i64.and
  local.set $ey
  local.get $ux
  i64.const 63
  i64.shr_u
  local.set $sx
  local.get $uy
  i64.const 1
  i64.shl
  local.set $uy1
  local.get $uy1
  i64.const 0
  i64.eq
  if (result i32)
   i32.const 1
  else
   local.get $ex
   i64.const 2047
   i64.eq
  end
  if (result i32)
   i32.const 1
  else
   local.get $y
   local.get $y
   f64.ne
  end
  if
   local.get $x
   local.get $y
   f64.mul
   local.set $m
   local.get $m
   local.get $m
   f64.div
   return
  end
  local.get $ux
  i64.const 1
  i64.shl
  local.set $ux1
  local.get $ux1
  local.get $uy1
  i64.le_u
  if
   local.get $x
   local.get $ux1
   local.get $uy1
   i64.ne
   f64.convert_i32_u
   f64.mul
   return
  end
  local.get $ex
  i64.const 0
  i64.ne
  i32.eqz
  if
   local.get $ex
   local.get $ux
   i64.const 12
   i64.shl
   i64.clz
   i64.sub
   local.set $ex
   local.get $ux
   i64.const 1
   local.get $ex
   i64.sub
   i64.shl
   local.set $ux
  else
   local.get $ux
   i64.const -1
   i64.const 12
   i64.shr_u
   i64.and
   local.set $ux
   local.get $ux
   i64.const 1
   i64.const 52
   i64.shl
   i64.or
   local.set $ux
  end
  local.get $ey
  i64.const 0
  i64.ne
  i32.eqz
  if
   local.get $ey
   local.get $uy
   i64.const 12
   i64.shl
   i64.clz
   i64.sub
   local.set $ey
   local.get $uy
   i64.const 1
   local.get $ey
   i64.sub
   i64.shl
   local.set $uy
  else
   local.get $uy
   i64.const -1
   i64.const 12
   i64.shr_u
   i64.and
   local.set $uy
   local.get $uy
   i64.const 1
   i64.const 52
   i64.shl
   i64.or
   local.set $uy
  end
  loop $while-continue|0
   local.get $ex
   local.get $ey
   i64.gt_s
   local.set $10
   local.get $10
   if
    local.get $ux
    local.get $uy
    i64.ge_u
    if
     local.get $ux
     local.get $uy
     i64.eq
     if
      f64.const 0
      local.get $x
      f64.mul
      return
     end
     local.get $ux
     local.get $uy
     i64.sub
     local.set $ux
    end
    local.get $ux
    i64.const 1
    i64.shl
    local.set $ux
    local.get $ex
    i64.const 1
    i64.sub
    local.set $ex
    br $while-continue|0
   end
  end
  local.get $ux
  local.get $uy
  i64.ge_u
  if
   local.get $ux
   local.get $uy
   i64.eq
   if
    f64.const 0
    local.get $x
    f64.mul
    return
   end
   local.get $ux
   local.get $uy
   i64.sub
   local.set $ux
  end
  local.get $ux
  i64.const 11
  i64.shl
  i64.clz
  local.set $shift
  local.get $ex
  local.get $shift
  i64.sub
  local.set $ex
  local.get $ux
  local.get $shift
  i64.shl
  local.set $ux
  local.get $ex
  i64.const 0
  i64.gt_s
  if
   local.get $ux
   i64.const 1
   i64.const 52
   i64.shl
   i64.sub
   local.set $ux
   local.get $ux
   local.get $ex
   i64.const 52
   i64.shl
   i64.or
   local.set $ux
  else
   local.get $ux
   i64.const 0
   local.get $ex
   i64.sub
   i64.const 1
   i64.add
   i64.shr_u
   local.set $ux
  end
  local.get $ux
  local.get $sx
  i64.const 63
  i64.shl
  i64.or
  f64.reinterpret_i64
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 2
  call $~lib/math/NativeMath.mod
  f64.const 0
  f64.eq
 )
 (func $~lib/typedarray/Float64Array#every (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  block $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $fn
   local.set $fn|3
   local.get $array
   i32.load $0 offset=4
   local.set $ptr
   i32.const 0
   local.set $i
   local.get $array
   call $~lib/typedarray/Float64Array#get:length
   local.set $k
   loop $for-loop|0
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     block $for-continue|0
      local.get $ptr
      local.get $i
      i32.const 3
      i32.shl
      i32.add
      f64.load $0
      local.get $i
      local.get $array
      i32.const 3
      global.set $~argumentsLength
      local.get $fn|3
      i32.load $0
      call_indirect $0 (type $f64_i32_i32_=>_i32)
      if
       br $for-continue|0
      end
      i32.const 0
      br $~lib/typedarray/EVERY<~lib/typedarray/Float64Array,f64>|inlined.0
     end
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $for-loop|0
    end
   end
   i32.const 1
  end
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>~anonymous|1 (type $f64_i32_i32_=>_i32) (param $value f64) (param $$1 i32) (param $$2 i32) (result i32)
  local.get $value
  f64.const 2
  f64.eq
 )
 (func $~lib/typedarray/Int8Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Int8Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint8Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint8ClampedArray#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int16Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Int16Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint16Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint16Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Int32Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint32Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint32Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int64Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Int64Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint64Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Uint64Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float32Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Float32Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float64Array#forEach (type $i32_i32_=>_none) (param $this i32) (param $fn i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $ptr i32)
  (local $i i32)
  (local $k i32)
  (local $7 i32)
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  i32.const 0
  local.set $i
  local.get $array
  call $~lib/typedarray/Float64Array#get:length
  local.set $k
  loop $for-loop|0
   local.get $i
   local.get $k
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_none)
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/bytes/REVERSE<u8> (type $i32_i32_=>_none) (param $ptr i32) (param $len i32)
  (local $i i32)
  (local $tail i32)
  (local $hlen i32)
  (local $5 i32)
  (local $front i32)
  (local $back i32)
  (local $8 i64)
  (local $9 i64)
  (local $temp i64)
  (local $11 i64)
  (local $12 i64)
  (local $13 i32)
  (local $front|14 i32)
  (local $back|15 i32)
  (local $temp|16 i32)
  local.get $len
  i32.const 1
  i32.gt_u
  if
   i32.const 0
   local.set $i
   local.get $len
   i32.const 1
   i32.shr_u
   local.set $hlen
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   i32.const 1
   i32.const 1
   i32.eq
   drop
   local.get $len
   i32.const 8
   i32.sub
   local.set $tail
   loop $while-continue|0
    local.get $i
    i32.const 7
    i32.add
    local.get $hlen
    i32.lt_u
    local.set $5
    local.get $5
    if
     local.get $ptr
     local.get $i
     i32.add
     local.set $front
     local.get $ptr
     local.get $tail
     i32.add
     local.get $i
     i32.sub
     local.set $back
     local.get $front
     i64.load $0
     local.tee $8
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $8
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.tee $9
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $9
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     local.set $temp
     local.get $front
     local.get $back
     i64.load $0
     local.tee $11
     i64.const 8
     i64.shr_u
     i64.const 71777214294589695
     i64.and
     local.get $11
     i64.const 71777214294589695
     i64.and
     i64.const 8
     i64.shl
     i64.or
     local.tee $12
     i64.const 16
     i64.shr_u
     i64.const 281470681808895
     i64.and
     local.get $12
     i64.const 281470681808895
     i64.and
     i64.const 16
     i64.shl
     i64.or
     i64.const 32
     i64.rotr
     i64.store $0
     local.get $back
     local.get $temp
     i64.store $0
     local.get $i
     i32.const 8
     i32.add
     local.set $i
     br $while-continue|0
    end
   end
   i32.const 1
   i32.const 2
   i32.eq
   drop
   local.get $len
   i32.const 1
   i32.sub
   local.set $tail
   loop $while-continue|1
    local.get $i
    local.get $hlen
    i32.lt_u
    local.set $13
    local.get $13
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     local.set $front|14
     local.get $ptr
     local.get $tail
     local.get $i
     i32.sub
     i32.const 0
     i32.shl
     i32.add
     local.set $back|15
     local.get $front|14
     i32.load8_u $0
     local.set $temp|16
     local.get $front|14
     local.get $back|15
     i32.load8_u $0
     i32.store8 $0
     local.get $back|15
     local.get $temp|16
     i32.store8 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $while-continue|1
    end
   end
  end
 )
 (func $~lib/typedarray/Int8Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int8Array#get:length
  call $~lib/util/bytes/REVERSE<u8>
  local.get $this
 )
 (func $~lib/typedarray/Uint8Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint8Array#get:length
  call $~lib/util/bytes/REVERSE<u8>
  local.get $this
 )
 (func $~lib/typedarray/Uint8ClampedArray#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint8ClampedArray#get:length
  call $~lib/util/bytes/REVERSE<u8>
  local.get $this
 )
 (func $~lib/util/bytes/REVERSE<u16> (type $i32_i32_=>_none) (param $ptr i32) (param $len i32)
  (local $i i32)
  (local $tail i32)
  (local $hlen i32)
  (local $5 i32)
  (local $front i32)
  (local $back i32)
  (local $temp i32)
  (local $9 i32)
  (local $front|10 i32)
  (local $back|11 i32)
  (local $temp|12 i32)
  local.get $len
  i32.const 1
  i32.gt_u
  if
   i32.const 0
   local.set $i
   local.get $len
   i32.const 1
   i32.shr_u
   local.set $hlen
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   i32.const 2
   i32.const 1
   i32.eq
   drop
   i32.const 2
   i32.const 2
   i32.eq
   drop
   local.get $len
   i32.const 2
   i32.sub
   local.set $tail
   loop $while-continue|0
    local.get $i
    i32.const 1
    i32.add
    local.get $hlen
    i32.lt_u
    local.set $5
    local.get $5
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     local.set $front
     local.get $ptr
     local.get $tail
     local.get $i
     i32.sub
     i32.const 1
     i32.shl
     i32.add
     local.set $back
     local.get $back
     i32.load $0
     i32.const 16
     i32.rotr
     local.set $temp
     local.get $back
     local.get $front
     i32.load $0
     i32.const 16
     i32.rotr
     i32.store $0
     local.get $front
     local.get $temp
     i32.store $0
     local.get $i
     i32.const 2
     i32.add
     local.set $i
     br $while-continue|0
    end
   end
   local.get $len
   i32.const 1
   i32.sub
   local.set $tail
   loop $while-continue|1
    local.get $i
    local.get $hlen
    i32.lt_u
    local.set $9
    local.get $9
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     local.set $front|10
     local.get $ptr
     local.get $tail
     local.get $i
     i32.sub
     i32.const 1
     i32.shl
     i32.add
     local.set $back|11
     local.get $front|10
     i32.load16_u $0
     local.set $temp|12
     local.get $front|10
     local.get $back|11
     i32.load16_u $0
     i32.store16 $0
     local.get $back|11
     local.get $temp|12
     i32.store16 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $while-continue|1
    end
   end
  end
 )
 (func $~lib/typedarray/Int16Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int16Array#get:length
  call $~lib/util/bytes/REVERSE<u16>
  local.get $this
 )
 (func $~lib/typedarray/Uint16Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint16Array#get:length
  call $~lib/util/bytes/REVERSE<u16>
  local.get $this
 )
 (func $~lib/util/bytes/REVERSE<u32> (type $i32_i32_=>_none) (param $ptr i32) (param $len i32)
  (local $i i32)
  (local $tail i32)
  (local $hlen i32)
  (local $5 i32)
  (local $front i32)
  (local $back i32)
  (local $temp i32)
  local.get $len
  i32.const 1
  i32.gt_u
  if
   i32.const 0
   local.set $i
   local.get $len
   i32.const 1
   i32.shr_u
   local.set $hlen
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   i32.const 4
   i32.const 1
   i32.eq
   drop
   i32.const 4
   i32.const 2
   i32.eq
   drop
   local.get $len
   i32.const 1
   i32.sub
   local.set $tail
   loop $while-continue|0
    local.get $i
    local.get $hlen
    i32.lt_u
    local.set $5
    local.get $5
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     local.set $front
     local.get $ptr
     local.get $tail
     local.get $i
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.set $back
     local.get $front
     i32.load $0
     local.set $temp
     local.get $front
     local.get $back
     i32.load $0
     i32.store $0
     local.get $back
     local.get $temp
     i32.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $while-continue|0
    end
   end
  end
 )
 (func $~lib/typedarray/Int32Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int32Array#get:length
  call $~lib/util/bytes/REVERSE<u32>
  local.get $this
 )
 (func $~lib/typedarray/Uint32Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint32Array#get:length
  call $~lib/util/bytes/REVERSE<u32>
  local.get $this
 )
 (func $~lib/util/bytes/REVERSE<u64> (type $i32_i32_=>_none) (param $ptr i32) (param $len i32)
  (local $i i32)
  (local $tail i32)
  (local $hlen i32)
  (local $5 i32)
  (local $front i32)
  (local $back i32)
  (local $temp i64)
  local.get $len
  i32.const 1
  i32.gt_u
  if
   i32.const 0
   local.set $i
   local.get $len
   i32.const 1
   i32.shr_u
   local.set $hlen
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   i32.const 8
   i32.const 1
   i32.eq
   drop
   i32.const 8
   i32.const 2
   i32.eq
   drop
   local.get $len
   i32.const 1
   i32.sub
   local.set $tail
   loop $while-continue|0
    local.get $i
    local.get $hlen
    i32.lt_u
    local.set $5
    local.get $5
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     local.set $front
     local.get $ptr
     local.get $tail
     local.get $i
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.set $back
     local.get $front
     i64.load $0
     local.set $temp
     local.get $front
     local.get $back
     i64.load $0
     i64.store $0
     local.get $back
     local.get $temp
     i64.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $while-continue|0
    end
   end
  end
 )
 (func $~lib/typedarray/Int64Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int64Array#get:length
  call $~lib/util/bytes/REVERSE<u64>
  local.get $this
 )
 (func $~lib/typedarray/Uint64Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint64Array#get:length
  call $~lib/util/bytes/REVERSE<u64>
  local.get $this
 )
 (func $~lib/util/bytes/REVERSE<f32> (type $i32_i32_=>_none) (param $ptr i32) (param $len i32)
  (local $i i32)
  (local $tail i32)
  (local $hlen i32)
  (local $5 i32)
  (local $front i32)
  (local $back i32)
  (local $temp f32)
  local.get $len
  i32.const 1
  i32.gt_u
  if
   i32.const 0
   local.set $i
   local.get $len
   i32.const 1
   i32.shr_u
   local.set $hlen
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   i32.const 4
   i32.const 1
   i32.eq
   drop
   i32.const 4
   i32.const 2
   i32.eq
   drop
   local.get $len
   i32.const 1
   i32.sub
   local.set $tail
   loop $while-continue|0
    local.get $i
    local.get $hlen
    i32.lt_u
    local.set $5
    local.get $5
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     local.set $front
     local.get $ptr
     local.get $tail
     local.get $i
     i32.sub
     i32.const 2
     i32.shl
     i32.add
     local.set $back
     local.get $front
     f32.load $0
     local.set $temp
     local.get $front
     local.get $back
     f32.load $0
     f32.store $0
     local.get $back
     local.get $temp
     f32.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $while-continue|0
    end
   end
  end
 )
 (func $~lib/typedarray/Float32Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Float32Array#get:length
  call $~lib/util/bytes/REVERSE<f32>
  local.get $this
 )
 (func $~lib/util/bytes/REVERSE<f64> (type $i32_i32_=>_none) (param $ptr i32) (param $len i32)
  (local $i i32)
  (local $tail i32)
  (local $hlen i32)
  (local $5 i32)
  (local $front i32)
  (local $back i32)
  (local $temp f64)
  local.get $len
  i32.const 1
  i32.gt_u
  if
   i32.const 0
   local.set $i
   local.get $len
   i32.const 1
   i32.shr_u
   local.set $hlen
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   i32.const 8
   i32.const 1
   i32.eq
   drop
   i32.const 8
   i32.const 2
   i32.eq
   drop
   local.get $len
   i32.const 1
   i32.sub
   local.set $tail
   loop $while-continue|0
    local.get $i
    local.get $hlen
    i32.lt_u
    local.set $5
    local.get $5
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     local.set $front
     local.get $ptr
     local.get $tail
     local.get $i
     i32.sub
     i32.const 3
     i32.shl
     i32.add
     local.set $back
     local.get $front
     f64.load $0
     local.set $temp
     local.get $front
     local.get $back
     f64.load $0
     f64.store $0
     local.get $back
     local.get $temp
     f64.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     br $while-continue|0
    end
   end
  end
 )
 (func $~lib/typedarray/Float64Array#reverse (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Float64Array#get:length
  call $~lib/util/bytes/REVERSE<f64>
  local.get $this
 )
 (func $~lib/typedarray/Int8Array#indexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Int8Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     local.get $searchElement|4
     i32.extend8_s
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Int8Array#lastIndexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Int8Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     local.get $searchElement|4
     i32.extend8_s
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int8Array,i8>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Int8Array#lastIndexOf@varargs (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Int8Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Int8Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int8Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.extend8_s
    call $~lib/typedarray/Int8Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i32.const 0
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Int8Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Int8Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 10
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -100
  call $~lib/typedarray/Int8Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int8Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int8Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int8Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int8Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int8Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Int8Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Int8Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 100
  call $~lib/typedarray/Int8Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -10
  call $~lib/typedarray/Int8Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -11
  call $~lib/typedarray/Int8Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Int8Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 4
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 9
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 10
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 1
  call $~lib/typedarray/Int8Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 2
  call $~lib/typedarray/Int8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint8Array#indexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint8Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $searchElement|4
     i32.const 255
     i32.and
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint8Array#lastIndexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint8Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $searchElement|4
     i32.const 255
     i32.and
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8Array,u8>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint8Array#lastIndexOf@varargs (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Uint8Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Uint8Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i32.const 0
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 10
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -100
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint8Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Uint8Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Uint8Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 100
  call $~lib/typedarray/Uint8Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -10
  call $~lib/typedarray/Uint8Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -11
  call $~lib/typedarray/Uint8Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Uint8Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 4
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 9
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 10
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 1
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 2
  call $~lib/typedarray/Uint8Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint8ClampedArray#indexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint8ClampedArray#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $searchElement|4
     i32.const 255
     i32.and
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#lastIndexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint8ClampedArray#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.get $searchElement|4
     i32.const 255
     i32.and
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint8ClampedArray,u8>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#lastIndexOf@varargs (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Uint8ClampedArray#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8ClampedArray#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i32.const 0
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 10
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -100
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 100
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -10
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -11
  call $~lib/typedarray/Uint8ClampedArray#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Uint8ClampedArray#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 4
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 9
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 10
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Int16Array#indexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Int16Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.get $searchElement|4
     i32.extend16_s
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Int16Array#lastIndexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Int16Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.get $searchElement|4
     i32.extend16_s
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int16Array,i16>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Int16Array#lastIndexOf@varargs (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Int16Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Int16Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int16Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.extend16_s
    call $~lib/typedarray/Int16Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i32.const 0
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Int16Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Int16Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 10
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -100
  call $~lib/typedarray/Int16Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int16Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int16Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Int16Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Int16Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 100
  call $~lib/typedarray/Int16Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -10
  call $~lib/typedarray/Int16Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -11
  call $~lib/typedarray/Int16Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Int16Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 4
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 9
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 10
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 1
  call $~lib/typedarray/Int16Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 2
  call $~lib/typedarray/Int16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint16Array#indexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint16Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.get $searchElement|4
     i32.const 65535
     i32.and
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint16Array#lastIndexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint16Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.get $searchElement|4
     i32.const 65535
     i32.and
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint16Array,u16>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint16Array#lastIndexOf@varargs (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Uint16Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Uint16Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 65535
    i32.and
    call $~lib/typedarray/Uint16Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i32.const 0
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 10
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -100
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint16Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint16Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint16Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint16Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint16Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Uint16Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Uint16Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 100
  call $~lib/typedarray/Uint16Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -10
  call $~lib/typedarray/Uint16Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -11
  call $~lib/typedarray/Uint16Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Uint16Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 4
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 9
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 10
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 1
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 2
  call $~lib/typedarray/Uint16Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Int32Array#indexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Int32Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $searchElement|4
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Int32Array#lastIndexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Int32Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $searchElement|4
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int32Array,i32>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Int32Array#lastIndexOf@varargs (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Int32Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Int32Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    call $~lib/typedarray/Int32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i32.const 0
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Int32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Int32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 10
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -100
  call $~lib/typedarray/Int32Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int32Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int32Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int32Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int32Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Int32Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Int32Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 100
  call $~lib/typedarray/Int32Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -10
  call $~lib/typedarray/Int32Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -11
  call $~lib/typedarray/Int32Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Int32Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 4
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 9
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 10
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 1
  call $~lib/typedarray/Int32Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 2
  call $~lib/typedarray/Int32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint32Array#indexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint32Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $searchElement|4
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint32Array#lastIndexOf (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint32Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.get $searchElement|4
     i32.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint32Array,u32>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint32Array#lastIndexOf@varargs (type $i32_i32_i32_=>_i32) (param $this i32) (param $searchElement i32) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Uint32Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Uint32Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    call $~lib/typedarray/Uint32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i32.const 0
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 10
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -100
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint32Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint32Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint32Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint32Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint32Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 3
  call $~lib/typedarray/Uint32Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 3
  i32.const 2
  call $~lib/typedarray/Uint32Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const 100
  call $~lib/typedarray/Uint32Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -10
  call $~lib/typedarray/Uint32Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i32.const 1
  i32.const -11
  call $~lib/typedarray/Uint32Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Uint32Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i32.const 3
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 4
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 9
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 10
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 11
  i32.const 0
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 1
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i32.const 5
  i32.const 2
  call $~lib/typedarray/Uint32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Int64Array#indexOf (type $i32_i64_i32_=>_i32) (param $this i32) (param $searchElement i64) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i64)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Int64Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $searchElement|4
     i64.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Int64Array#lastIndexOf (type $i32_i64_i32_=>_i32) (param $this i32) (param $searchElement i64) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i64)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Int64Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $searchElement|4
     i64.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Int64Array,i64>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Int64Array#lastIndexOf@varargs (type $i32_i64_i32_=>_i32) (param $this i32) (param $searchElement i64) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Int64Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Int64Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    call $~lib/typedarray/Int64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i64.const 0
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 11
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const -1
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 2
  call $~lib/typedarray/Int64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 3
  call $~lib/typedarray/Int64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 4
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const 10
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const -100
  call $~lib/typedarray/Int64Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int64Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int64Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int64Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int64Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 4
  call $~lib/typedarray/Int64Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 3
  call $~lib/typedarray/Int64Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 2
  call $~lib/typedarray/Int64Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const 100
  call $~lib/typedarray/Int64Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const -10
  call $~lib/typedarray/Int64Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const -11
  call $~lib/typedarray/Int64Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Int64Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i64.const 3
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 4
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 5
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 9
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 10
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 11
  i32.const 0
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 5
  i32.const 1
  call $~lib/typedarray/Int64Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 5
  i32.const 2
  call $~lib/typedarray/Int64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Uint64Array#indexOf (type $i32_i64_i32_=>_i32) (param $this i32) (param $searchElement i64) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i64)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint64Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $searchElement|4
     i64.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint64Array#lastIndexOf (type $i32_i64_i32_=>_i32) (param $this i32) (param $searchElement i64) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 i64)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Uint64Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.get $searchElement|4
     i64.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Uint64Array,u64>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Uint64Array#lastIndexOf@varargs (type $i32_i64_i32_=>_i32) (param $this i32) (param $searchElement i64) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Uint64Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Uint64Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    call $~lib/typedarray/Uint64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  i64.const 0
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 11
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const -1
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 2
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 3
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 4
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const 10
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const -100
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint64Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint64Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint64Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint64Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 4
  call $~lib/typedarray/Uint64Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 3
  call $~lib/typedarray/Uint64Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 3
  i32.const 2
  call $~lib/typedarray/Uint64Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const 100
  call $~lib/typedarray/Uint64Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const -10
  call $~lib/typedarray/Uint64Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  i64.const 1
  i32.const -11
  call $~lib/typedarray/Uint64Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Uint64Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  i64.const 3
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 4
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 5
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 9
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 10
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 11
  i32.const 0
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 5
  i32.const 1
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  i64.const 5
  i32.const 2
  call $~lib/typedarray/Uint64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Float32Array#indexOf (type $i32_f32_i32_=>_i32) (param $this i32) (param $searchElement f32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 f32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Float32Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.get $searchElement|4
     f32.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Float32Array#lastIndexOf (type $i32_f32_i32_=>_i32) (param $this i32) (param $searchElement f32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 f32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Float32Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.get $searchElement|4
     f32.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float32Array,f32>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Float32Array#lastIndexOf@varargs (type $i32_f32_i32_=>_i32) (param $this i32) (param $searchElement f32) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Float32Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Float32Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Float32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    f32.convert_i32_s
    call $~lib/typedarray/Float32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  f32.const 0
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 11
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const -1
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 3
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 3
  i32.const 2
  call $~lib/typedarray/Float32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 3
  i32.const 3
  call $~lib/typedarray/Float32Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 3
  i32.const 4
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 1
  i32.const 10
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 1
  i32.const -100
  call $~lib/typedarray/Float32Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float32Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float32Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float32Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float32Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 3
  i32.const 4
  call $~lib/typedarray/Float32Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 3
  i32.const 3
  call $~lib/typedarray/Float32Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 3
  i32.const 2
  call $~lib/typedarray/Float32Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 1
  i32.const 100
  call $~lib/typedarray/Float32Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 1
  i32.const -10
  call $~lib/typedarray/Float32Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f32.const 1
  i32.const -11
  call $~lib/typedarray/Float32Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Float32Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  f32.const 3
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f32.const 4
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f32.const 5
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f32.const 9
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f32.const 10
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f32.const 11
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f32.const 5
  i32.const 1
  call $~lib/typedarray/Float32Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f32.const 5
  i32.const 2
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Float64Array#indexOf (type $i32_f64_i32_=>_i32) (param $this i32) (param $searchElement f64) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 f64)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  block $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Float64Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const -1
    br $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.get $searchElement|4
     f64.eq
     if
      local.get $index
      br $~lib/typedarray/INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Float64Array#lastIndexOf (type $i32_f64_i32_=>_i32) (param $this i32) (param $searchElement f64) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 f64)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $dataStart i32)
  (local $9 i32)
  block $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Float64Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if
    i32.const -1
    br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.set $index
   else
    local.get $index
    local.get $len
    i32.ge_s
    if
     local.get $len
     i32.const 1
     i32.sub
     local.set $index
    end
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    i32.const 0
    i32.ge_s
    local.set $9
    local.get $9
    if
     local.get $dataStart
     local.get $index
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.get $searchElement|4
     f64.eq
     if
      local.get $index
      br $~lib/typedarray/LAST_INDEX_OF<~lib/typedarray/Float64Array,f64>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.sub
     local.set $index
     br $while-continue|0
    end
   end
   i32.const -1
  end
 )
 (func $~lib/typedarray/Float64Array#lastIndexOf@varargs (type $i32_f64_i32_=>_i32) (param $this i32) (param $searchElement f64) (param $fromIndex i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   local.get $this
   call $~lib/typedarray/Float64Array#get:length
   local.set $fromIndex
  end
  local.get $this
  local.get $searchElement
  local.get $fromIndex
  call $~lib/typedarray/Float64Array#lastIndexOf
 )
 (func $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $sliced i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Float64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    f64.convert_i32_s
    call $~lib/typedarray/Float64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  f64.const 0
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 11
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const -1
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 3
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 3
  i32.const 2
  call $~lib/typedarray/Float64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 3
  i32.const 3
  call $~lib/typedarray/Float64Array#indexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 3
  i32.const 4
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 1
  i32.const 10
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 1
  i32.const -100
  call $~lib/typedarray/Float64Array#indexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float64Array#lastIndexOf@varargs
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 11
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float64Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const -1
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float64Array#lastIndexOf@varargs
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 3
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float64Array#lastIndexOf@varargs
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 3
  i32.const 4
  call $~lib/typedarray/Float64Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 3
  i32.const 3
  call $~lib/typedarray/Float64Array#lastIndexOf
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 3
  i32.const 2
  call $~lib/typedarray/Float64Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 1
  i32.const 100
  call $~lib/typedarray/Float64Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 1
  i32.const -10
  call $~lib/typedarray/Float64Array#lastIndexOf
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $array
  f64.const 1
  i32.const -11
  call $~lib/typedarray/Float64Array#lastIndexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.const 4
  i32.const 9
  call $~lib/typedarray/Float64Array#subarray
  local.tee $sliced
  i32.store $0 offset=8
  local.get $sliced
  f64.const 3
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f64.const 4
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const 4
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f64.const 5
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f64.const 9
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f64.const 10
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f64.const 11
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f64.const 5
  i32.const 1
  call $~lib/typedarray/Float64Array#indexOf
  i32.const 5
  i32.const 4
  i32.sub
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $sliced
  f64.const 5
  i32.const 2
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/typedarray/Float64Array#includes (type $i32_f64_i32_=>_i32) (param $this i32) (param $searchElement f64) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 f64)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  (local $elem f64)
  block $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   i32.const 1
   drop
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Float64Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const 0
    br $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 3
     i32.shl
     i32.add
     f64.load $0
     local.set $elem
     local.get $elem
     local.get $searchElement|4
     f64.eq
     if (result i32)
      i32.const 1
     else
      local.get $elem
      local.get $elem
      f64.ne
      local.get $searchElement|4
      local.get $searchElement|4
      f64.ne
      i32.and
     end
     if
      i32.const 1
      br $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const 0
   br $~lib/typedarray/INCLUDES<~lib/typedarray/Float64Array,f64>|inlined.0
  end
 )
 (func $~lib/typedarray/Float32Array#includes (type $i32_f32_i32_=>_i32) (param $this i32) (param $searchElement f32) (param $fromIndex i32) (result i32)
  (local $array i32)
  (local $searchElement|4 f32)
  (local $fromIndex|5 i32)
  (local $index i32)
  (local $len i32)
  (local $8 i32)
  (local $9 i32)
  (local $dataStart i32)
  (local $11 i32)
  (local $elem f32)
  block $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0 (result i32)
   local.get $this
   local.set $array
   local.get $searchElement
   local.set $searchElement|4
   local.get $fromIndex
   local.set $fromIndex|5
   i32.const 1
   drop
   local.get $fromIndex|5
   local.set $index
   local.get $array
   call $~lib/typedarray/Float32Array#get:length
   local.set $len
   local.get $len
   i32.const 0
   i32.eq
   if (result i32)
    i32.const 1
   else
    local.get $index
    local.get $len
    i32.ge_s
   end
   if
    i32.const 0
    br $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0
   end
   local.get $index
   i32.const 0
   i32.lt_s
   if
    local.get $len
    local.get $index
    i32.add
    local.tee $8
    i32.const 0
    local.tee $9
    local.get $8
    local.get $9
    i32.gt_s
    select
    local.set $index
   end
   local.get $array
   i32.load $0 offset=4
   local.set $dataStart
   loop $while-continue|0
    local.get $index
    local.get $len
    i32.lt_s
    local.set $11
    local.get $11
    if
     local.get $dataStart
     local.get $index
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $elem
     local.get $elem
     local.get $searchElement|4
     f32.eq
     if (result i32)
      i32.const 1
     else
      local.get $elem
      local.get $elem
      f32.ne
      local.get $searchElement|4
      local.get $searchElement|4
      f32.ne
      i32.and
     end
     if
      i32.const 1
      br $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0
     end
     local.get $index
     i32.const 1
     i32.add
     local.set $index
     br $while-continue|0
    end
   end
   i32.const 0
   br $~lib/typedarray/INCLUDES<~lib/typedarray/Float32Array,f32>|inlined.0
  end
 )
 (func $~lib/arraybuffer/ArrayBuffer#get:byteLength (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.const 20
  i32.sub
  i32.load $0 offset=16
 )
 (func $~lib/typedarray/Uint8Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Uint8Array.wrap
 )
 (func $~lib/typedarray/Int8Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Int8Array.wrap
 )
 (func $~lib/typedarray/Uint8ClampedArray.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Uint8ClampedArray.wrap
 )
 (func $~lib/typedarray/Int16Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Int16Array.wrap
 )
 (func $~lib/typedarray/Uint16Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Uint16Array.wrap
 )
 (func $~lib/typedarray/Int32Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Int32Array.wrap
 )
 (func $~lib/typedarray/Uint32Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Uint32Array.wrap
 )
 (func $~lib/typedarray/Int64Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Int64Array.wrap
 )
 (func $~lib/typedarray/Uint64Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Uint64Array.wrap
 )
 (func $~lib/typedarray/Float32Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Float32Array.wrap
 )
 (func $~lib/typedarray/Float64Array.wrap@varargs (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  block $2of2
   block $1of2
    block $0of2
     block $outOfRange
      global.get $~argumentsLength
      i32.const 1
      i32.sub
      br_table $0of2 $1of2 $2of2 $outOfRange
     end
     unreachable
    end
    i32.const 0
    local.set $byteOffset
   end
   i32.const -1
   local.set $length
  end
  local.get $buffer
  local.get $byteOffset
  local.get $length
  call $~lib/typedarray/Float64Array.wrap
 )
 (func $~lib/typedarray/Int8Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int8Array#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_s $0
 )
 (func $~lib/array/Array<i8>#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 0
  i32.shl
  i32.add
  i32.load8_s $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Int8Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i32)
  (local $valb i32)
  local.get $target
  call $~lib/typedarray/Int8Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<i8>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Int8Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<i8>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i32.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/array/Array<f32>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Int8Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f32_s
    else
     i32.const 0
    end
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int8Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 3
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.wrap_i64
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/array/Array<f64>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Int8Array#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f64_s
    else
     i32.const 0
    end
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int8Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 0
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Int8Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int8Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 0
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/array/Array<u8>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Uint8Array#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_u $0
 )
 (func $~lib/array/Array<u8>#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 0
  i32.shl
  i32.add
  i32.load8_u $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Uint8Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i32)
  (local $valb i32)
  local.get $target
  call $~lib/typedarray/Uint8Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<u8>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Uint8Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<u8>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i32.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f32_u
    else
     i32.const 0
    end
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 3
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.wrap_i64
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f64_u
    else
     i32.const 0
    end
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 0
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 0
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 1
    i32.eqz
    drop
    i32.const 1
    i32.const 4
    i32.le_u
    drop
    local.get $ptr
    local.get $value
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.const 255
    local.get $value
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $value
    i32.or
    i32.and
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.add
  i32.load8_u $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Uint8ClampedArray> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i32)
  (local $valb i32)
  local.get $target
  call $~lib/typedarray/Uint8ClampedArray#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<u8>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Uint8ClampedArray#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<u8>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i32.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 1
    drop
    i32.const 1
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i32)
     f32.const 0
     f32.const 255
     local.get $value
     f32.min
     f32.max
     i32.trunc_sat_f32_u
    else
     i32.const 0
    end
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 3
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 1
    i32.eqz
    drop
    i32.const 1
    i32.const 4
    i32.le_u
    drop
    local.get $ptr
    local.get $value
    i32.wrap_i64
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i64.extend_i32_s
    i32.const 255
    local.get $value
    i32.wrap_i64
    i32.sub
    i32.const 31
    i32.shr_s
    i64.extend_i32_s
    local.get $value
    i64.or
    i64.and
    i64.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 1
    drop
    i32.const 1
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i32)
     f64.const 0
     f64.const 255
     local.get $value
     f64.min
     f64.max
     i32.trunc_sat_f64_u
    else
     i32.const 0
    end
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 0
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 1
    i32.eqz
    drop
    i32.const 1
    i32.const 4
    i32.le_u
    drop
    local.get $ptr
    local.get $value
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.const 255
    local.get $value
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $value
    i32.or
    i32.and
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.eqz
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 1
    i32.eqz
    drop
    i32.const 1
    i32.const 4
    i32.le_u
    drop
    local.get $ptr
    local.get $value
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.const 255
    local.get $value
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $value
    i32.or
    i32.and
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int16Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/array/Array<i16>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Int16Array#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
 )
 (func $~lib/array/Array<i16>#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Int16Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i32)
  (local $valb i32)
  local.get $target
  call $~lib/typedarray/Int16Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<i16>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Int16Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<i16>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i32.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int16Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f32_s
    else
     i32.const 0
    end
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int16Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 3
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.wrap_i64
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int16Array#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f64_s
    else
     i32.const 0
    end
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int16Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int16Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 1
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Int16Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/array/Array<u16>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Uint16Array#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
 )
 (func $~lib/array/Array<u16>#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Uint16Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i32)
  (local $valb i32)
  local.get $target
  call $~lib/typedarray/Uint16Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<u16>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Uint16Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<u16>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i32.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f32_u
    else
     i32.const 0
    end
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 3
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.wrap_i64
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f64_u
    else
     i32.const 0
    end
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 1
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Uint16Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint16Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 1
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 2
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Int32Array#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
 )
 (func $~lib/array/Array<i32>#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Int32Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i32)
  (local $valb i32)
  local.get $target
  call $~lib/typedarray/Int32Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<i32>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Int32Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<i32>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i32.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f32_s
    else
     i32.const 0
    end
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 2
  i32.const 3
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.wrap_i64
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f64_s
    else
     i32.const 0
    end
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 2
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 2
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int32Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 2
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 2
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/array/Array<u32>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Uint32Array#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
 )
 (func $~lib/array/Array<u32>#__uget (type $i32_i32_=>_i32) (param $this i32) (param $index i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Uint32Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i32)
  (local $valb i32)
  local.get $target
  call $~lib/typedarray/Uint32Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<u32>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Uint32Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<u32>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i32.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f32_u
    else
     i32.const 0
    end
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 2
  i32.const 3
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.wrap_i64
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i32)
     local.get $value
     i32.trunc_sat_f64_u
    else
     i32.const 0
    end
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 2
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 2
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint32Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 2
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int64Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i64.extend_i32_s
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/array/Array<i64>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Int64Array#__uget (type $i32_i32_=>_i64) (param $this i32) (param $index i32) (result i64)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
 )
 (func $~lib/array/Array<i64>#__uget (type $i32_i32_=>_i64) (param $this i32) (param $index i32) (result i64)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Int64Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i64)
  (local $valb i64)
  local.get $target
  call $~lib/typedarray/Int64Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<i64>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Int64Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<i64>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i64.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int64Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i64)
     local.get $value
     i64.trunc_sat_f32_s
    else
     i64.const 0
    end
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int64Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 3
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Int64Array#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i64)
     local.get $value
     i64.trunc_sat_f64_s
    else
     i64.const 0
    end
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int64Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i64.extend_i32_u
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int64Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i64.extend_i32_s
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Int64Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Int64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i64.extend_i32_s
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i64.extend_i32_s
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/array/Array<u64>#get:length (type $i32_=>_i32) (param $this i32) (result i32)
  local.get $this
  i32.load $0 offset=12
 )
 (func $~lib/typedarray/Uint64Array#__uget (type $i32_i32_=>_i64) (param $this i32) (param $index i32) (result i64)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
 )
 (func $~lib/array/Array<u64>#__uget (type $i32_i32_=>_i64) (param $this i32) (param $index i32) (result i64)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Uint64Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala i64)
  (local $valb i64)
  local.get $target
  call $~lib/typedarray/Uint64Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<u64>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Uint64Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<u64>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    i64.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i64)
     local.get $value
     i64.trunc_sat_f32_u
    else
     i64.const 0
    end
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 3
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/array/Array<f64>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f64>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f64.sub
    f64.const 0
    f64.eq
    if (result i64)
     local.get $value
     i64.trunc_sat_f64_u
    else
     i64.const 0
    end
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i64.extend_i32_u
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i64.extend_i32_s
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint64Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    i64.extend_i32_s
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float32Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f32.convert_i32_s
    f32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float32Array#__uget (type $i32_i32_=>_f32) (param $this i32) (param $index i32) (result f32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
 )
 (func $~lib/array/Array<f32>#__uget (type $i32_i32_=>_f32) (param $this i32) (param $index i32) (result f32)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Float32Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala f32)
  (local $valb f32)
  local.get $target
  call $~lib/typedarray/Float32Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<f32>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Float32Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<f32>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    f32.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float32Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.eqz
  drop
  local.get $targetStart
  local.get $sourceStart
  local.get $sourceLen
  i32.const 2
  i32.shl
  memory.copy $0 $0
 )
 (func $~lib/typedarray/Float32Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f32.convert_i64_s
    f32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float32Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f32.convert_i32_u
    f32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float32Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f32.convert_i32_s
    f32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float32Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float32Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 2
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f32.convert_i32_s
    f32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float64Array#set<~lib/array/Array<i32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f64.convert_i32_s
    f64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float64Array#__uget (type $i32_i32_=>_f64) (param $this i32) (param $index i32) (result f64)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
 )
 (func $~lib/array/Array<f64>#__uget (type $i32_i32_=>_f64) (param $this i32) (param $index i32) (result f64)
  local.get $this
  i32.load $0 offset=4
  local.get $index
  i32.const 3
  i32.shl
  i32.add
  f64.load $0
 )
 (func $std/typedarray/valuesEqual<~lib/typedarray/Float64Array> (type $i32_i32_=>_none) (param $target i32) (param $compare i32)
  (local $len i32)
  (local $i i32)
  (local $4 i32)
  (local $vala f64)
  (local $valb f64)
  local.get $target
  call $~lib/typedarray/Float64Array#get:length
  local.set $len
  local.get $len
  local.get $compare
  call $~lib/array/Array<f64>#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $target
    local.get $i
    call $~lib/typedarray/Float64Array#__uget
    local.set $vala
    local.get $compare
    local.get $i
    call $~lib/array/Array<f64>#__uget
    local.set $valb
    local.get $vala
    local.get $valb
    f64.ne
    if
     i32.const 0
     i32.eqz
     if
      unreachable
     end
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float64Array#set<~lib/array/Array<f32>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<f32>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 3
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 1
    i32.eqz
    drop
    local.get $ptr
    local.get $value
    f64.promote_f32
    f64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float64Array#set<~lib/typedarray/Int64Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i64)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int64Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f64.convert_i64_s
    f64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float64Array#set<~lib/typedarray/Uint8Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint8Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f64.convert_i32_u
    f64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float64Array#set<~lib/typedarray/Int16Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int16Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f64.convert_i32_s
    f64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Float64Array#set<~lib/array/Array<i8>> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/array/Array<i8>#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Float64Array#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 3
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 1
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    i32.const 0
    drop
    i32.const 0
    drop
    local.get $ptr
    local.get $value
    f64.convert_i32_s
    f64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Float32Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value f32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Float32Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 1
  i32.const 0
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    i32.const 1
    drop
    i32.const 1
    drop
    local.get $ptr
    local.get $value
    local.get $value
    f32.sub
    f32.const 0
    f32.eq
    if (result i32)
     f32.const 0
     f32.const 255
     local.get $value
     f32.min
     f32.max
     i32.trunc_sat_f32_u
    else
     i32.const 0
    end
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Int32Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Int32Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 1
    i32.eqz
    drop
    i32.const 1
    i32.const 4
    i32.le_u
    drop
    local.get $ptr
    local.get $value
    i32.const 31
    i32.shr_s
    i32.const -1
    i32.xor
    i32.const 255
    local.get $value
    i32.sub
    i32.const 31
    i32.shr_s
    local.get $value
    i32.or
    i32.and
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Uint32Array> (type $i32_i32_i32_=>_none) (param $this i32) (param $source i32) (param $offset i32)
  (local $target i32)
  (local $source|4 i32)
  (local $offset|5 i32)
  (local $sourceLen i32)
  (local $targetStart i32)
  (local $sourceStart i32)
  (local $i i32)
  (local $10 i32)
  (local $ptr i32)
  (local $value i32)
  (local $13 i32)
  (local $14 i32)
  local.get $this
  local.set $target
  local.get $source
  local.set $source|4
  local.get $offset
  local.set $offset|5
  i32.const 0
  drop
  local.get $source|4
  call $~lib/typedarray/Uint32Array#get:length
  local.set $sourceLen
  local.get $offset|5
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $sourceLen
   local.get $offset|5
   i32.add
   local.get $target
   call $~lib/typedarray/Uint8ClampedArray#get:length
   i32.gt_s
  end
  if
   unreachable
  end
  local.get $target
  i32.load $0 offset=4
  local.get $offset|5
  i32.const 0
  i32.shl
  i32.add
  local.set $targetStart
  local.get $source|4
  i32.load $0 offset=4
  local.set $sourceStart
  i32.const 0
  i32.const 2
  i32.eq
  drop
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $sourceLen
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $targetStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.set $ptr
    local.get $sourceStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 0
    i32.eqz
    drop
    local.get $ptr
    i32.const 255
    local.tee $13
    local.get $value
    local.tee $14
    local.get $13
    local.get $14
    i32.lt_u
    select
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/insertionSort<i8> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a i32)
  (local $b i32)
  (local $min i32)
  (local $max i32)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0 offset=1
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 0
       i32.shl
       i32.add
       i32.load8_s $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 0
        i32.shl
        i32.add
        local.get $a
        i32.store8 $0 offset=2
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 0
    i32.shl
    i32.add
    local.get $max
    i32.store8 $0 offset=2
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 0
       i32.shl
       i32.add
       i32.load8_s $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 0
        i32.shl
        i32.add
        local.get $a
        i32.store8 $0 offset=1
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 0
    i32.shl
    i32.add
    local.get $min
    i32.store8 $0 offset=1
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i8> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp i32)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 0
  i32.shl
  i32.add
  i32.load8_s $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 0
  i32.shl
  i32.add
  i32.load8_s $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0 offset=1
     local.get $ptr
     local.get $j
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     i32.store8 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 0
     i32.shl
     i32.add
     local.get $tmp
     i32.store8 $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0 offset=1
     local.get $ptr
     local.get $j
     i32.const 0
     i32.shl
     i32.add
     i32.load8_s $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<i8> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a i32)
  (local $b i32)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 0
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 0
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0 offset=1
    i32.store8 $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 0
     i32.shl
     i32.add
     local.get $a
     i32.store8 $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 0
     i32.shl
     i32.add
     local.get $b
     i32.store8 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i8> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a i32)
  (local $b i32)
  (local $c i32)
  (local $a|7 i32)
  (local $b|8 i32)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     i32.load8_s $0
     local.set $a
     local.get $ptr
     i32.load8_s $0 offset=1
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store8 $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     i32.load8_s $0 offset=2
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store8 $0 offset=1
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     i32.store8 $0 offset=2
    end
    local.get $ptr
    i32.load8_s $0
    local.set $a|7
    local.get $ptr
    i32.load8_s $0 offset=1
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    i32.store8 $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    i32.store8 $0 offset=1
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<i8>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 0
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<i8>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<i8>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<i8>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<i8>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<i8>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<i8>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Int8Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int8Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<i8>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<i8>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $a
  i32.extend8_s
  local.get $b
  i32.extend8_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $b
  i32.extend8_s
  local.get $a
  i32.extend8_s
  i32.gt_s
  local.get $b
  i32.extend8_s
  local.get $a
  i32.extend8_s
  i32.lt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u8> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a i32)
  (local $b i32)
  (local $min i32)
  (local $max i32)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0 offset=1
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 0
       i32.shl
       i32.add
       i32.load8_u $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 0
        i32.shl
        i32.add
        local.get $a
        i32.store8 $0 offset=2
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 0
    i32.shl
    i32.add
    local.get $max
    i32.store8 $0 offset=2
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 0
       i32.shl
       i32.add
       i32.load8_u $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 0
        i32.shl
        i32.add
        local.get $a
        i32.store8 $0 offset=1
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 0
    i32.shl
    i32.add
    local.get $min
    i32.store8 $0 offset=1
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u8> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp i32)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 0
  i32.shl
  i32.add
  i32.load8_u $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 0
  i32.shl
  i32.add
  i32.load8_u $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0 offset=1
     local.get $ptr
     local.get $j
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 0
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     i32.store8 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 0
     i32.shl
     i32.add
     local.get $tmp
     i32.store8 $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0 offset=1
     local.get $ptr
     local.get $j
     i32.const 0
     i32.shl
     i32.add
     i32.load8_u $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<u8> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a i32)
  (local $b i32)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 0
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 0
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0 offset=1
    i32.store8 $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 0
     i32.shl
     i32.add
     local.get $a
     i32.store8 $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 0
     i32.shl
     i32.add
     local.get $b
     i32.store8 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u8> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a i32)
  (local $b i32)
  (local $c i32)
  (local $a|7 i32)
  (local $b|8 i32)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     i32.load8_u $0
     local.set $a
     local.get $ptr
     i32.load8_u $0 offset=1
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store8 $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     i32.load8_u $0 offset=2
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store8 $0 offset=1
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     i32.store8 $0 offset=2
    end
    local.get $ptr
    i32.load8_u $0
    local.set $a|7
    local.get $ptr
    i32.load8_u $0 offset=1
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    i32.store8 $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    i32.store8 $0 offset=1
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<u8>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 0
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<u8>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<u8>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<u8>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<u8>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<u8>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<u8>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Uint8Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint8Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<u8>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<u8>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $a
  i32.const 255
  i32.and
  local.get $b
  i32.const 255
  i32.and
  i32.gt_u
  local.get $a
  i32.const 255
  i32.and
  local.get $b
  i32.const 255
  i32.and
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $b
  i32.const 255
  i32.and
  local.get $a
  i32.const 255
  i32.and
  i32.gt_u
  local.get $b
  i32.const 255
  i32.and
  local.get $a
  i32.const 255
  i32.and
  i32.lt_u
  i32.sub
 )
 (func $~lib/typedarray/Uint8ClampedArray#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint8ClampedArray#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<u8>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<u8>~anonymous|1 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $a
  i32.const 255
  i32.and
  local.get $b
  i32.const 255
  i32.and
  i32.gt_u
  local.get $a
  i32.const 255
  i32.and
  local.get $b
  i32.const 255
  i32.and
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $b
  i32.const 255
  i32.and
  local.get $a
  i32.const 255
  i32.and
  i32.gt_u
  local.get $b
  i32.const 255
  i32.and
  local.get $a
  i32.const 255
  i32.and
  i32.lt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i16> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a i32)
  (local $b i32)
  (local $min i32)
  (local $max i32)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0 offset=2
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 1
       i32.shl
       i32.add
       i32.load16_s $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 1
        i32.shl
        i32.add
        local.get $a
        i32.store16 $0 offset=4
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 1
    i32.shl
    i32.add
    local.get $max
    i32.store16 $0 offset=4
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 1
       i32.shl
       i32.add
       i32.load16_s $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 1
        i32.shl
        i32.add
        local.get $a
        i32.store16 $0 offset=2
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 1
    i32.shl
    i32.add
    local.get $min
    i32.store16 $0 offset=2
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i16> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp i32)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 1
  i32.shl
  i32.add
  i32.load16_s $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0 offset=2
     local.get $ptr
     local.get $j
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     i32.store16 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 1
     i32.shl
     i32.add
     local.get $tmp
     i32.store16 $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0 offset=2
     local.get $ptr
     local.get $j
     i32.const 1
     i32.shl
     i32.add
     i32.load16_s $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<i16> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a i32)
  (local $b i32)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0 offset=2
    i32.store16 $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 1
     i32.shl
     i32.add
     local.get $a
     i32.store16 $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 1
     i32.shl
     i32.add
     local.get $b
     i32.store16 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i16> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a i32)
  (local $b i32)
  (local $c i32)
  (local $a|7 i32)
  (local $b|8 i32)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     i32.load16_s $0
     local.set $a
     local.get $ptr
     i32.load16_s $0 offset=2
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store16 $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     i32.load16_s $0 offset=4
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store16 $0 offset=2
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     i32.store16 $0 offset=4
    end
    local.get $ptr
    i32.load16_s $0
    local.set $a|7
    local.get $ptr
    i32.load16_s $0 offset=2
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    i32.store16 $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    i32.store16 $0 offset=2
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<i16>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<i16>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<i16>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<i16>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<i16>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<i16>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<i16>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Int16Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int16Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<i16>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<i16>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $a
  i32.extend16_s
  local.get $b
  i32.extend16_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $b
  i32.extend16_s
  local.get $a
  i32.extend16_s
  i32.gt_s
  local.get $b
  i32.extend16_s
  local.get $a
  i32.extend16_s
  i32.lt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u16> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a i32)
  (local $b i32)
  (local $min i32)
  (local $max i32)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0 offset=2
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 1
       i32.shl
       i32.add
       i32.load16_u $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 1
        i32.shl
        i32.add
        local.get $a
        i32.store16 $0 offset=4
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 1
    i32.shl
    i32.add
    local.get $max
    i32.store16 $0 offset=4
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 1
       i32.shl
       i32.add
       i32.load16_u $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 1
        i32.shl
        i32.add
        local.get $a
        i32.store16 $0 offset=2
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 1
    i32.shl
    i32.add
    local.get $min
    i32.store16 $0 offset=2
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u16> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp i32)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0 offset=2
     local.get $ptr
     local.get $j
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 1
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.store16 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 1
     i32.shl
     i32.add
     local.get $tmp
     i32.store16 $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0 offset=2
     local.get $ptr
     local.get $j
     i32.const 1
     i32.shl
     i32.add
     i32.load16_u $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<u16> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a i32)
  (local $b i32)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 1
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0 offset=2
    i32.store16 $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 1
     i32.shl
     i32.add
     local.get $a
     i32.store16 $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 1
     i32.shl
     i32.add
     local.get $b
     i32.store16 $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u16> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a i32)
  (local $b i32)
  (local $c i32)
  (local $a|7 i32)
  (local $b|8 i32)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     i32.load16_u $0
     local.set $a
     local.get $ptr
     i32.load16_u $0 offset=2
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store16 $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     i32.load16_u $0 offset=4
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store16 $0 offset=2
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     i32.store16 $0 offset=4
    end
    local.get $ptr
    i32.load16_u $0
    local.set $a|7
    local.get $ptr
    i32.load16_u $0 offset=2
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    i32.store16 $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    i32.store16 $0 offset=2
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<u16>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<u16>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<u16>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<u16>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<u16>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<u16>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<u16>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Uint16Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint16Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<u16>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<u16>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $a
  i32.const 65535
  i32.and
  local.get $b
  i32.const 65535
  i32.and
  i32.gt_u
  local.get $a
  i32.const 65535
  i32.and
  local.get $b
  i32.const 65535
  i32.and
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $b
  i32.const 65535
  i32.and
  local.get $a
  i32.const 65535
  i32.and
  i32.gt_u
  local.get $b
  i32.const 65535
  i32.and
  local.get $a
  i32.const 65535
  i32.and
  i32.lt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i32> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a i32)
  (local $b i32)
  (local $min i32)
  (local $max i32)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 2
        i32.shl
        i32.add
        local.get $a
        i32.store $0 offset=8
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    local.get $max
    i32.store $0 offset=8
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 2
        i32.shl
        i32.add
        local.get $a
        i32.store $0 offset=4
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    local.get $min
    i32.store $0 offset=4
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i32> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp i32)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     i32.load $0 offset=4
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $tmp
     i32.store $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     i32.load $0 offset=4
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<i32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a i32)
  (local $b i32)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    i32.store $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $a
     i32.store $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $b
     i32.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i32> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a i32)
  (local $b i32)
  (local $c i32)
  (local $a|7 i32)
  (local $b|8 i32)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     i32.load $0
     local.set $a
     local.get $ptr
     i32.load $0 offset=4
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     i32.load $0 offset=8
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store $0 offset=4
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     i32.store $0 offset=8
    end
    local.get $ptr
    i32.load $0
    local.set $a|7
    local.get $ptr
    i32.load $0 offset=4
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    i32.store $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    i32.store $0 offset=4
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<i32>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<i32>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<i32>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<i32>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<i32>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<i32>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<i32>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Int32Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int32Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<i32>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<i32>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $a
  local.get $b
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $b
  local.get $a
  i32.gt_s
  local.get $b
  local.get $a
  i32.lt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u32> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a i32)
  (local $b i32)
  (local $min i32)
  (local $max i32)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 2
        i32.shl
        i32.add
        local.get $a
        i32.store $0 offset=8
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    local.get $max
    i32.store $0 offset=8
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i32_i32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 2
        i32.shl
        i32.add
        local.get $a
        i32.store $0 offset=4
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    local.get $min
    i32.store $0 offset=4
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u32> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp i32)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 2
  i32.shl
  i32.add
  i32.load $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $i32_i32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     i32.load $0 offset=4
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $tmp
     i32.store $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     i32.load $0 offset=4
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<u32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a i32)
  (local $b i32)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    i32.store $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    i32.load $0 offset=4
    i32.store $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $a
     i32.store $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $b
     i32.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u32> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a i32)
  (local $b i32)
  (local $c i32)
  (local $a|7 i32)
  (local $b|8 i32)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     i32.load $0
     local.set $a
     local.get $ptr
     i32.load $0 offset=4
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     i32.load $0 offset=8
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i32_i32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i32.store $0 offset=4
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     i32.store $0 offset=8
    end
    local.get $ptr
    i32.load $0
    local.set $a|7
    local.get $ptr
    i32.load $0 offset=4
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i32_i32_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    i32.store $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    i32.store $0 offset=4
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<u32>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<u32>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<u32>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<u32>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<u32>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<u32>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<u32>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Uint32Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint32Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<u32>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<u32>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $a
  local.get $b
  i32.gt_u
  local.get $a
  local.get $b
  i32.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_=>_i32) (param $a i32) (param $b i32) (result i32)
  local.get $b
  local.get $a
  i32.gt_u
  local.get $b
  local.get $a
  i32.lt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<i64> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a i64)
  (local $b i64)
  (local $min i64)
  (local $max i64)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0 offset=8
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 3
        i32.shl
        i32.add
        local.get $a
        i64.store $0 offset=16
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    local.get $max
    i64.store $0 offset=16
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 3
        i32.shl
        i32.add
        local.get $a
        i64.store $0 offset=8
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    local.get $min
    i64.store $0 offset=8
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<i64> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp i64)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $i64_i64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     i64.load $0 offset=8
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $tmp
     i64.store $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     i64.load $0 offset=8
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<i64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a i64)
  (local $b i64)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    i64.load $0 offset=8
    i64.store $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $a
     i64.store $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $b
     i64.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<i64> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a i64)
  (local $b i64)
  (local $c i32)
  (local $a|7 i64)
  (local $b|8 i64)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     i64.load $0
     local.set $a
     local.get $ptr
     i64.load $0 offset=8
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i64.store $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     i64.load $0 offset=16
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i64.store $0 offset=8
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     i64.store $0 offset=16
    end
    local.get $ptr
    i64.load $0
    local.set $a|7
    local.get $ptr
    i64.load $0 offset=8
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    i64.store $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    i64.store $0 offset=8
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<i64>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<i64>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<i64>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<i64>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<i64>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<i64>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<i64>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Int64Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Int64Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<i64>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<i64>~anonymous|0 (type $i64_i64_=>_i32) (param $a i64) (param $b i64) (result i32)
  local.get $a
  local.get $b
  i64.gt_s
  local.get $a
  local.get $b
  i64.lt_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i64_=>_i32) (param $a i64) (param $b i64) (result i32)
  local.get $b
  local.get $a
  i64.gt_s
  local.get $b
  local.get $a
  i64.lt_s
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<u64> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a i64)
  (local $b i64)
  (local $min i64)
  (local $max i64)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0 offset=8
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 3
        i32.shl
        i32.add
        local.get $a
        i64.store $0 offset=16
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    local.get $max
    i64.store $0 offset=16
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 3
       i32.shl
       i32.add
       i64.load $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $i64_i64_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 3
        i32.shl
        i32.add
        local.get $a
        i64.store $0 offset=8
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    local.get $min
    i64.store $0 offset=8
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<u64> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp i64)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 3
  i32.shl
  i32.add
  i64.load $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $i64_i64_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     i64.load $0 offset=8
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 3
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i64.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $tmp
     i64.store $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     i64.load $0 offset=8
     local.get $ptr
     local.get $j
     i32.const 3
     i32.shl
     i32.add
     i64.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<u64> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a i64)
  (local $b i64)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    i64.store $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    i64.load $0 offset=8
    i64.store $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $a
     i64.store $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 3
     i32.shl
     i32.add
     local.get $b
     i64.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<u64> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a i64)
  (local $b i64)
  (local $c i32)
  (local $a|7 i64)
  (local $b|8 i64)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     i64.load $0
     local.set $a
     local.get $ptr
     i64.load $0 offset=8
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i64.store $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     i64.load $0 offset=16
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $i64_i64_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     i64.store $0 offset=8
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     i64.store $0 offset=16
    end
    local.get $ptr
    i64.load $0
    local.set $a|7
    local.get $ptr
    i64.load $0 offset=8
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $i64_i64_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    i64.store $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    i64.store $0 offset=8
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<u64>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 3
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<u64>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<u64>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<u64>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<u64>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<u64>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<u64>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Uint64Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Uint64Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<u64>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<u64>~anonymous|0 (type $i64_i64_=>_i32) (param $a i64) (param $b i64) (result i32)
  local.get $a
  local.get $b
  i64.gt_u
  local.get $a
  local.get $b
  i64.lt_u
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i64_=>_i32) (param $a i64) (param $b i64) (result i32)
  local.get $b
  local.get $a
  i64.gt_u
  local.get $b
  local.get $a
  i64.lt_u
  i32.sub
 )
 (func $~lib/util/sort/insertionSort<f32> (type $i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $left i32) (param $right i32) (param $presorted i32) (param $comparator i32)
  (local $range i32)
  (local $i i32)
  (local $7 i32)
  (local $a f32)
  (local $b f32)
  (local $min f32)
  (local $max f32)
  (local $j i32)
  (local $13 i32)
  (local $14 i32)
  i32.const 0
  i32.const 1
  i32.ge_s
  drop
  local.get $right
  local.get $left
  i32.sub
  i32.const 1
  i32.add
  local.set $range
  local.get $left
  local.get $range
  i32.const 1
  i32.and
  local.get $presorted
  local.get $range
  local.get $presorted
  i32.sub
  i32.const 1
  i32.and
  i32.sub
  local.get $presorted
  i32.const 0
  i32.eq
  select
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $right
   i32.le_s
   local.set $7
   local.get $7
   if
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $a
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0 offset=4
    local.set $b
    local.get $b
    local.set $min
    local.get $a
    local.set $max
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.le_s
    if
     local.get $a
     local.set $min
     local.get $b
     local.set $max
    end
    local.get $i
    i32.const 1
    i32.sub
    local.set $j
    block $while-break|1
     loop $while-continue|1
      local.get $j
      local.get $left
      i32.ge_s
      local.set $13
      local.get $13
      if
       local.get $ptr
       local.get $j
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       local.set $a
       local.get $a
       local.get $max
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $f32_f32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 2
        i32.shl
        i32.add
        local.get $a
        f32.store $0 offset=8
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|1
       end
       br $while-continue|1
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    local.get $max
    f32.store $0 offset=8
    block $while-break|2
     loop $while-continue|2
      local.get $j
      local.get $left
      i32.ge_s
      local.set $14
      local.get $14
      if
       local.get $ptr
       local.get $j
       i32.const 2
       i32.shl
       i32.add
       f32.load $0
       local.set $a
       local.get $a
       local.get $min
       i32.const 2
       global.set $~argumentsLength
       local.get $comparator
       i32.load $0
       call_indirect $0 (type $f32_f32_=>_i32)
       i32.const 0
       i32.gt_s
       if
        local.get $ptr
        local.get $j
        i32.const 2
        i32.shl
        i32.add
        local.get $a
        f32.store $0 offset=4
        local.get $j
        i32.const 1
        i32.sub
        local.set $j
       else
        br $while-break|2
       end
       br $while-continue|2
      end
     end
    end
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    local.get $min
    f32.store $0 offset=4
    local.get $i
    i32.const 2
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
 )
 (func $~lib/util/sort/extendRunRight<f32> (type $i32_i32_i32_i32_=>_i32) (param $ptr i32) (param $i i32) (param $right i32) (param $comparator i32) (result i32)
  (local $j i32)
  (local $5 i32)
  (local $k i32)
  (local $7 i32)
  (local $tmp f32)
  (local $9 i32)
  local.get $i
  local.get $right
  i32.eq
  if
   local.get $i
   return
  end
  local.get $i
  local.set $j
  local.get $ptr
  local.get $j
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  local.get $ptr
  local.get $j
  i32.const 1
  i32.add
  local.tee $j
  i32.const 2
  i32.shl
  i32.add
  f32.load $0
  i32.const 2
  global.set $~argumentsLength
  local.get $comparator
  i32.load $0
  call_indirect $0 (type $f32_f32_=>_i32)
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     f32.load $0 offset=4
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 31
     i32.shr_u
    else
     i32.const 0
    end
    local.set $5
    local.get $5
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|0
    end
   end
   local.get $j
   local.set $k
   loop $while-continue|1
    local.get $i
    local.get $k
    i32.lt_s
    local.set $7
    local.get $7
    if
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     local.set $tmp
     local.get $ptr
     local.get $i
     i32.const 2
     i32.shl
     i32.add
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     f32.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $tmp
     f32.store $0
     local.get $k
     i32.const 1
     i32.sub
     local.set $k
     br $while-continue|1
    end
   end
  else
   loop $while-continue|2
    local.get $j
    local.get $right
    i32.lt_s
    if (result i32)
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     f32.load $0 offset=4
     local.get $ptr
     local.get $j
     i32.const 2
     i32.shl
     i32.add
     f32.load $0
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.ge_s
    else
     i32.const 0
    end
    local.set $9
    local.get $9
    if
     local.get $j
     i32.const 1
     i32.add
     local.set $j
     br $while-continue|2
    end
   end
  end
  local.get $j
 )
 (func $~lib/util/sort/mergeRuns<f32> (type $i32_i32_i32_i32_i32_i32_=>_none) (param $ptr i32) (param $l i32) (param $m i32) (param $r i32) (param $buffer i32) (param $comparator i32)
  (local $i i32)
  (local $j i32)
  (local $t i32)
  (local $9 i32)
  (local $10 i32)
  (local $k i32)
  (local $12 i32)
  (local $a f32)
  (local $b f32)
  local.get $m
  i32.const 1
  i32.sub
  local.set $m
  local.get $r
  local.get $m
  i32.add
  local.set $t
  local.get $m
  i32.const 1
  i32.add
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $l
   i32.gt_s
   local.set $9
   local.get $9
   if
    local.get $buffer
    local.get $i
    i32.const 1
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    f32.store $0
    local.get $i
    i32.const 1
    i32.sub
    local.set $i
    br $for-loop|0
   end
  end
  local.get $m
  local.set $j
  loop $for-loop|1
   local.get $j
   local.get $r
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buffer
    local.get $t
    local.get $j
    i32.sub
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    f32.load $0 offset=4
    f32.store $0
    local.get $j
    i32.const 1
    i32.add
    local.set $j
    br $for-loop|1
   end
  end
  local.get $l
  local.set $k
  loop $for-loop|2
   local.get $k
   local.get $r
   i32.le_s
   local.set $12
   local.get $12
   if
    local.get $buffer
    local.get $j
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $a
    local.get $buffer
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $b
    local.get $a
    local.get $b
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.lt_s
    if
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $a
     f32.store $0
     local.get $j
     i32.const 1
     i32.sub
     local.set $j
    else
     local.get $ptr
     local.get $k
     i32.const 2
     i32.shl
     i32.add
     local.get $b
     f32.store $0
     local.get $i
     i32.const 1
     i32.add
     local.set $i
    end
    local.get $k
    i32.const 1
    i32.add
    local.set $k
    br $for-loop|2
   end
  end
 )
 (func $~lib/util/sort/SORT<f32> (type $i32_i32_i32_=>_none) (param $ptr i32) (param $len i32) (param $comparator i32)
  (local $3 i32)
  (local $a f32)
  (local $b f32)
  (local $c i32)
  (local $a|7 f32)
  (local $b|8 f32)
  (local $c|9 i32)
  (local $n i32)
  (local $lgPlus2 i32)
  (local $lgPlus2Size i32)
  (local $leftRunStartBuf i32)
  (local $leftRunEndBuf i32)
  (local $i i32)
  (local $16 i32)
  (local $buffer i32)
  (local $hi i32)
  (local $endA i32)
  (local $lenA i32)
  (local $21 i32)
  (local $22 i32)
  (local $top i32)
  (local $startA i32)
  (local $25 i32)
  (local $startB i32)
  (local $endB i32)
  (local $lenB i32)
  (local $29 i32)
  (local $30 i32)
  (local $k i32)
  (local $i|32 i32)
  (local $33 i32)
  (local $start i32)
  (local $i|35 i32)
  (local $36 i32)
  (local $start|37 i32)
  local.get $len
  i32.const 48
  i32.le_s
  if
   local.get $len
   i32.const 1
   i32.le_s
   if
    return
   end
   i32.const 0
   i32.const 1
   i32.lt_s
   drop
   block $break|0
    block $case1|0
     block $case0|0
      local.get $len
      local.set $3
      local.get $3
      i32.const 3
      i32.eq
      br_if $case0|0
      local.get $3
      i32.const 2
      i32.eq
      br_if $case1|0
      br $break|0
     end
     local.get $ptr
     f32.load $0
     local.set $a
     local.get $ptr
     f32.load $0 offset=4
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     f32.store $0
     local.get $a
     local.get $b
     local.get $c
     select
     local.set $a
     local.get $ptr
     f32.load $0 offset=8
     local.set $b
     local.get $a
     local.get $b
     i32.const 2
     global.set $~argumentsLength
     local.get $comparator
     i32.load $0
     call_indirect $0 (type $f32_f32_=>_i32)
     i32.const 0
     i32.gt_s
     local.set $c
     local.get $ptr
     local.get $b
     local.get $a
     local.get $c
     select
     f32.store $0 offset=4
     local.get $ptr
     local.get $a
     local.get $b
     local.get $c
     select
     f32.store $0 offset=8
    end
    local.get $ptr
    f32.load $0
    local.set $a|7
    local.get $ptr
    f32.load $0 offset=4
    local.set $b|8
    local.get $a|7
    local.get $b|8
    i32.const 2
    global.set $~argumentsLength
    local.get $comparator
    i32.load $0
    call_indirect $0 (type $f32_f32_=>_i32)
    i32.const 0
    i32.gt_s
    local.set $c|9
    local.get $ptr
    local.get $b|8
    local.get $a|7
    local.get $c|9
    select
    f32.store $0
    local.get $ptr
    local.get $a|7
    local.get $b|8
    local.get $c|9
    select
    f32.store $0 offset=4
    return
   end
   local.get $ptr
   i32.const 0
   local.get $len
   i32.const 1
   i32.sub
   i32.const 0
   local.get $comparator
   call $~lib/util/sort/insertionSort<f32>
   return
  end
  local.get $len
  local.set $n
  i32.const 31
  local.get $n
  i32.clz
  i32.sub
  i32.const 2
  i32.add
  local.set $lgPlus2
  local.get $lgPlus2
  i32.const 2
  i32.shl
  local.set $lgPlus2Size
  local.get $lgPlus2Size
  i32.const 1
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $leftRunStartBuf
  local.get $leftRunStartBuf
  local.get $lgPlus2Size
  i32.add
  local.set $leftRunEndBuf
  i32.const 0
  local.set $i
  loop $for-loop|1
   local.get $i
   local.get $lgPlus2
   i32.lt_u
   local.set $16
   local.get $16
   if
    local.get $leftRunStartBuf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.const -1
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|1
   end
  end
  local.get $len
  i32.const 2
  i32.shl
  call $~lib/rt/tlsf/__alloc
  local.set $buffer
  local.get $len
  i32.const 1
  i32.sub
  local.set $hi
  local.get $ptr
  i32.const 0
  local.get $hi
  local.get $comparator
  call $~lib/util/sort/extendRunRight<f32>
  local.set $endA
  local.get $endA
  i32.const 1
  i32.add
  local.set $lenA
  local.get $lenA
  i32.const 32
  i32.lt_s
  if
   local.get $hi
   local.tee $21
   i32.const 32
   i32.const 1
   i32.sub
   local.tee $22
   local.get $21
   local.get $22
   i32.lt_s
   select
   local.set $endA
   local.get $ptr
   i32.const 0
   local.get $endA
   local.get $lenA
   local.get $comparator
   call $~lib/util/sort/insertionSort<f32>
  end
  i32.const 0
  local.set $top
  i32.const 0
  local.set $startA
  loop $while-continue|2
   local.get $endA
   local.get $hi
   i32.lt_s
   local.set $25
   local.get $25
   if
    local.get $endA
    i32.const 1
    i32.add
    local.set $startB
    local.get $ptr
    local.get $startB
    local.get $hi
    local.get $comparator
    call $~lib/util/sort/extendRunRight<f32>
    local.set $endB
    local.get $endB
    local.get $startB
    i32.sub
    i32.const 1
    i32.add
    local.set $lenB
    local.get $lenB
    i32.const 32
    i32.lt_s
    if
     local.get $hi
     local.tee $29
     local.get $startB
     i32.const 32
     i32.add
     i32.const 1
     i32.sub
     local.tee $30
     local.get $29
     local.get $30
     i32.lt_s
     select
     local.set $endB
     local.get $ptr
     local.get $startB
     local.get $endB
     local.get $lenB
     local.get $comparator
     call $~lib/util/sort/insertionSort<f32>
    end
    i32.const 0
    local.get $hi
    local.get $startA
    local.get $startB
    local.get $endB
    call $~lib/util/sort/nodePower
    local.set $k
    local.get $top
    local.set $i|32
    loop $for-loop|3
     local.get $i|32
     local.get $k
     i32.gt_u
     local.set $33
     local.get $33
     if
      local.get $leftRunStartBuf
      local.get $i|32
      i32.const 2
      i32.shl
      i32.add
      i32.load $0
      local.set $start
      local.get $start
      i32.const -1
      i32.ne
      if
       local.get $ptr
       local.get $start
       local.get $leftRunEndBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.load $0
       i32.const 1
       i32.add
       local.get $endA
       local.get $buffer
       local.get $comparator
       call $~lib/util/sort/mergeRuns<f32>
       local.get $start
       local.set $startA
       local.get $leftRunStartBuf
       local.get $i|32
       i32.const 2
       i32.shl
       i32.add
       i32.const -1
       i32.store $0
      end
      local.get $i|32
      i32.const 1
      i32.sub
      local.set $i|32
      br $for-loop|3
     end
    end
    local.get $leftRunStartBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $startA
    i32.store $0
    local.get $leftRunEndBuf
    local.get $k
    i32.const 2
    i32.shl
    i32.add
    local.get $endA
    i32.store $0
    local.get $startB
    local.set $startA
    local.get $endB
    local.set $endA
    local.get $k
    local.set $top
    br $while-continue|2
   end
  end
  local.get $top
  local.set $i|35
  loop $for-loop|4
   local.get $i|35
   i32.const 0
   i32.ne
   local.set $36
   local.get $36
   if
    local.get $leftRunStartBuf
    local.get $i|35
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $start|37
    local.get $start|37
    i32.const -1
    i32.ne
    if
     local.get $ptr
     local.get $start|37
     local.get $leftRunEndBuf
     local.get $i|35
     i32.const 2
     i32.shl
     i32.add
     i32.load $0
     i32.const 1
     i32.add
     local.get $hi
     local.get $buffer
     local.get $comparator
     call $~lib/util/sort/mergeRuns<f32>
    end
    local.get $i|35
    i32.const 1
    i32.sub
    local.set $i|35
    br $for-loop|4
   end
  end
  local.get $buffer
  call $~lib/rt/tlsf/__free
  local.get $leftRunStartBuf
  call $~lib/rt/tlsf/__free
 )
 (func $~lib/typedarray/Float32Array#sort (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  local.get $this
  i32.load $0 offset=4
  local.get $this
  call $~lib/typedarray/Float32Array#get:length
  local.get $comparator
  call $~lib/util/sort/SORT<f32>
  local.get $this
 )
 (func $~lib/util/sort/COMPARATOR<f32>~anonymous|0 (type $f32_f32_=>_i32) (param $a f32) (param $b f32) (result i32)
  (local $ia i32)
  (local $ib i32)
  local.get $a
  i32.reinterpret_f32
  local.set $ia
  local.get $b
  i32.reinterpret_f32
  local.set $ib
  local.get $ia
  local.get $ia
  i32.const 31
  i32.shr_s
  i32.const 1
  i32.shr_u
  i32.xor
  local.set $ia
  local.get $ib
  local.get $ib
  i32.const 31
  i32.shr_s
  i32.const 1
  i32.shr_u
  i32.xor
  local.set $ib
  local.get $ia
  local.get $ib
  i32.gt_s
  local.get $ia
  local.get $ib
  i32.lt_s
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_f32_=>_i32) (param $a f32) (param $b f32) (result i32)
  local.get $b
  local.get $a
  f32.gt
  local.get $b
  local.get $a
  f32.lt
  i32.sub
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_f64_=>_i32) (param $a f64) (param $b f64) (result i32)
  local.get $b
  local.get $a
  f64.gt
  local.get $b
  local.get $a
  f64.lt
  i32.sub
 )
 (func $~lib/rt/itcms/__collect (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  i32.const 0
  drop
  global.get $~lib/rt/itcms/state
  i32.const 0
  i32.gt_s
  if
   loop $while-continue|0
    global.get $~lib/rt/itcms/state
    i32.const 0
    i32.ne
    local.set $0
    local.get $0
    if
     call $~lib/rt/itcms/step
     drop
     br $while-continue|0
    end
   end
  end
  call $~lib/rt/itcms/step
  drop
  loop $while-continue|1
   global.get $~lib/rt/itcms/state
   i32.const 0
   i32.ne
   local.set $1
   local.get $1
   if
    call $~lib/rt/itcms/step
    drop
    br $while-continue|1
   end
  end
  global.get $~lib/rt/itcms/total
  i64.extend_i32_u
  i32.const 200
  i64.extend_i32_u
  i64.mul
  i64.const 100
  i64.div_u
  i32.wrap_i64
  i32.const 1024
  i32.add
  global.set $~lib/rt/itcms/threshold
  i32.const 0
  drop
  i32.const 0
  drop
 )
 (func $~lib/rt/__visit_globals (type $i32_=>_none) (param $0 i32)
  (local $1 i32)
  global.get $std/typedarray/forEachValues
  local.tee $1
  if
   local.get $1
   local.get $0
   call $~lib/rt/itcms/__visit
  end
  global.get $std/typedarray/testArrayReverseValues
  local.tee $1
  if
   local.get $1
   local.get $0
   call $~lib/rt/itcms/__visit
  end
  global.get $std/typedarray/testArrayIndexOfAndLastIndexOfValues
  local.tee $1
  if
   local.get $1
   local.get $0
   call $~lib/rt/itcms/__visit
  end
  global.get $std/typedarray/testArrayWrapValues
  local.tee $1
  if
   local.get $1
   local.get $0
   call $~lib/rt/itcms/__visit
  end
  global.get $std/typedarray/setSource1
  local.tee $1
  if
   local.get $1
   local.get $0
   call $~lib/rt/itcms/__visit
  end
  global.get $std/typedarray/setSource2
  local.tee $1
  if
   local.get $1
   local.get $0
   call $~lib/rt/itcms/__visit
  end
  global.get $std/typedarray/setSource3
  local.tee $1
  if
   local.get $1
   local.get $0
   call $~lib/rt/itcms/__visit
  end
  global.get $std/typedarray/setSource7
  local.tee $1
  if
   local.get $1
   local.get $0
   call $~lib/rt/itcms/__visit
  end
  i32.const 192
  local.get $0
  call $~lib/rt/itcms/__visit
  i32.const 32
  local.get $0
  call $~lib/rt/itcms/__visit
  i32.const 80
  local.get $0
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/arraybuffer/ArrayBufferView~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  i32.load $0
  local.tee $2
  if
   local.get $2
   local.get $1
   call $~lib/rt/itcms/__visit
  end
 )
 (func $~lib/typedarray/Int8Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Uint8Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Uint8ClampedArray~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Int16Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Uint16Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Int32Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Uint32Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Int64Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Uint64Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Float32Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/typedarray/Float64Array~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView~visit
 )
 (func $~lib/function/Function<%28f64%2Cf64%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f64%2Cf64%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f64%2Cf64%29=>i32>#__visit
 )
 (func $~lib/array/Array<i8>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<i8>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<i8>#__visit
 )
 (func $~lib/array/Array<i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<i32>#__visit
 )
 (func $~lib/function/Function<%28i8%2Ci8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i8%2Ci8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i8%2Ci8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>#__visit
 )
 (func $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>#__visit
 )
 (func $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>#__visit
 )
 (func $~lib/function/Function<%28i16%2Ci16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i16%2Ci16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i16%2Ci16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>#__visit
 )
 (func $~lib/function/Function<%28u16%2Cu16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u16%2Cu16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u16%2Cu16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>#__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i32%2Ci32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28u32%2Cu32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u32%2Cu32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u32%2Cu32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>#__visit
 )
 (func $~lib/function/Function<%28i64%2Ci64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i64%2Ci64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i64%2Ci64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>#__visit
 )
 (func $~lib/function/Function<%28u64%2Cu64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u64%2Cu64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u64%2Cu64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>#__visit
 )
 (func $~lib/function/Function<%28f32%2Cf32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f32%2Cf32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f32%2Cf32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>#__visit
 )
 (func $~lib/function/Function<%28f64%2Cf64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f64%2Cf64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f64%2Cf64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>#__visit
 )
 (func $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>#__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>#__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>#__visit
 )
 (func $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>#__visit
 )
 (func $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>#__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>#__visit
 )
 (func $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>#__visit
 )
 (func $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>#__visit
 )
 (func $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>#__visit
 )
 (func $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>#__visit
 )
 (func $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>bool>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>bool>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>bool>#__visit
 )
 (func $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>void>#__visit
 )
 (func $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>void>#__visit
 )
 (func $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>void>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>void>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>void>#__visit
 )
 (func $~lib/array/Array<f32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<f32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<f32>#__visit
 )
 (func $~lib/array/Array<f64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<f64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<f64>#__visit
 )
 (func $~lib/array/Array<u8>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<u8>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<u8>#__visit
 )
 (func $~lib/array/Array<i16>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<i16>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<i16>#__visit
 )
 (func $~lib/array/Array<u16>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<u16>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<u16>#__visit
 )
 (func $~lib/array/Array<u32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<u32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<u32>#__visit
 )
 (func $~lib/array/Array<i64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<i64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<i64>#__visit
 )
 (func $~lib/array/Array<u64>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  i32.const 0
  drop
  local.get $this
  i32.load $0
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/array/Array<u64>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/array/Array<u64>#__visit
 )
 (func $~lib/function/Function<%28i8%2Ci8%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i8%2Ci8%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i8%2Ci8%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28u8%2Cu8%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u8%2Cu8%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u8%2Cu8%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28i16%2Ci16%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i16%2Ci16%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i16%2Ci16%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28u16%2Cu16%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u16%2Cu16%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u16%2Cu16%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i32%2Ci32%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i32%2Ci32%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28u32%2Cu32%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u32%2Cu32%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u32%2Cu32%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28i64%2Ci64%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28i64%2Ci64%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28i64%2Ci64%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28u64%2Cu64%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28u64%2Cu64%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28u64%2Cu64%29=>i32>#__visit
 )
 (func $~lib/function/Function<%28f32%2Cf32%29=>i32>#__visit (type $i32_i32_=>_none) (param $this i32) (param $cookie i32)
  local.get $this
  i32.load $0 offset=4
  local.get $cookie
  call $~lib/rt/itcms/__visit
 )
 (func $~lib/function/Function<%28f32%2Cf32%29=>i32>~visit (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $~lib/function/Function<%28f32%2Cf32%29=>i32>#__visit
 )
 (func $~lib/rt/__visit_members (type $i32_i32_=>_none) (param $0 i32) (param $1 i32)
  block $invalid
   block $~lib/function/Function<%28f32%2Cf32%29=>i32>
    block $~lib/function/Function<%28u64%2Cu64%29=>i32>
     block $~lib/function/Function<%28i64%2Ci64%29=>i32>
      block $~lib/function/Function<%28u32%2Cu32%29=>i32>
       block $~lib/function/Function<%28i32%2Ci32%29=>i32>
        block $~lib/function/Function<%28u16%2Cu16%29=>i32>
         block $~lib/function/Function<%28i16%2Ci16%29=>i32>
          block $~lib/function/Function<%28u8%2Cu8%29=>i32>
           block $~lib/function/Function<%28i8%2Ci8%29=>i32>
            block $~lib/array/Array<u64>
             block $~lib/array/Array<i64>
              block $~lib/array/Array<u32>
               block $~lib/array/Array<u16>
                block $~lib/array/Array<i16>
                 block $~lib/array/Array<u8>
                  block $~lib/array/Array<f64>
                   block $~lib/array/Array<f32>
                    block $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>void>
                     block $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>void>
                      block $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>void>
                       block $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>void>
                        block $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>void>
                         block $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>void>
                          block $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>void>
                           block $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>void>
                            block $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>void>
                             block $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>void>
                              block $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>void>
                               block $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>bool>
                                block $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>bool>
                                 block $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>bool>
                                  block $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>bool>
                                   block $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>bool>
                                    block $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>bool>
                                     block $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>bool>
                                      block $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>bool>
                                       block $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>bool>
                                        block $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>bool>
                                         block $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>bool>
                                          block $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>
                                           block $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>
                                            block $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>
                                             block $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>
                                              block $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>
                                               block $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>
                                                block $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>
                                                 block $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>
                                                  block $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>
                                                   block $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>
                                                    block $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>
                                                     block $~lib/function/Function<%28f64%2Cf64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>
                                                      block $~lib/function/Function<%28f32%2Cf32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>
                                                       block $~lib/function/Function<%28u64%2Cu64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>
                                                        block $~lib/function/Function<%28i64%2Ci64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>
                                                         block $~lib/function/Function<%28u32%2Cu32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>
                                                          block $~lib/function/Function<%28i32%2Ci32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>
                                                           block $~lib/function/Function<%28u16%2Cu16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>
                                                            block $~lib/function/Function<%28i16%2Ci16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>
                                                             block $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>
                                                              block $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>
                                                               block $~lib/function/Function<%28i8%2Ci8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>
                                                                block $~lib/array/Array<i32>
                                                                 block $~lib/array/Array<i8>
                                                                  block $~lib/function/Function<%28f64%2Cf64%29=>i32>
                                                                   block $~lib/typedarray/Float64Array
                                                                    block $~lib/typedarray/Float32Array
                                                                     block $~lib/typedarray/Uint64Array
                                                                      block $~lib/typedarray/Int64Array
                                                                       block $~lib/typedarray/Uint32Array
                                                                        block $~lib/typedarray/Int32Array
                                                                         block $~lib/typedarray/Uint16Array
                                                                          block $~lib/typedarray/Int16Array
                                                                           block $~lib/typedarray/Uint8ClampedArray
                                                                            block $~lib/typedarray/Uint8Array
                                                                             block $~lib/typedarray/Int8Array
                                                                              block $~lib/arraybuffer/ArrayBufferView
                                                                               block $~lib/string/String
                                                                                block $~lib/arraybuffer/ArrayBuffer
                                                                                 local.get $0
                                                                                 i32.const 8
                                                                                 i32.sub
                                                                                 i32.load $0
                                                                                 br_table $~lib/arraybuffer/ArrayBuffer $~lib/string/String $~lib/arraybuffer/ArrayBufferView $~lib/typedarray/Int8Array $~lib/typedarray/Uint8Array $~lib/typedarray/Uint8ClampedArray $~lib/typedarray/Int16Array $~lib/typedarray/Uint16Array $~lib/typedarray/Int32Array $~lib/typedarray/Uint32Array $~lib/typedarray/Int64Array $~lib/typedarray/Uint64Array $~lib/typedarray/Float32Array $~lib/typedarray/Float64Array $~lib/function/Function<%28f64%2Cf64%29=>i32> $~lib/array/Array<i8> $~lib/array/Array<i32> $~lib/function/Function<%28i8%2Ci8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8> $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8> $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8> $~lib/function/Function<%28i16%2Ci16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16> $~lib/function/Function<%28u16%2Cu16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16> $~lib/function/Function<%28i32%2Ci32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32> $~lib/function/Function<%28u32%2Cu32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32> $~lib/function/Function<%28i64%2Ci64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64> $~lib/function/Function<%28u64%2Cu64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64> $~lib/function/Function<%28f32%2Cf32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32> $~lib/function/Function<%28f64%2Cf64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64> $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8> $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8> $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8> $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16> $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16> $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32> $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32> $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64> $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64> $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32> $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64> $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>bool> $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>bool> $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>bool> $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>bool> $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>bool> $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>bool> $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>bool> $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>bool> $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>bool> $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>bool> $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>bool> $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>void> $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>void> $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>void> $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>void> $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>void> $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>void> $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>void> $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>void> $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>void> $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>void> $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>void> $~lib/array/Array<f32> $~lib/array/Array<f64> $~lib/array/Array<u8> $~lib/array/Array<i16> $~lib/array/Array<u16> $~lib/array/Array<u32> $~lib/array/Array<i64> $~lib/array/Array<u64> $~lib/function/Function<%28i8%2Ci8%29=>i32> $~lib/function/Function<%28u8%2Cu8%29=>i32> $~lib/function/Function<%28i16%2Ci16%29=>i32> $~lib/function/Function<%28u16%2Cu16%29=>i32> $~lib/function/Function<%28i32%2Ci32%29=>i32> $~lib/function/Function<%28u32%2Cu32%29=>i32> $~lib/function/Function<%28i64%2Ci64%29=>i32> $~lib/function/Function<%28u64%2Cu64%29=>i32> $~lib/function/Function<%28f32%2Cf32%29=>i32> $invalid
                                                                                end
                                                                                return
                                                                               end
                                                                               return
                                                                              end
                                                                              local.get $0
                                                                              local.get $1
                                                                              call $~lib/arraybuffer/ArrayBufferView~visit
                                                                              return
                                                                             end
                                                                             local.get $0
                                                                             local.get $1
                                                                             call $~lib/typedarray/Int8Array~visit
                                                                             return
                                                                            end
                                                                            local.get $0
                                                                            local.get $1
                                                                            call $~lib/typedarray/Uint8Array~visit
                                                                            return
                                                                           end
                                                                           local.get $0
                                                                           local.get $1
                                                                           call $~lib/typedarray/Uint8ClampedArray~visit
                                                                           return
                                                                          end
                                                                          local.get $0
                                                                          local.get $1
                                                                          call $~lib/typedarray/Int16Array~visit
                                                                          return
                                                                         end
                                                                         local.get $0
                                                                         local.get $1
                                                                         call $~lib/typedarray/Uint16Array~visit
                                                                         return
                                                                        end
                                                                        local.get $0
                                                                        local.get $1
                                                                        call $~lib/typedarray/Int32Array~visit
                                                                        return
                                                                       end
                                                                       local.get $0
                                                                       local.get $1
                                                                       call $~lib/typedarray/Uint32Array~visit
                                                                       return
                                                                      end
                                                                      local.get $0
                                                                      local.get $1
                                                                      call $~lib/typedarray/Int64Array~visit
                                                                      return
                                                                     end
                                                                     local.get $0
                                                                     local.get $1
                                                                     call $~lib/typedarray/Uint64Array~visit
                                                                     return
                                                                    end
                                                                    local.get $0
                                                                    local.get $1
                                                                    call $~lib/typedarray/Float32Array~visit
                                                                    return
                                                                   end
                                                                   local.get $0
                                                                   local.get $1
                                                                   call $~lib/typedarray/Float64Array~visit
                                                                   return
                                                                  end
                                                                  local.get $0
                                                                  local.get $1
                                                                  call $~lib/function/Function<%28f64%2Cf64%29=>i32>~visit
                                                                  return
                                                                 end
                                                                 local.get $0
                                                                 local.get $1
                                                                 call $~lib/array/Array<i8>~visit
                                                                 return
                                                                end
                                                                local.get $0
                                                                local.get $1
                                                                call $~lib/array/Array<i32>~visit
                                                                return
                                                               end
                                                               local.get $0
                                                               local.get $1
                                                               call $~lib/function/Function<%28i8%2Ci8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>~visit
                                                               return
                                                              end
                                                              local.get $0
                                                              local.get $1
                                                              call $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>~visit
                                                              return
                                                             end
                                                             local.get $0
                                                             local.get $1
                                                             call $~lib/function/Function<%28u8%2Cu8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>~visit
                                                             return
                                                            end
                                                            local.get $0
                                                            local.get $1
                                                            call $~lib/function/Function<%28i16%2Ci16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>~visit
                                                            return
                                                           end
                                                           local.get $0
                                                           local.get $1
                                                           call $~lib/function/Function<%28u16%2Cu16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>~visit
                                                           return
                                                          end
                                                          local.get $0
                                                          local.get $1
                                                          call $~lib/function/Function<%28i32%2Ci32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>~visit
                                                          return
                                                         end
                                                         local.get $0
                                                         local.get $1
                                                         call $~lib/function/Function<%28u32%2Cu32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>~visit
                                                         return
                                                        end
                                                        local.get $0
                                                        local.get $1
                                                        call $~lib/function/Function<%28i64%2Ci64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>~visit
                                                        return
                                                       end
                                                       local.get $0
                                                       local.get $1
                                                       call $~lib/function/Function<%28u64%2Cu64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>~visit
                                                       return
                                                      end
                                                      local.get $0
                                                      local.get $1
                                                      call $~lib/function/Function<%28f32%2Cf32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>~visit
                                                      return
                                                     end
                                                     local.get $0
                                                     local.get $1
                                                     call $~lib/function/Function<%28f64%2Cf64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>~visit
                                                     return
                                                    end
                                                    local.get $0
                                                    local.get $1
                                                    call $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>i8>~visit
                                                    return
                                                   end
                                                   local.get $0
                                                   local.get $1
                                                   call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>u8>~visit
                                                   return
                                                  end
                                                  local.get $0
                                                  local.get $1
                                                  call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>u8>~visit
                                                  return
                                                 end
                                                 local.get $0
                                                 local.get $1
                                                 call $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>i16>~visit
                                                 return
                                                end
                                                local.get $0
                                                local.get $1
                                                call $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>u16>~visit
                                                return
                                               end
                                               local.get $0
                                               local.get $1
                                               call $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>i32>~visit
                                               return
                                              end
                                              local.get $0
                                              local.get $1
                                              call $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>u32>~visit
                                              return
                                             end
                                             local.get $0
                                             local.get $1
                                             call $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>i64>~visit
                                             return
                                            end
                                            local.get $0
                                            local.get $1
                                            call $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>u64>~visit
                                            return
                                           end
                                           local.get $0
                                           local.get $1
                                           call $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>f32>~visit
                                           return
                                          end
                                          local.get $0
                                          local.get $1
                                          call $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>f64>~visit
                                          return
                                         end
                                         local.get $0
                                         local.get $1
                                         call $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>bool>~visit
                                         return
                                        end
                                        local.get $0
                                        local.get $1
                                        call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>bool>~visit
                                        return
                                       end
                                       local.get $0
                                       local.get $1
                                       call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>bool>~visit
                                       return
                                      end
                                      local.get $0
                                      local.get $1
                                      call $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>bool>~visit
                                      return
                                     end
                                     local.get $0
                                     local.get $1
                                     call $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>bool>~visit
                                     return
                                    end
                                    local.get $0
                                    local.get $1
                                    call $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>bool>~visit
                                    return
                                   end
                                   local.get $0
                                   local.get $1
                                   call $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>bool>~visit
                                   return
                                  end
                                  local.get $0
                                  local.get $1
                                  call $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>bool>~visit
                                  return
                                 end
                                 local.get $0
                                 local.get $1
                                 call $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>bool>~visit
                                 return
                                end
                                local.get $0
                                local.get $1
                                call $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>bool>~visit
                                return
                               end
                               local.get $0
                               local.get $1
                               call $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>bool>~visit
                               return
                              end
                              local.get $0
                              local.get $1
                              call $~lib/function/Function<%28i8%2Ci32%2C~lib/typedarray/Int8Array%29=>void>~visit
                              return
                             end
                             local.get $0
                             local.get $1
                             call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8Array%29=>void>~visit
                             return
                            end
                            local.get $0
                            local.get $1
                            call $~lib/function/Function<%28u8%2Ci32%2C~lib/typedarray/Uint8ClampedArray%29=>void>~visit
                            return
                           end
                           local.get $0
                           local.get $1
                           call $~lib/function/Function<%28i16%2Ci32%2C~lib/typedarray/Int16Array%29=>void>~visit
                           return
                          end
                          local.get $0
                          local.get $1
                          call $~lib/function/Function<%28u16%2Ci32%2C~lib/typedarray/Uint16Array%29=>void>~visit
                          return
                         end
                         local.get $0
                         local.get $1
                         call $~lib/function/Function<%28i32%2Ci32%2C~lib/typedarray/Int32Array%29=>void>~visit
                         return
                        end
                        local.get $0
                        local.get $1
                        call $~lib/function/Function<%28u32%2Ci32%2C~lib/typedarray/Uint32Array%29=>void>~visit
                        return
                       end
                       local.get $0
                       local.get $1
                       call $~lib/function/Function<%28i64%2Ci32%2C~lib/typedarray/Int64Array%29=>void>~visit
                       return
                      end
                      local.get $0
                      local.get $1
                      call $~lib/function/Function<%28u64%2Ci32%2C~lib/typedarray/Uint64Array%29=>void>~visit
                      return
                     end
                     local.get $0
                     local.get $1
                     call $~lib/function/Function<%28f32%2Ci32%2C~lib/typedarray/Float32Array%29=>void>~visit
                     return
                    end
                    local.get $0
                    local.get $1
                    call $~lib/function/Function<%28f64%2Ci32%2C~lib/typedarray/Float64Array%29=>void>~visit
                    return
                   end
                   local.get $0
                   local.get $1
                   call $~lib/array/Array<f32>~visit
                   return
                  end
                  local.get $0
                  local.get $1
                  call $~lib/array/Array<f64>~visit
                  return
                 end
                 local.get $0
                 local.get $1
                 call $~lib/array/Array<u8>~visit
                 return
                end
                local.get $0
                local.get $1
                call $~lib/array/Array<i16>~visit
                return
               end
               local.get $0
               local.get $1
               call $~lib/array/Array<u16>~visit
               return
              end
              local.get $0
              local.get $1
              call $~lib/array/Array<u32>~visit
              return
             end
             local.get $0
             local.get $1
             call $~lib/array/Array<i64>~visit
             return
            end
            local.get $0
            local.get $1
            call $~lib/array/Array<u64>~visit
            return
           end
           local.get $0
           local.get $1
           call $~lib/function/Function<%28i8%2Ci8%29=>i32>~visit
           return
          end
          local.get $0
          local.get $1
          call $~lib/function/Function<%28u8%2Cu8%29=>i32>~visit
          return
         end
         local.get $0
         local.get $1
         call $~lib/function/Function<%28i16%2Ci16%29=>i32>~visit
         return
        end
        local.get $0
        local.get $1
        call $~lib/function/Function<%28u16%2Cu16%29=>i32>~visit
        return
       end
       local.get $0
       local.get $1
       call $~lib/function/Function<%28i32%2Ci32%29=>i32>~visit
       return
      end
      local.get $0
      local.get $1
      call $~lib/function/Function<%28u32%2Cu32%29=>i32>~visit
      return
     end
     local.get $0
     local.get $1
     call $~lib/function/Function<%28i64%2Ci64%29=>i32>~visit
     return
    end
    local.get $0
    local.get $1
    call $~lib/function/Function<%28u64%2Cu64%29=>i32>~visit
    return
   end
   local.get $0
   local.get $1
   call $~lib/function/Function<%28f32%2Cf32%29=>i32>~visit
   return
  end
  unreachable
 )
 (func $~start (type $none_=>_none)
  call $start:std/typedarray
 )
 (func $~stack_check (type $none_=>_none)
  global.get $~lib/memory/__stack_pointer
  global.get $~lib/memory/__data_end
  i32.lt_s
  if
   unreachable
  end
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 1424
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Int8Array#reduce<i8>
  local.set $result
  local.get $result
  i32.extend8_s
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 1456
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint8Array#reduce<u8>
  local.set $result
  local.get $result
  i32.const 255
  i32.and
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 1488
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#reduce<u8>
  local.set $result
  local.get $result
  i32.const 255
  i32.and
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 1520
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Int16Array#reduce<i16>
  local.set $result
  local.get $result
  i32.extend16_s
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 1552
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint16Array#reduce<u16>
  local.set $result
  local.get $result
  i32.const 65535
  i32.and
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 1584
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Int32Array#reduce<i32>
  local.set $result
  local.get $result
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 1616
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint32Array#reduce<u32>
  local.set $result
  local.get $result
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $array i32)
  (local $result i64)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 1648
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i64.const 0
  call $~lib/typedarray/Int64Array#reduce<i64>
  local.set $result
  local.get $result
  i64.const 6
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $array i32)
  (local $result i64)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 1680
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i64.const 0
  call $~lib/typedarray/Uint64Array#reduce<u64>
  local.set $result
  local.get $result
  i64.const 6
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $array i32)
  (local $result f32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  f32.const 1
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 1
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 2
  f32.const 3
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 1712
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  f32.const 0
  call $~lib/typedarray/Float32Array#reduce<f32>
  local.set $result
  local.get $result
  f32.const 6
  f32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $array i32)
  (local $result f64)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 2
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 1744
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  f64.const 0
  call $~lib/typedarray/Float64Array#reduce<f64>
  local.set $result
  local.get $result
  f64.const 6
  f64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 1776
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Int8Array#reduceRight<i8>
  local.set $result
  local.get $result
  i32.extend8_s
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 1808
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint8Array#reduceRight<u8>
  local.set $result
  local.get $result
  i32.const 255
  i32.and
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 1840
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#reduceRight<u8>
  local.set $result
  local.get $result
  i32.const 255
  i32.and
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 1872
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Int16Array#reduceRight<i16>
  local.set $result
  local.get $result
  i32.extend16_s
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 1904
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint16Array#reduceRight<u16>
  local.set $result
  local.get $result
  i32.const 65535
  i32.and
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 1936
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Int32Array#reduceRight<i32>
  local.set $result
  local.get $result
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $array i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 1968
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint32Array#reduceRight<u32>
  local.set $result
  local.get $result
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $array i32)
  (local $result i64)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 2000
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i64.const 0
  call $~lib/typedarray/Int64Array#reduceRight<i64>
  local.set $result
  local.get $result
  i64.const 6
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $array i32)
  (local $result i64)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 2032
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  i64.const 0
  call $~lib/typedarray/Uint64Array#reduceRight<u64>
  local.set $result
  local.get $result
  i64.const 6
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $array i32)
  (local $result f32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  f32.const 1
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 1
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 2
  f32.const 3
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 2064
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  f32.const 0
  call $~lib/typedarray/Float32Array#reduceRight<f32>
  local.set $result
  local.get $result
  f32.const 6
  f32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testReduceRight<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $array i32)
  (local $result f64)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  i32.const 0
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 2
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 2096
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  f64.const 0
  call $~lib/typedarray/Float64Array#reduceRight<f64>
  local.set $result
  local.get $result
  f64.const 6
  f64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2128
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Int8Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int8Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int8Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int8Array#__get
  i32.const 9
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2160
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint8Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint8Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint8Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint8Array#__get
  i32.const 9
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2192
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint8ClampedArray#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 9
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2224
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Int16Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int16Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int16Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int16Array#__get
  i32.const 9
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint16Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2256
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint16Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint16Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint16Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint16Array#__get
  i32.const 9
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2288
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Int32Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int32Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int32Array#__get
  i32.const 9
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2320
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint32Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint32Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint32Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint32Array#__get
  i32.const 9
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2352
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Int64Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int64Array#__get
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int64Array#__get
  i64.const 4
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int64Array#__get
  i64.const 9
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Uint64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2384
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint64Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint64Array#__get
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint64Array#__get
  i64.const 4
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint64Array#__get
  i64.const 9
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f32.const 1
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 1
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 2
  f32.const 3
  call $~lib/typedarray/Float32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2416
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Float32Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Float32Array#__get
  f32.const 1
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Float32Array#__get
  f32.const 4
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Float32Array#__get
  f32.const 9
  f32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayMap<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 2
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2448
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Float64Array#map
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  i32.const 0
  call $~lib/typedarray/Float64Array#__get
  f64.const 1
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Float64Array#__get
  f64.const 4
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Float64Array#__get
  f64.const 9
  f64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Int8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 5
  i32.const 5
  call $~lib/typedarray/Int8Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2480
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Int8Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Int8Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int8Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int8Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int8Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 5
  i32.const 5
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2512
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint8Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Uint8Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint8Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint8Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint8Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 5
  i32.const 5
  call $~lib/typedarray/Uint8ClampedArray#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2544
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint8ClampedArray#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Uint8ClampedArray#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Int16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 5
  i32.const 5
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2576
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Int16Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Int16Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int16Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int16Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int16Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 5
  i32.const 5
  call $~lib/typedarray/Uint16Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2608
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint16Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Uint16Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint16Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint16Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint16Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Int32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 5
  i32.const 5
  call $~lib/typedarray/Int32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2640
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Int32Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Int32Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int32Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int32Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 5
  i32.const 5
  call $~lib/typedarray/Uint32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2672
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint32Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Uint32Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint32Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint32Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Int64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 3
  i64.const 4
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 5
  i64.const 5
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2704
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Int64Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Int64Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int64Array#__get
  i64.const 3
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int64Array#__get
  i64.const 4
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int64Array#__get
  i64.const 5
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 3
  i64.const 4
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 5
  i64.const 5
  call $~lib/typedarray/Uint64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2736
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Uint64Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Uint64Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint64Array#__get
  i64.const 3
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint64Array#__get
  i64.const 4
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint64Array#__get
  i64.const 5
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Float32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f32.const 1
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 1
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 2
  f32.const 3
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 3
  f32.const 4
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 5
  f32.const 5
  call $~lib/typedarray/Float32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2768
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Float32Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Float32Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Float32Array#__get
  f32.const 3
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Float32Array#__get
  f32.const 4
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Float32Array#__get
  f32.const 5
  f32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Float64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 2
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 3
  f64.const 4
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 5
  f64.const 5
  call $~lib/typedarray/Float64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 2800
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=4
  local.get $2
  call $~lib/typedarray/Float64Array#filter
  local.tee $result
  i32.store $0 offset=8
  local.get $result
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  call $~lib/typedarray/Float64Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 0
  call $~lib/typedarray/Float64Array#__get
  f64.const 3
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Float64Array#__get
  f64.const 4
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Float64Array#__get
  f64.const 5
  f64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 2832
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int8Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 2864
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int8Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 2896
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 2928
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 2960
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 2992
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 3024
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int16Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3056
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int16Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 3088
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint16Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3120
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint16Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 3152
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int32Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3184
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int32Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 3216
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint32Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3248
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint32Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 1
  i64.const 4
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 2
  i64.const 6
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 3280
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int64Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3312
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int64Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 1
  i64.const 4
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 2
  i64.const 6
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 3344
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint64Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3376
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint64Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 1
  f32.const 4
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 2
  f32.const 6
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 3408
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float32Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3440
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float32Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 1
  f64.const 4
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 2
  f64.const 6
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 3472
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float64Array#some
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3504
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float64Array#some
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 3536
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int8Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3568
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int8Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 3600
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3632
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 3664
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3696
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 3728
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int16Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3760
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int16Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 3792
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint16Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3824
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint16Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 3856
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int32Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3888
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int32Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 3920
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint32Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 3952
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint32Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 3984
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int64Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4016
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int64Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 4048
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint64Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4080
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint64Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f32.const 1
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 1
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 2
  f32.const 3
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 4112
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float32Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4144
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float32Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 2
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 4176
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float64Array#findIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4208
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float64Array#findIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 4240
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int8Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4272
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int8Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 4304
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4336
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 4368
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4400
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 4432
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int16Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4464
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int16Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 4496
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint16Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4528
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint16Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 4560
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int32Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4592
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int32Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 4624
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint32Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4656
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint32Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 4688
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int64Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4720
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int64Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 1
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 2
  i64.const 3
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 4752
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint64Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4784
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint64Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f32.const 1
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 1
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 2
  f32.const 3
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 4816
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float32Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4848
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float32Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 2
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 4880
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float64Array#findLastIndex
  local.set $result
  local.get $result
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4912
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float64Array#findLastIndex
  local.set $failResult
  local.get $failResult
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 4944
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int8Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 4976
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int8Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 5008
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5040
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 5072
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5104
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint8ClampedArray#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 5136
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int16Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5168
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int16Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 5200
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint16Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5232
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint16Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 5264
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int32Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5296
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int32Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 5328
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint32Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5360
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint32Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 1
  i64.const 4
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 2
  i64.const 6
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 5392
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int64Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5424
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Int64Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 1
  i64.const 4
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 2
  i64.const 6
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 5456
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint64Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5488
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Uint64Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 1
  f32.const 4
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 2
  f32.const 6
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 5520
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float32Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5552
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float32Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $failResult i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 0
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 1
  f64.const 4
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 2
  f64.const 6
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 5584
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float64Array#every
  local.set $result
  local.get $result
  i32.const 0
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $source
  i32.const 5616
  local.set $3
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.store $0 offset=4
  local.get $3
  call $~lib/typedarray/Float64Array#every
  local.set $failResult
  local.get $failResult
  i32.eqz
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>~anonymous|0 (type $i32_i32_i32_=>_none) (param $value i32) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  i32.extend8_s
  local.get $matchedValue
  i32.extend8_s
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  i32.extend8_s
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  i32.extend8_s
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  i32.extend8_s
  call $~lib/typedarray/Int8Array#__set
  local.get $array
  i32.const 5728
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Int8Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint8Array,u8>~anonymous|0 (type $i32_i32_i32_=>_none) (param $value i32) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  i32.const 255
  i32.and
  local.get $matchedValue
  i32.const 255
  i32.and
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8Array#__set
  local.get $array
  i32.const 5760
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Uint8Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint8ClampedArray,u8>~anonymous|0 (type $i32_i32_i32_=>_none) (param $value i32) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  i32.const 255
  i32.and
  local.get $matchedValue
  i32.const 255
  i32.and
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $array
  i32.const 5792
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Uint8ClampedArray#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>~anonymous|0 (type $i32_i32_i32_=>_none) (param $value i32) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  i32.extend16_s
  local.get $matchedValue
  i32.extend16_s
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  i32.extend16_s
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  i32.extend16_s
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  i32.extend16_s
  call $~lib/typedarray/Int16Array#__set
  local.get $array
  i32.const 5824
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Int16Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint16Array,u16>~anonymous|0 (type $i32_i32_i32_=>_none) (param $value i32) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  i32.const 65535
  i32.and
  local.get $matchedValue
  i32.const 65535
  i32.and
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  i32.const 65535
  i32.and
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  i32.const 65535
  i32.and
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  i32.const 65535
  i32.and
  call $~lib/typedarray/Uint16Array#__set
  local.get $array
  i32.const 5856
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Uint16Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>~anonymous|0 (type $i32_i32_i32_=>_none) (param $value i32) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  local.get $matchedValue
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  call $~lib/typedarray/Int32Array#__set
  local.get $array
  i32.const 5888
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Int32Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint32Array,u32>~anonymous|0 (type $i32_i32_i32_=>_none) (param $value i32) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  local.get $matchedValue
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  call $~lib/typedarray/Uint32Array#__set
  local.get $array
  i32.const 5920
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Uint32Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>~anonymous|0 (type $i64_i32_i32_=>_none) (param $value i64) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  local.get $matchedValue
  i64.extend_i32_s
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  i64.extend_i32_s
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  i64.extend_i32_s
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  i64.extend_i32_s
  call $~lib/typedarray/Int64Array#__set
  local.get $array
  i32.const 5952
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Int64Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint64Array,u64>~anonymous|0 (type $i64_i32_i32_=>_none) (param $value i64) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  local.get $matchedValue
  i64.extend_i32_s
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  i64.extend_i32_s
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  i64.extend_i32_s
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  i64.extend_i32_s
  call $~lib/typedarray/Uint64Array#__set
  local.get $array
  i32.const 5984
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Uint64Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Float32Array,f32>~anonymous|0 (type $f32_i32_i32_=>_none) (param $value f32) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  local.get $matchedValue
  f32.convert_i32_s
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  f32.convert_i32_s
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  f32.convert_i32_s
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  f32.convert_i32_s
  call $~lib/typedarray/Float32Array#__set
  local.get $array
  i32.const 6016
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Float32Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Float64Array,f64>~anonymous|0 (type $f64_i32_i32_=>_none) (param $value f64) (param $index i32) (param $self i32)
  (local $matchedValue i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  global.get $std/typedarray/forEachValues
  local.set $4
  global.get $~lib/memory/__stack_pointer
  local.get $4
  i32.store $0
  local.get $4
  local.get $index
  call $~lib/array/Array<i32>#__get
  local.set $matchedValue
  local.get $value
  local.get $matchedValue
  f64.convert_i32_s
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $index
  global.get $std/typedarray/forEachCallCount
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachSelf
  local.get $self
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $std/typedarray/forEachCallCount
  i32.const 1
  i32.add
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayForEach<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $array i32)
  (local $1 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  i32.const 0
  global.set $std/typedarray/forEachCallCount
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $array
  i32.store $0
  local.get $array
  global.set $std/typedarray/forEachSelf
  local.get $array
  i32.const 0
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  call $~lib/array/Array<i32>#__get
  f64.convert_i32_s
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 1
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 1
  call $~lib/array/Array<i32>#__get
  f64.convert_i32_s
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 2
  global.get $std/typedarray/forEachValues
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=4
  local.get $1
  i32.const 2
  call $~lib/array/Array<i32>#__get
  f64.convert_i32_s
  call $~lib/typedarray/Float64Array#__set
  local.get $array
  i32.const 6048
  local.set $1
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.store $0 offset=8
  local.get $1
  call $~lib/typedarray/Float64Array#forEach
  global.get $std/typedarray/forEachCallCount
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int8Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int8Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.extend8_s
    call $~lib/typedarray/Int8Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.extend8_s
    call $~lib/typedarray/Int8Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Int8Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Int8Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i32.extend8_s
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Int8Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Int8Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Int8Array#__get
  i32.const 8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Int8Array#__get
  i32.const 7
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Int8Array#__get
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Int8Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Uint8Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Uint8Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Uint8Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Uint8Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Uint8Array#__get
  i32.const 8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Uint8Array#__get
  i32.const 7
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Uint8Array#__get
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Uint8Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8ClampedArray#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8ClampedArray#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Uint8ClampedArray#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Uint8ClampedArray#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Uint8ClampedArray#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Uint8ClampedArray#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 7
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int16Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int16Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.extend16_s
    call $~lib/typedarray/Int16Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.extend16_s
    call $~lib/typedarray/Int16Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Int16Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Int16Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i32.extend16_s
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Int16Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Int16Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Int16Array#__get
  i32.const 8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Int16Array#__get
  i32.const 7
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Int16Array#__get
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Int16Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 65535
    i32.and
    call $~lib/typedarray/Uint16Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 65535
    i32.and
    call $~lib/typedarray/Uint16Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Uint16Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Uint16Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i32.const 65535
    i32.and
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Uint16Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Uint16Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Uint16Array#__get
  i32.const 8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Uint16Array#__get
  i32.const 7
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Uint16Array#__get
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Uint16Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int32Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    call $~lib/typedarray/Int32Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    call $~lib/typedarray/Int32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Int32Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Int32Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Int32Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Int32Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Int32Array#__get
  i32.const 7
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Int32Array#__get
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Int32Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    call $~lib/typedarray/Uint32Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    call $~lib/typedarray/Uint32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Uint32Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Uint32Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Uint32Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Uint32Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Uint32Array#__get
  i32.const 8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Uint32Array#__get
  i32.const 7
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Uint32Array#__get
  i32.const 6
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Uint32Array#__get
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int64Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    call $~lib/typedarray/Int64Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    call $~lib/typedarray/Int64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Int64Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Int64Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    i64.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Int64Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Int64Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Int64Array#__get
  i64.const 8
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Int64Array#__get
  i64.const 7
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Int64Array#__get
  i64.const 6
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Int64Array#__get
  i64.const 5
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    call $~lib/typedarray/Uint64Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    call $~lib/typedarray/Uint64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Uint64Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Uint64Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    i64.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Uint64Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Uint64Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Uint64Array#__get
  i64.const 8
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Uint64Array#__get
  i64.const 7
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Uint64Array#__get
  i64.const 6
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Uint64Array#__get
  i64.const 5
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Float32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Float32Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    f32.convert_i32_s
    call $~lib/typedarray/Float32Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    f32.convert_i32_s
    call $~lib/typedarray/Float32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Float32Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Float32Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    f32.convert_i32_s
    f32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Float32Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Float32Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Float32Array#__get
  f32.const 8
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Float32Array#__get
  f32.const 7
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Float32Array#__get
  f32.const 6
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Float32Array#__get
  f32.const 5
  f32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayReverse<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $arrayWithOffset i32)
  (local $i i32)
  (local $5 i32)
  (local $i|6 i32)
  (local $7 i32)
  (local $reversedSlice i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayReverseValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Float64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Float64Array#constructor
  local.tee $arrayWithOffset
  i32.store $0 offset=8
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $5
   local.get $5
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    f64.convert_i32_s
    call $~lib/typedarray/Float64Array#__set
    local.get $arrayWithOffset
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    f64.convert_i32_s
    call $~lib/typedarray/Float64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $array
  call $~lib/typedarray/Float64Array#reverse
  drop
  i32.const 0
  local.set $i|6
  loop $for-loop|1
   local.get $i|6
   local.get $length
   i32.lt_s
   local.set $7
   local.get $7
   if
    local.get $array
    local.get $i|6
    call $~lib/typedarray/Float64Array#__get
    local.get $values
    local.get $length
    i32.const 1
    i32.sub
    local.get $i|6
    i32.sub
    call $~lib/array/Array<i32>#__get
    f64.convert_i32_s
    f64.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|6
    i32.const 1
    i32.add
    local.set $i|6
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $arrayWithOffset
  i32.const 4
  i32.const 8
  call $~lib/typedarray/Float64Array#subarray
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=12
  local.get $9
  call $~lib/typedarray/Float64Array#reverse
  local.tee $reversedSlice
  i32.store $0 offset=16
  local.get $reversedSlice
  i32.const 0
  call $~lib/typedarray/Float64Array#__get
  f64.const 8
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 1
  call $~lib/typedarray/Float64Array#__get
  f64.const 7
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 2
  call $~lib/typedarray/Float64Array#__get
  f64.const 6
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $reversedSlice
  i32.const 3
  call $~lib/typedarray/Float64Array#__get
  f64.const 5
  f64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int8Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.extend8_s
    call $~lib/typedarray/Int8Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int8Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Int8Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Int8Array#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Uint8Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Uint8Array#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 255
    i32.and
    call $~lib/typedarray/Uint8ClampedArray#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Uint8ClampedArray#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Uint8ClampedArray#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int16Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.extend16_s
    call $~lib/typedarray/Int16Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int16Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Int16Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Int16Array#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i32.const 65535
    i32.and
    call $~lib/typedarray/Uint16Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint16Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Uint16Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Uint16Array#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    call $~lib/typedarray/Int32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int32Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Int32Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Int32Array#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    call $~lib/typedarray/Uint32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint32Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Uint32Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Uint32Array#__get
    i32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Int64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    call $~lib/typedarray/Int64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int64Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Int64Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Int64Array#__get
    i64.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    i64.extend_i32_s
    call $~lib/typedarray/Uint64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint64Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Uint64Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Uint64Array#__get
    i64.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Float32Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    f32.convert_i32_s
    call $~lib/typedarray/Float32Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float32Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Float32Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Float32Array#__get
    f32.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArrayWrap<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $values i32)
  (local $length i32)
  (local $array i32)
  (local $i i32)
  (local $4 i32)
  (local $buffer i32)
  (local $result i32)
  (local $i|7 i32)
  (local $8 i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  global.get $std/typedarray/testArrayWrapValues
  local.tee $values
  i32.store $0
  local.get $values
  call $~lib/array/Array<i32>#get:length
  local.set $length
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $length
  call $~lib/typedarray/Float64Array#constructor
  local.tee $array
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $length
   i32.lt_s
   local.set $4
   local.get $4
   if
    local.get $array
    local.get $i
    local.get $values
    local.get $i
    call $~lib/array/Array<i32>#__get
    f64.convert_i32_s
    call $~lib/typedarray/Float64Array#__set
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  global.get $~lib/memory/__stack_pointer
  local.get $array
  i32.load $0
  local.set $9
  global.get $~lib/memory/__stack_pointer
  local.get $9
  i32.store $0 offset=8
  local.get $9
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $array
  i32.load $0 offset=8
  i32.add
  call $~lib/arraybuffer/ArrayBuffer#slice
  local.tee $buffer
  i32.store $0 offset=12
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 0
  drop
  i32.const 1
  drop
  global.get $~lib/memory/__stack_pointer
  local.get $buffer
  i32.const 0
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float64Array.wrap@varargs
  local.tee $result
  i32.store $0 offset=16
  i32.const 0
  local.set $i|7
  loop $for-loop|1
   local.get $i|7
   local.get $length
   i32.lt_s
   local.set $8
   local.get $8
   if
    local.get $array
    local.get $i|7
    call $~lib/typedarray/Float64Array#__get
    local.get $result
    local.get $i|7
    call $~lib/typedarray/Float64Array#__get
    f64.eq
    i32.eqz
    if
     unreachable
    end
    local.get $i|7
    i32.const 1
    i32.add
    local.set $i|7
    br $for-loop|1
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Int8Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Int8Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Int8Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 6752
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int8Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Int8Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 6784
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int8Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Int8Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 6816
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int8Array>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Int8Array#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 6848
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int8Array>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Int8Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Int8Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Int8Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 15
  i32.const 6880
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int8Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint8Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 6912
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Uint8Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 6944
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 6976
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8Array>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Uint8Array#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7008
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Uint8Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Uint8Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7040
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint8ClampedArray> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7072
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8ClampedArray>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7104
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8ClampedArray>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7136
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8ClampedArray>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7168
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8ClampedArray>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/array/Array<i8>>
  i32.const 1
  drop
  local.get $a
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 7200
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8ClampedArray>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Int16Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Int16Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Int16Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 7232
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Int16Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 7280
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int16Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Int16Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 7328
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int16Array>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Int16Array#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 7376
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int16Array>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Int16Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Int16Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Int16Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 64
  i32.const 7424
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int16Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint16Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Uint16Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 7472
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint16Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Uint16Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 7520
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint16Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Uint16Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 7568
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint16Array>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Uint16Array#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 7616
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint16Array>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Uint16Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Uint16Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Uint16Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 1
  i32.const 65
  i32.const 7664
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint16Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Int32Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Int32Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Int32Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 7712
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int32Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Int32Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 7776
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int32Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Int32Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 7840
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int32Array>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Int32Array#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 7904
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int32Array>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Int32Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Int32Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Int32Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 16
  i32.const 7968
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int32Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint32Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Uint32Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 8032
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint32Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Uint32Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 8096
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint32Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Uint32Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 8160
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint32Array>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Uint32Array#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 8224
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint32Array>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Uint32Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Uint32Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Uint32Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 66
  i32.const 8288
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint32Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Int64Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Int64Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Int64Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 8352
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int64Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Int64Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 8464
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int64Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Int64Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 8576
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int64Array>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Int64Array#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 8688
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int64Array>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Int64Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Int64Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Int64Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 67
  i32.const 8800
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Int64Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Uint64Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 0
  call $~lib/typedarray/Uint64Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 8912
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint64Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 3
  call $~lib/typedarray/Uint64Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 9024
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint64Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Uint64Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 9136
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint64Array>
  i32.const 1
  drop
  local.get $a
  global.get $std/typedarray/setSource3
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 2
  call $~lib/typedarray/Uint64Array#set<~lib/array/Array<f64>>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 9248
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint64Array>
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Uint64Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Uint64Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  i32.const 7
  call $~lib/typedarray/Uint64Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 68
  i32.const 9360
  call $~lib/rt/__newArray
  local.set $14
  global.get $~lib/memory/__stack_pointer
  local.get $14
  i32.store $0 offset=16
  local.get $14
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint64Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Float32Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Float32Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  i32.const 0
  call $~lib/typedarray/Float32Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 9472
  call $~lib/rt/__newArray
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  call $std/typedarray/valuesEqual<~lib/typedarray/Float32Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  i32.const 3
  call $~lib/typedarray/Float32Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 9536
  call $~lib/rt/__newArray
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  call $std/typedarray/valuesEqual<~lib/typedarray/Float32Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Float32Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 9600
  call $~lib/rt/__newArray
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  call $std/typedarray/valuesEqual<~lib/typedarray/Float32Array>
  i32.const 0
  drop
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Float32Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Float32Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  i32.const 7
  call $~lib/typedarray/Float32Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 2
  i32.const 61
  i32.const 9664
  call $~lib/rt/__newArray
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  call $std/typedarray/valuesEqual<~lib/typedarray/Float32Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testTypedArraySet<~lib/typedarray/Float64Array> (type $none_=>_none)
  (local $setSource4 i32)
  (local $setSource5 i32)
  (local $setSource6 i32)
  (local $a i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 20
  memory.fill $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $setSource4
  i32.store $0
  local.get $setSource4
  i32.const 0
  i64.const 7
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 1
  i64.const 8
  call $~lib/typedarray/Int64Array#__set
  local.get $setSource4
  i32.const 2
  i64.const 9
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $setSource5
  i32.store $0 offset=4
  local.get $setSource5
  i32.const 0
  i32.const 100
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 1
  i32.const 101
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 2
  i32.const 102
  call $~lib/typedarray/Uint8Array#__set
  local.get $setSource5
  i32.const 3
  i32.const 103
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $setSource6
  i32.store $0 offset=8
  local.get $setSource6
  i32.const 0
  i32.const 1000
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 1
  i32.const 1001
  call $~lib/typedarray/Int16Array#__set
  local.get $setSource6
  i32.const 2
  i32.const 1002
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Float64Array#constructor
  local.tee $a
  i32.store $0 offset=12
  local.get $a
  global.get $std/typedarray/setSource1
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  i32.const 0
  call $~lib/typedarray/Float64Array#set<~lib/array/Array<i32>>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 9728
  call $~lib/rt/__newArray
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  call $std/typedarray/valuesEqual<~lib/typedarray/Float64Array>
  local.get $a
  global.get $std/typedarray/setSource2
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  i32.const 3
  call $~lib/typedarray/Float64Array#set<~lib/array/Array<f32>>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 9840
  call $~lib/rt/__newArray
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  call $std/typedarray/valuesEqual<~lib/typedarray/Float64Array>
  local.get $a
  local.get $setSource4
  i32.const 6
  call $~lib/typedarray/Float64Array#set<~lib/typedarray/Int64Array>
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 9952
  call $~lib/rt/__newArray
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  call $std/typedarray/valuesEqual<~lib/typedarray/Float64Array>
  i32.const 0
  drop
  local.get $a
  local.get $setSource5
  i32.const 0
  call $~lib/typedarray/Float64Array#set<~lib/typedarray/Uint8Array>
  local.get $a
  local.get $setSource6
  i32.const 4
  call $~lib/typedarray/Float64Array#set<~lib/typedarray/Int16Array>
  local.get $a
  global.get $std/typedarray/setSource7
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  i32.const 7
  call $~lib/typedarray/Float64Array#set<~lib/array/Array<i8>>
  i32.const 0
  drop
  local.get $a
  i32.const 10
  i32.const 3
  i32.const 62
  i32.const 10064
  call $~lib/rt/__newArray
  local.set $12
  global.get $~lib/memory/__stack_pointer
  local.get $12
  i32.store $0 offset=16
  local.get $12
  call $std/typedarray/valuesEqual<~lib/typedarray/Float64Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 20
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int8Array,i8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $source
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int8Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int8Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int8Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int8Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10272
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Int8Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int8Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int8Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int8Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i32.const 1
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8Array#__set
  local.get $source
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint8Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint8Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint8Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10336
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Uint8Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint8Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint8Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint8Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint8ClampedArray,u8> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $source
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10400
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Uint8ClampedArray#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i32.const 1
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int16Array#__set
  local.get $source
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int16Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int16Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int16Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int16Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int16Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10464
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Int16Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int16Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int16Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int16Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i32.const 1
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint16Array#__set
  local.get $source
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint16Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint16Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint16Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint16Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint16Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10528
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Uint16Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint16Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint16Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint16Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $source
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int32Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int32Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10592
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Int32Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int32Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int32Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint32Array#__set
  local.get $source
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint32Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint32Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint32Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10656
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Uint32Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint32Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint32Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i64.const 1
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Int64Array#__set
  local.get $source
  i32.const 0
  i64.const 3
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Int64Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int64Array#__get
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int64Array#__get
  i64.const 2
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int64Array#__get
  i64.const 3
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10720
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Int64Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Int64Array#__get
  i64.const 3
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Int64Array#__get
  i64.const 2
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Int64Array#__get
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  i64.const 1
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 1
  i64.const 2
  call $~lib/typedarray/Uint64Array#__set
  local.get $source
  i32.const 0
  i64.const 3
  call $~lib/typedarray/Uint64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint64Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint64Array#__get
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint64Array#__get
  i64.const 2
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint64Array#__get
  i64.const 3
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10784
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Uint64Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Uint64Array#__get
  i64.const 3
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Uint64Array#__get
  i64.const 2
  i64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Uint64Array#__get
  i64.const 1
  i64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  f32.const 1
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 1
  f32.const 2
  call $~lib/typedarray/Float32Array#__set
  local.get $source
  i32.const 0
  f32.const 3
  call $~lib/typedarray/Float32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float32Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Float32Array#__get
  f32.const 1
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Float32Array#__get
  f32.const 2
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Float32Array#__get
  f32.const 3
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10848
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Float32Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Float32Array#__get
  f32.const 3
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Float32Array#__get
  f32.const 2
  f32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Float32Array#__get
  f32.const 1
  f32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $std/typedarray/testArraySort<~lib/typedarray/Float64Array,f64> (type $none_=>_none)
  (local $source i32)
  (local $result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0 offset=8
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float64Array#constructor
  local.tee $source
  i32.store $0
  local.get $source
  i32.const 2
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $source
  i32.const 0
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $source
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float64Array#sort@varargs
  local.tee $result
  i32.store $0 offset=4
  local.get $result
  i32.const 0
  call $~lib/typedarray/Float64Array#__get
  f64.const 1
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Float64Array#__get
  f64.const 2
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Float64Array#__get
  f64.const 3
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 10880
  local.set $2
  global.get $~lib/memory/__stack_pointer
  local.get $2
  i32.store $0 offset=8
  local.get $2
  call $~lib/typedarray/Float64Array#sort
  drop
  local.get $result
  i32.const 0
  call $~lib/typedarray/Float64Array#__get
  f64.const 3
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 1
  call $~lib/typedarray/Float64Array#__get
  f64.const 2
  f64.eq
  i32.eqz
  if
   unreachable
  end
  local.get $result
  i32.const 2
  call $~lib/typedarray/Float64Array#__get
  f64.const 1
  f64.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $start:std/typedarray (type $none_=>_none)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $17 i32)
  (local $18 i32)
  (local $19 i32)
  (local $20 i32)
  (local $21 i32)
  (local $22 i32)
  (local $23 i32)
  (local $24 i32)
  (local $25 i32)
  (local $26 i32)
  (local $27 i32)
  (local $28 i32)
  (local $29 i32)
  (local $30 i32)
  (local $31 i32)
  (local $32 i32)
  (local $33 i32)
  (local $34 i32)
  (local $35 i32)
  (local $36 i32)
  (local $37 i32)
  (local $38 i32)
  (local $39 i32)
  (local $40 i32)
  (local $41 i32)
  (local $42 i32)
  (local $43 i32)
  (local $44 i32)
  (local $45 i32)
  (local $46 i32)
  (local $47 i32)
  (local $48 i32)
  (local $49 i32)
  (local $50 i32)
  (local $51 i32)
  (local $52 i32)
  (local $53 i32)
  (local $54 i32)
  (local $55 i32)
  (local $56 i32)
  (local $57 i32)
  (local $58 i32)
  (local $59 i32)
  (local $60 i32)
  (local $61 i32)
  (local $62 i32)
  (local $63 i32)
  (local $64 i32)
  (local $65 i32)
  (local $66 i32)
  (local $67 i32)
  (local $68 i32)
  (local $69 i32)
  (local $70 i32)
  (local $71 i32)
  (local $72 i32)
  (local $73 i32)
  (local $74 i32)
  (local $75 i32)
  (local $76 i32)
  (local $77 i32)
  (local $78 i32)
  (local $79 i32)
  (local $80 i32)
  (local $81 i32)
  (local $82 i32)
  (local $83 i32)
  (local $84 i32)
  (local $85 i32)
  (local $86 i32)
  (local $87 i32)
  (local $88 i32)
  (local $89 i32)
  (local $90 i32)
  (local $91 i32)
  (local $92 i32)
  (local $93 i32)
  (local $94 i32)
  (local $95 i32)
  (local $96 i32)
  (local $97 i32)
  (local $98 i32)
  (local $99 i32)
  (local $100 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 120
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 120
  memory.fill $0
  global.get $~lib/typedarray/Int8Array.BYTES_PER_ELEMENT
  i32.const 1
  i32.eq
  drop
  global.get $~lib/typedarray/Uint8Array.BYTES_PER_ELEMENT
  i32.const 1
  i32.eq
  drop
  global.get $~lib/typedarray/Uint8ClampedArray.BYTES_PER_ELEMENT
  i32.const 1
  i32.eq
  drop
  global.get $~lib/typedarray/Int16Array.BYTES_PER_ELEMENT
  i32.const 2
  i32.eq
  drop
  global.get $~lib/typedarray/Uint16Array.BYTES_PER_ELEMENT
  i32.const 2
  i32.eq
  drop
  global.get $~lib/typedarray/Int32Array.BYTES_PER_ELEMENT
  i32.const 4
  i32.eq
  drop
  global.get $~lib/typedarray/Uint32Array.BYTES_PER_ELEMENT
  i32.const 4
  i32.eq
  drop
  global.get $~lib/typedarray/Int64Array.BYTES_PER_ELEMENT
  i32.const 8
  i32.eq
  drop
  global.get $~lib/typedarray/Uint64Array.BYTES_PER_ELEMENT
  i32.const 8
  i32.eq
  drop
  global.get $~lib/typedarray/Float32Array.BYTES_PER_ELEMENT
  i32.const 4
  i32.eq
  drop
  global.get $~lib/typedarray/Float64Array.BYTES_PER_ELEMENT
  i32.const 8
  i32.eq
  drop
  memory.size $0
  i32.const 16
  i32.shl
  global.get $~lib/memory/__heap_base
  i32.sub
  i32.const 1
  i32.shr_u
  global.set $~lib/rt/itcms/threshold
  i32.const 112
  call $~lib/rt/itcms/initLazy
  global.set $~lib/rt/itcms/pinSpace
  i32.const 144
  call $~lib/rt/itcms/initLazy
  global.set $~lib/rt/itcms/toSpace
  i32.const 224
  call $~lib/rt/itcms/initLazy
  global.set $~lib/rt/itcms/fromSpace
  i32.const 0
  call $std/typedarray/testInstantiate
  i32.const 5
  call $std/typedarray/testInstantiate
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Int32Array#constructor
  local.tee $0
  i32.store $0
  local.get $0
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $0
  call $~lib/typedarray/Int32Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $0
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 3
  i32.const 4
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.const 1
  call $~lib/typedarray/Int32Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.const 2
  call $~lib/typedarray/Int32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $0
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#subarray
  local.tee $0
  i32.store $0
  local.get $0
  call $~lib/typedarray/Int32Array#get:length
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $0
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 1
  i32.const 4
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.load $0 offset=8
  i32.const 1
  i32.const 4
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $0
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 8
  call $~lib/typedarray/Float64Array#constructor
  local.tee $1
  i32.store $0 offset=4
  local.get $1
  i32.const 0
  f64.const 1
  call $~lib/typedarray/Float64Array#__set
  local.get $1
  i32.const 1
  f64.const 2
  call $~lib/typedarray/Float64Array#__set
  local.get $1
  i32.const 2
  f64.const 7
  call $~lib/typedarray/Float64Array#__set
  local.get $1
  i32.const 3
  f64.const 6
  call $~lib/typedarray/Float64Array#__set
  local.get $1
  i32.const 4
  f64.const 5
  call $~lib/typedarray/Float64Array#__set
  local.get $1
  i32.const 5
  f64.const 4
  call $~lib/typedarray/Float64Array#__set
  local.get $1
  i32.const 6
  f64.const 3
  call $~lib/typedarray/Float64Array#__set
  local.get $1
  i32.const 7
  f64.const 8
  call $~lib/typedarray/Float64Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $1
  i32.const 2
  i32.const 6
  call $~lib/typedarray/Float64Array#subarray
  local.tee $1
  i32.store $0 offset=4
  local.get $1
  call $~lib/typedarray/Float64Array#get:length
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $1
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 2
  i32.const 8
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.load $0 offset=8
  i32.const 4
  i32.const 8
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $1
  i32.const 0
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Float64Array#sort@varargs
  drop
  local.get $1
  i32.const 0
  call $~lib/typedarray/Float64Array#__get
  f64.const 4
  f64.eq
  if (result i32)
   local.get $1
   i32.const 1
   call $~lib/typedarray/Float64Array#__get
   f64.const 5
   f64.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $1
   i32.const 2
   call $~lib/typedarray/Float64Array#__get
   f64.const 6
   f64.eq
  else
   i32.const 0
  end
  if (result i32)
   local.get $1
   i32.const 3
   call $~lib/typedarray/Float64Array#__get
   f64.const 7
   f64.eq
  else
   i32.const 0
  end
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $2
  i32.store $0 offset=8
  local.get $2
  i32.const 0
  i32.const -32
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $2
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $2
  i32.const 2
  i32.const 256
  call $~lib/typedarray/Uint8ClampedArray#__set
  local.get $2
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $2
  i32.const 2
  call $~lib/typedarray/Uint8ClampedArray#__get
  i32.const 255
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 5
  call $~lib/typedarray/Int8Array#constructor
  local.tee $3
  i32.store $0 offset=12
  local.get $3
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $3
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $3
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  local.get $3
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int8Array#__set
  local.get $3
  i32.const 4
  i32.const 5
  call $~lib/typedarray/Int8Array#__set
  local.get $3
  i32.const 1
  i32.const 1
  i32.const 3
  call $~lib/typedarray/Int8Array#fill
  drop
  local.get $3
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 304
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt8ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int8Array#fill
  drop
  local.get $3
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 336
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt8ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.const 1
  i32.const 0
  i32.const -3
  call $~lib/typedarray/Int8Array#fill
  drop
  local.get $3
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 368
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt8ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.const 2
  i32.const -2
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int8Array#fill
  drop
  local.get $3
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 400
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt8ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.const 0
  i32.const 1
  i32.const 0
  call $~lib/typedarray/Int8Array#fill
  drop
  local.get $3
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 432
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt8ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $3
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int8Array#subarray
  local.tee $14
  i32.store $0 offset=20
  local.get $14
  i32.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int8Array#fill
  drop
  local.get $14
  call $~lib/typedarray/Int8Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $14
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $14
  i32.load $0 offset=8
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $14
  i32.const 3
  i32.const 0
  i32.const 15
  i32.const 464
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt8ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $3
  i32.const 5
  i32.const 0
  i32.const 15
  i32.const 496
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt8ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $19
  i32.store $0 offset=24
  local.get $19
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $19
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $19
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $19
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#__set
  local.get $19
  i32.const 4
  i32.const 5
  call $~lib/typedarray/Int32Array#__set
  local.get $19
  i32.const 1
  i32.const 1
  i32.const 3
  call $~lib/typedarray/Int32Array#fill
  drop
  local.get $19
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 528
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $19
  i32.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#fill
  drop
  local.get $19
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 576
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $19
  i32.const 1
  i32.const 0
  i32.const -3
  call $~lib/typedarray/Int32Array#fill
  drop
  local.get $19
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 624
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $19
  i32.const 2
  i32.const -2
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#fill
  drop
  local.get $19
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 672
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $19
  i32.const 0
  i32.const 1
  i32.const 0
  call $~lib/typedarray/Int32Array#fill
  drop
  local.get $19
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 720
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $19
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int32Array#subarray
  local.tee $30
  i32.store $0 offset=28
  local.get $30
  i32.const 0
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#fill
  drop
  local.get $30
  call $~lib/typedarray/Int32Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $30
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 1
  i32.const 4
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $30
  i32.load $0 offset=8
  i32.const 3
  i32.const 4
  i32.mul
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $30
  i32.const 3
  i32.const 2
  i32.const 16
  i32.const 768
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  local.get $19
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 800
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 6
  call $~lib/typedarray/Int8Array#constructor
  local.tee $35
  i32.store $0 offset=32
  local.get $35
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int8Array#__set
  local.get $35
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int8Array#__set
  local.get $35
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int8Array#__set
  local.get $35
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int8Array#__set
  local.get $35
  i32.const 4
  i32.const 5
  call $~lib/typedarray/Int8Array#__set
  local.get $35
  i32.const 5
  i32.const 6
  call $~lib/typedarray/Int8Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $35
  i32.const 1
  i32.const 6
  call $~lib/typedarray/Int8Array#subarray
  local.tee $36
  i32.store $0 offset=36
  local.get $36
  i32.const 0
  call $~lib/typedarray/Int8Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $36
  call $~lib/typedarray/Int8Array#get:length
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $36
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $36
  i32.load $0 offset=8
  i32.const 5
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $36
  i32.const 1
  i32.const 5
  call $~lib/typedarray/Int8Array#subarray
  local.tee $37
  i32.store $0 offset=40
  local.get $37
  i32.const 0
  call $~lib/typedarray/Int8Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $37
  call $~lib/typedarray/Int8Array#get:length
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $37
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $37
  i32.load $0 offset=8
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $37
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int8Array#subarray
  local.tee $38
  i32.store $0 offset=44
  local.get $38
  i32.const 0
  call $~lib/typedarray/Int8Array#__get
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $38
  call $~lib/typedarray/Int8Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $38
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $38
  i32.load $0 offset=8
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $39
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $39
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $39
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#__set
  local.get $39
  i32.const 4
  i32.const 5
  call $~lib/typedarray/Int32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $39
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $40
  i32.store $0 offset=52
  local.get $39
  i32.const 0
  i32.const 3
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 848
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 1
  i32.const 3
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 896
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 1
  i32.const 2
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 944
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 2
  i32.const 2
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 992
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 0
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1040
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 1
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1088
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 1
  i32.const 2
  i32.const 4
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1136
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 0
  i32.const -2
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1184
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const 0
  i32.const -2
  i32.const -1
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1232
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const -4
  i32.const -3
  i32.const -2
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1280
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const -4
  i32.const -3
  i32.const -1
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1328
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $40
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $39
  i32.store $0 offset=48
  local.get $39
  i32.const -4
  i32.const -3
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#copyWithin
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=56
  local.get $100
  i32.const 5
  i32.const 2
  i32.const 16
  i32.const 1376
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/isInt32ArrayEqual
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 5
  call $~lib/typedarray/Int32Array#constructor
  local.tee $65
  i32.store $0 offset=60
  local.get $65
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Int32Array#__set
  local.get $65
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#__set
  local.get $65
  i32.const 2
  i32.const 3
  call $~lib/typedarray/Int32Array#__set
  local.get $65
  i32.const 3
  i32.const 4
  call $~lib/typedarray/Int32Array#__set
  local.get $65
  i32.const 4
  i32.const 5
  call $~lib/typedarray/Int32Array#__set
  global.get $~lib/memory/__stack_pointer
  local.get $65
  i32.const 1
  i32.const 4
  call $~lib/typedarray/Int32Array#subarray
  local.tee $66
  i32.store $0 offset=64
  local.get $66
  call $~lib/typedarray/Int32Array#get:length
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $66
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $66
  i32.load $0 offset=8
  i32.const 12
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $65
  i32.const 1
  i32.const 3
  call $~lib/typedarray/Int32Array#slice
  local.tee $67
  i32.store $0 offset=68
  local.get $67
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $67
  i32.const 1
  call $~lib/typedarray/Int32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $67
  call $~lib/typedarray/Int32Array#get:length
  i32.const 2
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $67
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $67
  i32.load $0 offset=8
  i32.const 8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $66
  i32.const 1
  i32.const 2
  call $~lib/typedarray/Int32Array#slice
  local.tee $68
  i32.store $0 offset=72
  local.get $68
  i32.const 0
  call $~lib/typedarray/Int32Array#__get
  i32.const 3
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $68
  call $~lib/typedarray/Int32Array#get:length
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $68
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $68
  i32.load $0 offset=8
  i32.const 4
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $65
  i32.const 0
  global.get $~lib/builtins/i32.MAX_VALUE
  call $~lib/typedarray/Int32Array#slice
  local.tee $69
  i32.store $0 offset=76
  local.get $69
  local.get $65
  i32.ne
  i32.eqz
  if
   unreachable
  end
  local.get $69
  call $~lib/typedarray/Int32Array#get:length
  local.get $65
  call $~lib/typedarray/Int32Array#get:length
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $69
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  local.get $65
  call $~lib/arraybuffer/ArrayBufferView#get:byteOffset
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $69
  i32.load $0 offset=8
  local.get $65
  i32.load $0 offset=8
  i32.eq
  i32.eqz
  if
   unreachable
  end
  call $std/typedarray/testReduce<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testReduce<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testReduce<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testReduce<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testReduce<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testReduce<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testReduce<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testReduce<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testReduce<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testReduce<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testReduce<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testAt<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testAt<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testAt<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testAt<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testAt<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testAt<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testAt<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testAt<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testAt<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testAt<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testAt<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testReduceRight<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testReduceRight<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testReduceRight<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testReduceRight<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testReduceRight<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testReduceRight<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testReduceRight<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testReduceRight<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testReduceRight<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testReduceRight<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testReduceRight<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayMap<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayMap<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayMap<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayMap<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayMap<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayMap<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayMap<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayMap<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayMap<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayMap<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayMap<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayFilter<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArraySome<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArraySome<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArraySome<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArraySome<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArraySome<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArraySome<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArraySome<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArraySome<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArraySome<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArraySome<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArraySome<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayFindIndex<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayFindLastIndex<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayEvery<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayForEach<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayReverse<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayIndexOfAndLastIndexOf<~lib/typedarray/Float64Array,f64>
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Float64Array#constructor
  local.tee $76
  i32.store $0 offset=80
  local.get $76
  i32.const 0
  f64.const nan:0x8000000000000
  call $~lib/typedarray/Float64Array#__set
  local.get $76
  f64.const nan:0x8000000000000
  i32.const 0
  call $~lib/typedarray/Float64Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $76
  f64.const nan:0x8000000000000
  i32.const 0
  call $~lib/typedarray/Float64Array#includes
  i32.const 0
  i32.ne
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Float32Array#constructor
  local.tee $77
  i32.store $0 offset=84
  local.get $77
  i32.const 0
  f32.const nan:0x400000
  call $~lib/typedarray/Float32Array#__set
  local.get $77
  f32.const nan:0x400000
  i32.const 0
  call $~lib/typedarray/Float32Array#indexOf
  i32.const -1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  local.get $77
  f32.const nan:0x400000
  i32.const 0
  call $~lib/typedarray/Float32Array#includes
  i32.const 0
  i32.ne
  i32.const 1
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 0
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $80
  i32.store $0 offset=88
  global.get $~lib/memory/__stack_pointer
  local.get $80
  i32.const 0
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $81
  i32.store $0 offset=92
  local.get $81
  call $~lib/typedarray/Uint8Array#get:length
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 2
  call $~lib/arraybuffer/ArrayBuffer#constructor
  local.tee $80
  i32.store $0 offset=88
  global.get $~lib/memory/__stack_pointer
  local.get $80
  i32.const 2
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  call $~lib/typedarray/Uint8Array.wrap@varargs
  local.tee $81
  i32.store $0 offset=92
  local.get $81
  call $~lib/typedarray/Uint8Array#get:length
  i32.const 0
  i32.eq
  i32.eqz
  if
   unreachable
  end
  call $std/typedarray/testArrayWrap<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArrayWrap<~lib/typedarray/Float64Array,f64>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Int8Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint8Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint8ClampedArray>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Int16Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint16Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Int32Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint32Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Int64Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Uint64Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Float32Array>
  call $std/typedarray/testTypedArraySet<~lib/typedarray/Float64Array>
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 10
  call $~lib/typedarray/Uint8ClampedArray#constructor
  local.tee $90
  i32.store $0 offset=96
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 3
  call $~lib/typedarray/Float32Array#constructor
  local.tee $91
  i32.store $0 offset=100
  local.get $91
  i32.const 0
  f32.const 400
  call $~lib/typedarray/Float32Array#__set
  local.get $91
  i32.const 1
  f32.const nan:0x400000
  call $~lib/typedarray/Float32Array#__set
  local.get $91
  i32.const 2
  f32.const inf
  call $~lib/typedarray/Float32Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Int64Array#constructor
  local.tee $92
  i32.store $0 offset=104
  local.get $92
  i32.const 0
  i64.const -10
  call $~lib/typedarray/Int64Array#__set
  local.get $92
  i32.const 1
  i64.const 100
  call $~lib/typedarray/Int64Array#__set
  local.get $92
  i32.const 2
  i64.const 10
  call $~lib/typedarray/Int64Array#__set
  local.get $92
  i32.const 3
  i64.const 300
  call $~lib/typedarray/Int64Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 2
  call $~lib/typedarray/Int32Array#constructor
  local.tee $93
  i32.store $0 offset=108
  local.get $93
  i32.const 0
  i32.const 300
  call $~lib/typedarray/Int32Array#__set
  local.get $93
  i32.const 1
  i32.const -1
  call $~lib/typedarray/Int32Array#__set
  local.get $90
  local.get $91
  i32.const 1
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Float32Array>
  local.get $90
  local.get $92
  i32.const 4
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Int64Array>
  local.get $90
  local.get $93
  i32.const 8
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Int32Array>
  local.get $90
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 10176
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8ClampedArray>
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Uint32Array#constructor
  local.tee $96
  i32.store $0 offset=112
  local.get $96
  i32.const 0
  i32.const 1
  call $~lib/typedarray/Uint32Array#__set
  local.get $96
  i32.const 1
  i32.const 300
  call $~lib/typedarray/Uint32Array#__set
  local.get $96
  i32.const 2
  i32.const 100
  call $~lib/typedarray/Uint32Array#__set
  local.get $96
  i32.const 3
  i32.const -1
  call $~lib/typedarray/Uint32Array#__set
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.const 4
  call $~lib/typedarray/Int16Array#constructor
  local.tee $97
  i32.store $0 offset=116
  local.get $97
  i32.const 0
  i32.const -10
  call $~lib/typedarray/Int16Array#__set
  local.get $97
  i32.const 1
  i32.const 100
  call $~lib/typedarray/Int16Array#__set
  local.get $97
  i32.const 2
  i32.const 10
  call $~lib/typedarray/Int16Array#__set
  local.get $97
  i32.const 3
  i32.const 300
  call $~lib/typedarray/Int16Array#__set
  local.get $90
  local.get $96
  i32.const 0
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Uint32Array>
  local.get $90
  local.get $97
  i32.const 5
  call $~lib/typedarray/Uint8ClampedArray#set<~lib/typedarray/Int16Array>
  local.get $90
  i32.const 10
  i32.const 0
  i32.const 63
  i32.const 10208
  call $~lib/rt/__newArray
  local.set $100
  global.get $~lib/memory/__stack_pointer
  local.get $100
  i32.store $0 offset=16
  local.get $100
  call $std/typedarray/valuesEqual<~lib/typedarray/Uint8ClampedArray>
  call $std/typedarray/testArraySort<~lib/typedarray/Int8Array,i8>
  call $std/typedarray/testArraySort<~lib/typedarray/Uint8Array,u8>
  call $std/typedarray/testArraySort<~lib/typedarray/Uint8ClampedArray,u8>
  call $std/typedarray/testArraySort<~lib/typedarray/Int16Array,i16>
  call $std/typedarray/testArraySort<~lib/typedarray/Uint16Array,u16>
  call $std/typedarray/testArraySort<~lib/typedarray/Int32Array,i32>
  call $std/typedarray/testArraySort<~lib/typedarray/Uint32Array,u32>
  call $std/typedarray/testArraySort<~lib/typedarray/Int64Array,i64>
  call $std/typedarray/testArraySort<~lib/typedarray/Uint64Array,u64>
  call $std/typedarray/testArraySort<~lib/typedarray/Float32Array,f32>
  call $std/typedarray/testArraySort<~lib/typedarray/Float64Array,f64>
  global.get $~lib/memory/__heap_base
  global.set $~lib/memory/__stack_pointer
  call $~lib/rt/itcms/__collect
  global.get $~lib/memory/__stack_pointer
  i32.const 120
  i32.add
  global.set $~lib/memory/__stack_pointer
 )
 (func $~lib/arraybuffer/ArrayBufferView#constructor (type $i32_i32_i32_=>_i32) (param $this i32) (param $length i32) (param $alignLog2 i32) (result i32)
  (local $buffer i32)
  (local $4 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 2
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  local.get $this
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#set:buffer
  local.get $this
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#set:dataStart
  local.get $this
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#set:byteLength
  local.get $length
  i32.const 1073741820
  local.get $alignLog2
  i32.shr_u
  i32.gt_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $length
  local.get $alignLog2
  i32.shl
  local.tee $length
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buffer
  i32.store $0 offset=4
  i32.const 2
  global.get $~lib/shared/runtime/Runtime.Incremental
  i32.ne
  drop
  local.get $this
  local.get $buffer
  call $~lib/arraybuffer/ArrayBufferView#set:buffer
  local.get $this
  local.get $buffer
  call $~lib/arraybuffer/ArrayBufferView#set:dataStart
  local.get $this
  local.get $length
  call $~lib/arraybuffer/ArrayBufferView#set:byteLength
  local.get $this
  local.set $4
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $4
 )
 (func $~lib/typedarray/Int8Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 3
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint8Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 4
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint8ClampedArray#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 5
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int16Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 6
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint16Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 7
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int32Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 8
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint32Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 9
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int64Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 10
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint64Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 11
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Float32Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 12
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Float64Array#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  i32.eqz
  if
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.const 13
   call $~lib/rt/itcms/__new
   local.tee $this
   i32.store $0
  end
  global.get $~lib/memory/__stack_pointer
  local.get $this
  local.get $length
  i32.const 3
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $this
  i32.store $0
  local.get $this
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int32Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Int32Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Float64Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Float64Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Float64Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<f64>|inlined.0 (result i32)
    i32.const 0
    drop
    i32.const 1
    drop
    i32.const 8
    i32.const 4
    i32.eq
    drop
    i32.const 272
    br $~lib/util/sort/COMPARATOR<f64>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Float64Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/rt/__newArray (type $i32_i32_i32_i32_=>_i32) (param $length i32) (param $alignLog2 i32) (param $id i32) (param $data i32) (result i32)
  (local $bufferSize i32)
  (local $buffer i32)
  (local $array i32)
  (local $7 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $length
  local.get $alignLog2
  i32.shl
  local.set $bufferSize
  global.get $~lib/memory/__stack_pointer
  local.get $bufferSize
  i32.const 0
  local.get $data
  call $~lib/rt/__newBuffer
  local.tee $buffer
  i32.store $0
  i32.const 16
  local.get $id
  call $~lib/rt/itcms/__new
  local.set $array
  local.get $array
  local.get $buffer
  i32.store $0
  local.get $array
  local.get $buffer
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $array
  local.get $buffer
  i32.store $0 offset=4
  local.get $array
  local.get $bufferSize
  i32.store $0 offset=8
  local.get $array
  local.get $length
  i32.store $0 offset=12
  local.get $array
  local.set $7
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $7
 )
 (func $~lib/typedarray/Int8Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Int8Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 0
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 0
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Int32Array#slice (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $start i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $slice i32)
  (local $18 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $start
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Int32Array#get:length
  local.set $len
  local.get $start
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $start
   local.get $len
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $start
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $start
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $end|5
   local.get $len
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.get $start
  i32.sub
  local.tee $15
  i32.const 0
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  local.get $len
  call $~lib/typedarray/Int32Array#constructor
  local.tee $slice
  i32.store $0
  local.get $slice
  i32.load $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.get $start
  i32.const 2
  i32.shl
  i32.add
  local.get $len
  i32.const 2
  i32.shl
  memory.copy $0 $0
  local.get $slice
  local.set $18
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $18
 )
 (func $~lib/typedarray/Int8Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Int8Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 0
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Uint8Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint8Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 0
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Uint8ClampedArray#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint8ClampedArray#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 0
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store8 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Int16Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Int16Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 1
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Uint16Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint16Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 1
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store16 $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Int32Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Int32Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 2
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Uint32Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint32Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 2
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    i32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Int64Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Int64Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 3
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i64)
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Uint64Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint64Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 3
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i64)
    i64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Float32Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Float32Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 2
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_f32)
    f32.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Float64Array#map (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $ptr i32)
  (local $byteLength i32)
  (local $out i32)
  (local $buf i32)
  (local $i i32)
  (local $10 i32)
  (local $11 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Float64Array#get:length
  local.set $len
  local.get $array
  i32.load $0 offset=4
  local.set $ptr
  local.get $len
  i32.const 3
  i32.shl
  local.set $byteLength
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $byteLength
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $buf
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    local.get $ptr
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_f64)
    f64.store $0
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $buf
  i32.store $0 offset=4
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.set $11
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $11
 )
 (func $~lib/typedarray/Int8Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i32)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Int8Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 0
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_s $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 0
     i32.shl
     i32.add
     local.get $value
     i32.store8 $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 0
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Uint8Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i32)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint8Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 0
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 0
     i32.shl
     i32.add
     local.get $value
     i32.store8 $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 0
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Uint8ClampedArray#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i32)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint8ClampedArray#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 0
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 0
    i32.shl
    i32.add
    i32.load8_u $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 0
     i32.shl
     i32.add
     local.get $value
     i32.store8 $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 0
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Int16Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i32)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Int16Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 1
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_s $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 1
     i32.shl
     i32.add
     local.get $value
     i32.store16 $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 1
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Uint16Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i32)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint16Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 1
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 1
    i32.shl
    i32.add
    i32.load16_u $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 1
     i32.shl
     i32.add
     local.get $value
     i32.store16 $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 1
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Int32Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i32)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Int32Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 2
     i32.shl
     i32.add
     local.get $value
     i32.store $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 2
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Uint32Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i32)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint32Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    i32.load $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i32_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 2
     i32.shl
     i32.add
     local.get $value
     i32.store $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 2
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Int64Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i64)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Int64Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 3
     i32.shl
     i32.add
     local.get $value
     i64.store $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 3
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Uint64Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value i64)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Uint64Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    i64.load $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $i64_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 3
     i32.shl
     i32.add
     local.get $value
     i64.store $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 3
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Float32Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value f32)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Float32Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 2
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 2
    i32.shl
    i32.add
    f32.load $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $f32_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 2
     i32.shl
     i32.add
     local.get $value
     f32.store $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 2
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Float64Array#filter (type $i32_i32_=>_i32) (param $this i32) (param $fn i32) (result i32)
  (local $array i32)
  (local $fn|3 i32)
  (local $len i32)
  (local $out i32)
  (local $buf i32)
  (local $dataStart i32)
  (local $j i32)
  (local $i i32)
  (local $10 i32)
  (local $value f64)
  (local $12 i32)
  (local $byteLength i32)
  (local $data i32)
  (local $15 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i64.const 0
  i64.store $0
  local.get $this
  local.set $array
  local.get $fn
  local.set $fn|3
  local.get $array
  call $~lib/typedarray/Float64Array#get:length
  local.set $len
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  global.get $~lib/memory/__stack_pointer
  local.get $len
  i32.const 3
  i32.shl
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buf
  i32.store $0 offset=4
  local.get $array
  i32.load $0 offset=4
  local.set $dataStart
  i32.const 0
  local.set $j
  i32.const 0
  local.set $i
  loop $for-loop|0
   local.get $i
   local.get $len
   i32.lt_s
   local.set $10
   local.get $10
   if
    local.get $dataStart
    local.get $i
    i32.const 3
    i32.shl
    i32.add
    f64.load $0
    local.set $value
    local.get $value
    local.get $i
    local.get $array
    i32.const 3
    global.set $~argumentsLength
    local.get $fn|3
    i32.load $0
    call_indirect $0 (type $f64_i32_i32_=>_i32)
    if
     local.get $buf
     local.get $j
     local.tee $12
     i32.const 1
     i32.add
     local.set $j
     local.get $12
     i32.const 3
     i32.shl
     i32.add
     local.get $value
     f64.store $0
    end
    local.get $i
    i32.const 1
    i32.add
    local.set $i
    br $for-loop|0
   end
  end
  local.get $j
  i32.const 3
  i32.shl
  local.set $byteLength
  local.get $buf
  local.get $byteLength
  call $~lib/rt/itcms/__renew
  local.set $data
  local.get $out
  local.get $data
  i32.store $0
  local.get $out
  local.get $data
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $data
  i32.store $0 offset=4
  local.get $out
  local.set $15
  global.get $~lib/memory/__stack_pointer
  i32.const 8
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $15
 )
 (func $~lib/typedarray/Uint8Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Uint8Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 0
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 0
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Uint8ClampedArray#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $start i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $start
  local.set $begin
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Uint8ClampedArray#get:length
  local.set $len
  local.get $begin
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin
  i32.const 0
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin
  i32.sub
  i32.const 0
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Int16Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Int16Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 1
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 1
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Uint16Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Uint16Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 1
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 1
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Uint32Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Uint32Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Int64Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Int64Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Uint64Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Uint64Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 3
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 3
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/typedarray/Float32Array#subarray (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $array i32)
  (local $begin|4 i32)
  (local $end|5 i32)
  (local $len i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $14 i32)
  (local $15 i32)
  (local $16 i32)
  (local $out i32)
  (local $buf i32)
  (local $19 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  local.set $array
  local.get $begin
  local.set $begin|4
  local.get $end
  local.set $end|5
  local.get $array
  call $~lib/typedarray/Float32Array#get:length
  local.set $len
  local.get $begin|4
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $begin|4
   i32.add
   local.tee $7
   i32.const 0
   local.tee $8
   local.get $7
   local.get $8
   i32.gt_s
   select
  else
   local.get $begin|4
   local.tee $9
   local.get $len
   local.tee $10
   local.get $9
   local.get $10
   i32.lt_s
   select
  end
  local.set $begin|4
  local.get $end|5
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $len
   local.get $end|5
   i32.add
   local.tee $11
   i32.const 0
   local.tee $12
   local.get $11
   local.get $12
   i32.gt_s
   select
  else
   local.get $end|5
   local.tee $13
   local.get $len
   local.tee $14
   local.get $13
   local.get $14
   i32.lt_s
   select
  end
  local.set $end|5
  local.get $end|5
  local.tee $15
  local.get $begin|4
  local.tee $16
  local.get $15
  local.get $16
  i32.gt_s
  select
  local.set $end|5
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $array
  i32.load $0
  local.set $buf
  local.get $out
  local.get $buf
  i32.store $0
  local.get $out
  local.get $buf
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $array
  i32.load $0 offset=4
  local.get $begin|4
  i32.const 2
  i32.shl
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.get $end|5
  local.get $begin|4
  i32.sub
  i32.const 2
  i32.shl
  i32.store $0 offset=8
  local.get $out
  local.set $19
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $19
 )
 (func $~lib/arraybuffer/ArrayBuffer#constructor (type $i32_i32_=>_i32) (param $this i32) (param $length i32) (result i32)
  (local $buffer i32)
  (local $3 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $length
  i32.const 1073741820
  i32.gt_u
  if
   unreachable
  end
  global.get $~lib/memory/__stack_pointer
  local.get $length
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $buffer
  i32.store $0
  i32.const 2
  global.get $~lib/shared/runtime/Runtime.Incremental
  i32.ne
  drop
  local.get $buffer
  local.set $3
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $3
 )
 (func $~lib/typedarray/Uint8Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 0
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 0
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 0
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 4
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/arraybuffer/ArrayBuffer#slice (type $i32_i32_i32_=>_i32) (param $this i32) (param $begin i32) (param $end i32) (result i32)
  (local $length i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 i32)
  (local $13 i32)
  (local $outSize i32)
  (local $out i32)
  (local $16 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $this
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $length
  local.get $begin
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $length
   local.get $begin
   i32.add
   local.tee $4
   i32.const 0
   local.tee $5
   local.get $4
   local.get $5
   i32.gt_s
   select
  else
   local.get $begin
   local.tee $6
   local.get $length
   local.tee $7
   local.get $6
   local.get $7
   i32.lt_s
   select
  end
  local.set $begin
  local.get $end
  i32.const 0
  i32.lt_s
  if (result i32)
   local.get $length
   local.get $end
   i32.add
   local.tee $8
   i32.const 0
   local.tee $9
   local.get $8
   local.get $9
   i32.gt_s
   select
  else
   local.get $end
   local.tee $10
   local.get $length
   local.tee $11
   local.get $10
   local.get $11
   i32.lt_s
   select
  end
  local.set $end
  local.get $end
  local.get $begin
  i32.sub
  local.tee $12
  i32.const 0
  local.tee $13
  local.get $12
  local.get $13
  i32.gt_s
  select
  local.set $outSize
  global.get $~lib/memory/__stack_pointer
  local.get $outSize
  i32.const 0
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $this
  local.get $begin
  i32.add
  local.get $outSize
  memory.copy $0 $0
  local.get $out
  local.set $16
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $16
 )
 (func $~lib/typedarray/Int8Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 0
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 0
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 0
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 3
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Uint8ClampedArray.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 0
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 0
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 0
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 5
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Int16Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 1
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 1
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 1
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 6
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Uint16Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 1
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 1
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 1
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 7
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Int32Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 3
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 3
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 2
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 8
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Uint32Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 3
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 3
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 2
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 9
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Int64Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 7
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 7
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 3
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 10
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Uint64Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 7
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 7
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 3
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 11
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Float32Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 3
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 3
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 2
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 12
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Float64Array.wrap (type $i32_i32_i32_=>_i32) (param $buffer i32) (param $byteOffset i32) (param $length i32) (result i32)
  (local $buffer|3 i32)
  (local $byteOffset|4 i32)
  (local $len i32)
  (local $byteLength i32)
  (local $bufferByteLength i32)
  (local $out i32)
  (local $9 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  local.get $buffer
  local.set $buffer|3
  local.get $byteOffset
  local.set $byteOffset|4
  local.get $length
  local.set $len
  local.get $buffer|3
  call $~lib/arraybuffer/ArrayBuffer#get:byteLength
  local.set $bufferByteLength
  local.get $byteOffset|4
  local.get $bufferByteLength
  i32.gt_u
  local.get $byteOffset|4
  i32.const 7
  i32.and
  i32.or
  if
   unreachable
  end
  local.get $len
  i32.const 0
  i32.lt_s
  if
   local.get $len
   i32.const -1
   i32.eq
   if
    local.get $bufferByteLength
    i32.const 7
    i32.and
    if
     unreachable
    end
    local.get $bufferByteLength
    local.get $byteOffset|4
    i32.sub
    local.set $byteLength
   else
    unreachable
   end
  else
   local.get $len
   i32.const 3
   i32.shl
   local.set $byteLength
   local.get $byteOffset|4
   local.get $byteLength
   i32.add
   local.get $bufferByteLength
   i32.gt_s
   if
    unreachable
   end
  end
  global.get $~lib/memory/__stack_pointer
  i32.const 12
  i32.const 13
  call $~lib/rt/itcms/__new
  local.tee $out
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.store $0
  local.get $out
  local.get $buffer|3
  i32.const 0
  call $~lib/rt/itcms/__link
  local.get $out
  local.get $byteLength
  i32.store $0 offset=8
  local.get $out
  local.get $buffer|3
  local.get $byteOffset|4
  i32.add
  i32.store $0 offset=4
  local.get $out
  local.set $9
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $9
 )
 (func $~lib/typedarray/Int8Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<i8>|inlined.0 (result i32)
    i32.const 1
    drop
    i32.const 1
    i32.const 4
    i32.le_u
    drop
    i32.const 10240
    br $~lib/util/sort/COMPARATOR<i8>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Int8Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint8Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<u8>|inlined.0 (result i32)
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 10304
    br $~lib/util/sort/COMPARATOR<u8>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Uint8Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint8ClampedArray#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<u8>|inlined.1 (result i32)
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 10368
    br $~lib/util/sort/COMPARATOR<u8>|inlined.1
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Uint8ClampedArray#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int16Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<i16>|inlined.0 (result i32)
    i32.const 1
    drop
    i32.const 2
    i32.const 4
    i32.le_u
    drop
    i32.const 10432
    br $~lib/util/sort/COMPARATOR<i16>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Int16Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint16Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<u16>|inlined.0 (result i32)
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 10496
    br $~lib/util/sort/COMPARATOR<u16>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Uint16Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int32Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<i32>|inlined.0 (result i32)
    i32.const 1
    drop
    i32.const 4
    i32.const 4
    i32.le_u
    drop
    i32.const 10560
    br $~lib/util/sort/COMPARATOR<i32>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Int32Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint32Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<u32>|inlined.0 (result i32)
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 10624
    br $~lib/util/sort/COMPARATOR<u32>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Uint32Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Int64Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<i64>|inlined.0 (result i32)
    i32.const 1
    drop
    i32.const 8
    i32.const 4
    i32.le_u
    drop
    i32.const 10688
    br $~lib/util/sort/COMPARATOR<i64>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Int64Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Uint64Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<u64>|inlined.0 (result i32)
    i32.const 1
    drop
    i32.const 0
    drop
    i32.const 10752
    br $~lib/util/sort/COMPARATOR<u64>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Uint64Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
 (func $~lib/typedarray/Float32Array#sort@varargs (type $i32_i32_=>_i32) (param $this i32) (param $comparator i32) (result i32)
  (local $2 i32)
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.sub
  global.set $~lib/memory/__stack_pointer
  call $~stack_check
  global.get $~lib/memory/__stack_pointer
  i32.const 0
  i32.store $0
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   global.get $~lib/memory/__stack_pointer
   block $~lib/util/sort/COMPARATOR<f32>|inlined.0 (result i32)
    i32.const 0
    drop
    i32.const 1
    drop
    i32.const 4
    i32.const 4
    i32.eq
    drop
    i32.const 10816
    br $~lib/util/sort/COMPARATOR<f32>|inlined.0
   end
   local.tee $comparator
   i32.store $0
  end
  local.get $this
  local.get $comparator
  call $~lib/typedarray/Float32Array#sort
  local.set $2
  global.get $~lib/memory/__stack_pointer
  i32.const 4
  i32.add
  global.set $~lib/memory/__stack_pointer
  local.get $2
 )
)
